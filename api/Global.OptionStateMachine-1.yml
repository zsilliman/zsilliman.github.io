### YamlMime:ManagedReference
items:
- uid: Global.OptionStateMachine`1
  commentId: T:Global.OptionStateMachine`1
  id: OptionStateMachine`1
  parent: Global
  children:
  - Global.OptionStateMachine`1.#ctor
  - Global.OptionStateMachine`1.#ctor(`0)
  - Global.OptionStateMachine`1.AddLeaveStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  - Global.OptionStateMachine`1.AddStartStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  - Global.OptionStateMachine`1.currentState
  - Global.OptionStateMachine`1.lastState
  - Global.OptionStateMachine`1.RemoveLeaveStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  - Global.OptionStateMachine`1.RemoveStartStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  - Global.OptionStateMachine`1.SetState(`0)
  - Global.OptionStateMachine`1.TimeInState
  langs:
  - csharp
  - vb
  name: OptionStateMachine<T>
  nameWithType: OptionStateMachine<T>
  fullName: OptionStateMachine<T>
  type: Class
  source:
    remote:
      path: Assets/Framework/Util/OptionStateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OptionStateMachine
    path: ../Assets/Framework/Util/OptionStateMachine.cs
    startLine: 4
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public class OptionStateMachine<T>
    typeParameters:
    - id: T
    content.vb: Public Class OptionStateMachine(Of T)
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  nameWithType.vb: OptionStateMachine(Of T)
  fullName.vb: OptionStateMachine(Of T)
  name.vb: OptionStateMachine(Of T)
- uid: Global.OptionStateMachine`1.TimeInState
  commentId: P:Global.OptionStateMachine`1.TimeInState
  id: TimeInState
  parent: Global.OptionStateMachine`1
  langs:
  - csharp
  - vb
  name: TimeInState
  nameWithType: OptionStateMachine<T>.TimeInState
  fullName: OptionStateMachine<T>.TimeInState
  type: Property
  source:
    remote:
      path: Assets/Framework/Util/OptionStateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: TimeInState
    path: ../Assets/Framework/Util/OptionStateMachine.cs
    startLine: 13
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public float TimeInState { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property TimeInState As Single
  overload: Global.OptionStateMachine`1.TimeInState*
  nameWithType.vb: OptionStateMachine(Of T).TimeInState
  fullName.vb: OptionStateMachine(Of T).TimeInState
- uid: Global.OptionStateMachine`1.currentState
  commentId: P:Global.OptionStateMachine`1.currentState
  id: currentState
  parent: Global.OptionStateMachine`1
  langs:
  - csharp
  - vb
  name: currentState
  nameWithType: OptionStateMachine<T>.currentState
  fullName: OptionStateMachine<T>.currentState
  type: Property
  source:
    remote:
      path: Assets/Framework/Util/OptionStateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: currentState
    path: ../Assets/Framework/Util/OptionStateMachine.cs
    startLine: 14
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public T currentState { get; protected set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property currentState As T
  overload: Global.OptionStateMachine`1.currentState*
  nameWithType.vb: OptionStateMachine(Of T).currentState
  fullName.vb: OptionStateMachine(Of T).currentState
- uid: Global.OptionStateMachine`1.lastState
  commentId: P:Global.OptionStateMachine`1.lastState
  id: lastState
  parent: Global.OptionStateMachine`1
  langs:
  - csharp
  - vb
  name: lastState
  nameWithType: OptionStateMachine<T>.lastState
  fullName: OptionStateMachine<T>.lastState
  type: Property
  source:
    remote:
      path: Assets/Framework/Util/OptionStateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: lastState
    path: ../Assets/Framework/Util/OptionStateMachine.cs
    startLine: 15
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public T lastState { get; protected set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property lastState As T
  overload: Global.OptionStateMachine`1.lastState*
  nameWithType.vb: OptionStateMachine(Of T).lastState
  fullName.vb: OptionStateMachine(Of T).lastState
- uid: Global.OptionStateMachine`1.#ctor
  commentId: M:Global.OptionStateMachine`1.#ctor
  id: '#ctor'
  parent: Global.OptionStateMachine`1
  langs:
  - csharp
  - vb
  name: OptionStateMachine()
  nameWithType: OptionStateMachine<T>.OptionStateMachine()
  fullName: OptionStateMachine<T>.OptionStateMachine()
  type: Constructor
  source:
    remote:
      path: Assets/Framework/Util/OptionStateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: .ctor
    path: ../Assets/Framework/Util/OptionStateMachine.cs
    startLine: 17
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public OptionStateMachine()
    content.vb: Public Sub New()
  overload: Global.OptionStateMachine`1.#ctor*
  nameWithType.vb: OptionStateMachine(Of T).New()
  fullName.vb: OptionStateMachine(Of T).New()
  name.vb: New()
- uid: Global.OptionStateMachine`1.#ctor(`0)
  commentId: M:Global.OptionStateMachine`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: Global.OptionStateMachine`1
  langs:
  - csharp
  - vb
  name: OptionStateMachine(T)
  nameWithType: OptionStateMachine<T>.OptionStateMachine(T)
  fullName: OptionStateMachine<T>.OptionStateMachine(T)
  type: Constructor
  source:
    remote:
      path: Assets/Framework/Util/OptionStateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: .ctor
    path: ../Assets/Framework/Util/OptionStateMachine.cs
    startLine: 23
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public OptionStateMachine(T InitialState)
    parameters:
    - id: InitialState
      type: '{T}'
    content.vb: Public Sub New(InitialState As T)
  overload: Global.OptionStateMachine`1.#ctor*
  nameWithType.vb: OptionStateMachine(Of T).New(T)
  fullName.vb: OptionStateMachine(Of T).New(T)
  name.vb: New(T)
- uid: Global.OptionStateMachine`1.SetState(`0)
  commentId: M:Global.OptionStateMachine`1.SetState(`0)
  id: SetState(`0)
  parent: Global.OptionStateMachine`1
  langs:
  - csharp
  - vb
  name: SetState(T)
  nameWithType: OptionStateMachine<T>.SetState(T)
  fullName: OptionStateMachine<T>.SetState(T)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/OptionStateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SetState
    path: ../Assets/Framework/Util/OptionStateMachine.cs
    startLine: 30
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void SetState(T new_state)
    parameters:
    - id: new_state
      type: '{T}'
    content.vb: Public Sub SetState(new_state As T)
  overload: Global.OptionStateMachine`1.SetState*
  nameWithType.vb: OptionStateMachine(Of T).SetState(T)
  fullName.vb: OptionStateMachine(Of T).SetState(T)
- uid: Global.OptionStateMachine`1.AddStartStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  commentId: M:Global.OptionStateMachine`1.AddStartStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  id: AddStartStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  parent: Global.OptionStateMachine`1
  langs:
  - csharp
  - vb
  name: AddStartStateCallback(T, TransitionAction)
  nameWithType: OptionStateMachine<T>.AddStartStateCallback(T, OptionStateMachine<T>.TransitionAction)
  fullName: OptionStateMachine<T>.AddStartStateCallback(T, OptionStateMachine<T>.TransitionAction)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/OptionStateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddStartStateCallback
    path: ../Assets/Framework/Util/OptionStateMachine.cs
    startLine: 46
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void AddStartStateCallback(T state, OptionStateMachine<T>.TransitionAction action)
    parameters:
    - id: state
      type: '{T}'
    - id: action
      type: Global.OptionStateMachine`1.TransitionAction
    content.vb: Public Sub AddStartStateCallback(state As T, action As OptionStateMachine(Of T).TransitionAction)
  overload: Global.OptionStateMachine`1.AddStartStateCallback*
  nameWithType.vb: OptionStateMachine(Of T).AddStartStateCallback(T, OptionStateMachine(Of T).TransitionAction)
  fullName.vb: OptionStateMachine(Of T).AddStartStateCallback(T, OptionStateMachine(Of T).TransitionAction)
- uid: Global.OptionStateMachine`1.RemoveStartStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  commentId: M:Global.OptionStateMachine`1.RemoveStartStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  id: RemoveStartStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  parent: Global.OptionStateMachine`1
  langs:
  - csharp
  - vb
  name: RemoveStartStateCallback(T, TransitionAction)
  nameWithType: OptionStateMachine<T>.RemoveStartStateCallback(T, OptionStateMachine<T>.TransitionAction)
  fullName: OptionStateMachine<T>.RemoveStartStateCallback(T, OptionStateMachine<T>.TransitionAction)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/OptionStateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RemoveStartStateCallback
    path: ../Assets/Framework/Util/OptionStateMachine.cs
    startLine: 59
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void RemoveStartStateCallback(T state, OptionStateMachine<T>.TransitionAction action)
    parameters:
    - id: state
      type: '{T}'
    - id: action
      type: Global.OptionStateMachine`1.TransitionAction
    content.vb: Public Sub RemoveStartStateCallback(state As T, action As OptionStateMachine(Of T).TransitionAction)
  overload: Global.OptionStateMachine`1.RemoveStartStateCallback*
  nameWithType.vb: OptionStateMachine(Of T).RemoveStartStateCallback(T, OptionStateMachine(Of T).TransitionAction)
  fullName.vb: OptionStateMachine(Of T).RemoveStartStateCallback(T, OptionStateMachine(Of T).TransitionAction)
- uid: Global.OptionStateMachine`1.AddLeaveStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  commentId: M:Global.OptionStateMachine`1.AddLeaveStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  id: AddLeaveStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  parent: Global.OptionStateMachine`1
  langs:
  - csharp
  - vb
  name: AddLeaveStateCallback(T, TransitionAction)
  nameWithType: OptionStateMachine<T>.AddLeaveStateCallback(T, OptionStateMachine<T>.TransitionAction)
  fullName: OptionStateMachine<T>.AddLeaveStateCallback(T, OptionStateMachine<T>.TransitionAction)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/OptionStateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddLeaveStateCallback
    path: ../Assets/Framework/Util/OptionStateMachine.cs
    startLine: 71
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void AddLeaveStateCallback(T state, OptionStateMachine<T>.TransitionAction action)
    parameters:
    - id: state
      type: '{T}'
    - id: action
      type: Global.OptionStateMachine`1.TransitionAction
    content.vb: Public Sub AddLeaveStateCallback(state As T, action As OptionStateMachine(Of T).TransitionAction)
  overload: Global.OptionStateMachine`1.AddLeaveStateCallback*
  nameWithType.vb: OptionStateMachine(Of T).AddLeaveStateCallback(T, OptionStateMachine(Of T).TransitionAction)
  fullName.vb: OptionStateMachine(Of T).AddLeaveStateCallback(T, OptionStateMachine(Of T).TransitionAction)
- uid: Global.OptionStateMachine`1.RemoveLeaveStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  commentId: M:Global.OptionStateMachine`1.RemoveLeaveStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  id: RemoveLeaveStateCallback(`0,OptionStateMachine{`0}.TransitionAction)
  parent: Global.OptionStateMachine`1
  langs:
  - csharp
  - vb
  name: RemoveLeaveStateCallback(T, TransitionAction)
  nameWithType: OptionStateMachine<T>.RemoveLeaveStateCallback(T, OptionStateMachine<T>.TransitionAction)
  fullName: OptionStateMachine<T>.RemoveLeaveStateCallback(T, OptionStateMachine<T>.TransitionAction)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/OptionStateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RemoveLeaveStateCallback
    path: ../Assets/Framework/Util/OptionStateMachine.cs
    startLine: 84
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void RemoveLeaveStateCallback(T state, OptionStateMachine<T>.TransitionAction action)
    parameters:
    - id: state
      type: '{T}'
    - id: action
      type: Global.OptionStateMachine`1.TransitionAction
    content.vb: Public Sub RemoveLeaveStateCallback(state As T, action As OptionStateMachine(Of T).TransitionAction)
  overload: Global.OptionStateMachine`1.RemoveLeaveStateCallback*
  nameWithType.vb: OptionStateMachine(Of T).RemoveLeaveStateCallback(T, OptionStateMachine(Of T).TransitionAction)
  fullName.vb: OptionStateMachine(Of T).RemoveLeaveStateCallback(T, OptionStateMachine(Of T).TransitionAction)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.OptionStateMachine`1.TimeInState*
  commentId: Overload:Global.OptionStateMachine`1.TimeInState
  name: TimeInState
  nameWithType: OptionStateMachine<T>.TimeInState
  fullName: OptionStateMachine<T>.TimeInState
  nameWithType.vb: OptionStateMachine(Of T).TimeInState
  fullName.vb: OptionStateMachine(Of T).TimeInState
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.OptionStateMachine`1.currentState*
  commentId: Overload:Global.OptionStateMachine`1.currentState
  name: currentState
  nameWithType: OptionStateMachine<T>.currentState
  fullName: OptionStateMachine<T>.currentState
  nameWithType.vb: OptionStateMachine(Of T).currentState
  fullName.vb: OptionStateMachine(Of T).currentState
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Global.OptionStateMachine`1.lastState*
  commentId: Overload:Global.OptionStateMachine`1.lastState
  name: lastState
  nameWithType: OptionStateMachine<T>.lastState
  fullName: OptionStateMachine<T>.lastState
  nameWithType.vb: OptionStateMachine(Of T).lastState
  fullName.vb: OptionStateMachine(Of T).lastState
- uid: Global.OptionStateMachine`1.#ctor*
  commentId: Overload:Global.OptionStateMachine`1.#ctor
  name: OptionStateMachine
  nameWithType: OptionStateMachine<T>.OptionStateMachine
  fullName: OptionStateMachine<T>.OptionStateMachine
  nameWithType.vb: OptionStateMachine(Of T).New
  fullName.vb: OptionStateMachine(Of T).New
  name.vb: New
- uid: Global.OptionStateMachine`1.SetState*
  commentId: Overload:Global.OptionStateMachine`1.SetState
  name: SetState
  nameWithType: OptionStateMachine<T>.SetState
  fullName: OptionStateMachine<T>.SetState
  nameWithType.vb: OptionStateMachine(Of T).SetState
  fullName.vb: OptionStateMachine(Of T).SetState
- uid: Global.OptionStateMachine`1.AddStartStateCallback*
  commentId: Overload:Global.OptionStateMachine`1.AddStartStateCallback
  name: AddStartStateCallback
  nameWithType: OptionStateMachine<T>.AddStartStateCallback
  fullName: OptionStateMachine<T>.AddStartStateCallback
  nameWithType.vb: OptionStateMachine(Of T).AddStartStateCallback
  fullName.vb: OptionStateMachine(Of T).AddStartStateCallback
- uid: Global.OptionStateMachine`1.TransitionAction
  commentId: T:Global.OptionStateMachine`1.TransitionAction
  name: OptionStateMachine<T>.TransitionAction
  nameWithType: OptionStateMachine<T>.TransitionAction
  fullName: OptionStateMachine<T>.TransitionAction
  nameWithType.vb: OptionStateMachine(Of T).TransitionAction
  fullName.vb: OptionStateMachine(Of T).TransitionAction
  name.vb: OptionStateMachine(Of T).TransitionAction
  spec.csharp:
  - uid: Global.OptionStateMachine`1
    name: OptionStateMachine
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: Global.OptionStateMachine`1.TransitionAction
    name: TransitionAction
  spec.vb:
  - uid: Global.OptionStateMachine`1
    name: OptionStateMachine
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: Global.OptionStateMachine`1.TransitionAction
    name: TransitionAction
- uid: Global.OptionStateMachine`1.RemoveStartStateCallback*
  commentId: Overload:Global.OptionStateMachine`1.RemoveStartStateCallback
  name: RemoveStartStateCallback
  nameWithType: OptionStateMachine<T>.RemoveStartStateCallback
  fullName: OptionStateMachine<T>.RemoveStartStateCallback
  nameWithType.vb: OptionStateMachine(Of T).RemoveStartStateCallback
  fullName.vb: OptionStateMachine(Of T).RemoveStartStateCallback
- uid: Global.OptionStateMachine`1.AddLeaveStateCallback*
  commentId: Overload:Global.OptionStateMachine`1.AddLeaveStateCallback
  name: AddLeaveStateCallback
  nameWithType: OptionStateMachine<T>.AddLeaveStateCallback
  fullName: OptionStateMachine<T>.AddLeaveStateCallback
  nameWithType.vb: OptionStateMachine(Of T).AddLeaveStateCallback
  fullName.vb: OptionStateMachine(Of T).AddLeaveStateCallback
- uid: Global.OptionStateMachine`1.RemoveLeaveStateCallback*
  commentId: Overload:Global.OptionStateMachine`1.RemoveLeaveStateCallback
  name: RemoveLeaveStateCallback
  nameWithType: OptionStateMachine<T>.RemoveLeaveStateCallback
  fullName: OptionStateMachine<T>.RemoveLeaveStateCallback
  nameWithType.vb: OptionStateMachine(Of T).RemoveLeaveStateCallback
  fullName.vb: OptionStateMachine(Of T).RemoveLeaveStateCallback
