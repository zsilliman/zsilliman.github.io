### YamlMime:ManagedReference
items:
- uid: Global.CollectInteractionCondition`1
  commentId: T:Global.CollectInteractionCondition`1
  id: CollectInteractionCondition`1
  parent: Global
  children:
  - Global.CollectInteractionCondition`1.CollectableList
  - Global.CollectInteractionCondition`1.RequirePlayerGrounded
  - Global.CollectInteractionCondition`1.SetupCondition(Interactable)
  - Global.CollectInteractionCondition`1.TriggerOnSpecificCollectables
  - Global.CollectInteractionCondition`1.UpdateCondition
  langs:
  - csharp
  - vb
  name: CollectInteractionCondition<T>
  nameWithType: CollectInteractionCondition<T>
  fullName: CollectInteractionCondition<T>
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/World/Interactable/Conditions/CollectInteractionCondition.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: CollectInteractionCondition
    path: ../Assets/Objects & Components/World/Interactable/Conditions/CollectInteractionCondition.cs
    startLine: 10
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Serializable]

      public class CollectInteractionCondition<T> : Interactable.InteractionCondition where T : IntObject, ICollectableInterface
    typeParameters:
    - id: T
    content.vb: >-
      <Serializable>

      Public Class CollectInteractionCondition(Of T As {IntObject, ICollectableInterface}) Inherits Interactable.InteractionCondition
  inheritance:
  - System.Object
  - Global.Interactable.InteractionCondition
  inheritedMembers:
  - Global.Interactable.InteractionCondition.interactable
  - Global.Interactable.InteractionCondition.InvokeOnConditionMet
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: CollectInteractionCondition(Of T)
  fullName.vb: CollectInteractionCondition(Of T)
  name.vb: CollectInteractionCondition(Of T)
- uid: Global.CollectInteractionCondition`1.RequirePlayerGrounded
  commentId: F:Global.CollectInteractionCondition`1.RequirePlayerGrounded
  id: RequirePlayerGrounded
  parent: Global.CollectInteractionCondition`1
  langs:
  - csharp
  - vb
  name: RequirePlayerGrounded
  nameWithType: CollectInteractionCondition<T>.RequirePlayerGrounded
  fullName: CollectInteractionCondition<T>.RequirePlayerGrounded
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/World/Interactable/Conditions/CollectInteractionCondition.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RequirePlayerGrounded
    path: ../Assets/Objects & Components/World/Interactable/Conditions/CollectInteractionCondition.cs
    startLine: 14
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Tooltip("Only trigger when the player is grounded")]

      public bool RequirePlayerGrounded
    return:
      type: System.Boolean
    content.vb: >-
      <Tooltip("Only trigger when the player is grounded")>

      Public RequirePlayerGrounded As Boolean
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Only trigger when the player is grounded
  nameWithType.vb: CollectInteractionCondition(Of T).RequirePlayerGrounded
  fullName.vb: CollectInteractionCondition(Of T).RequirePlayerGrounded
- uid: Global.CollectInteractionCondition`1.TriggerOnSpecificCollectables
  commentId: F:Global.CollectInteractionCondition`1.TriggerOnSpecificCollectables
  id: TriggerOnSpecificCollectables
  parent: Global.CollectInteractionCondition`1
  langs:
  - csharp
  - vb
  name: TriggerOnSpecificCollectables
  nameWithType: CollectInteractionCondition<T>.TriggerOnSpecificCollectables
  fullName: CollectInteractionCondition<T>.TriggerOnSpecificCollectables
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/World/Interactable/Conditions/CollectInteractionCondition.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: TriggerOnSpecificCollectables
    path: ../Assets/Objects & Components/World/Interactable/Conditions/CollectInteractionCondition.cs
    startLine: 16
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Tooltip("If false, trigger is invoked after all enemies in section are killed. If true, trigger is invoked after all enemies in specified list are killed (useful for boss battles).")]

      public bool TriggerOnSpecificCollectables
    return:
      type: System.Boolean
    content.vb: >-
      <Tooltip("If false, trigger is invoked after all enemies in section are killed. If true, trigger is invoked after all enemies in specified list are killed (useful for boss battles).")>

      Public TriggerOnSpecificCollectables As Boolean
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: If false, trigger is invoked after all enemies in section are killed. If true, trigger is invoked after all enemies in specified list are killed (useful for boss battles).
  nameWithType.vb: CollectInteractionCondition(Of T).TriggerOnSpecificCollectables
  fullName.vb: CollectInteractionCondition(Of T).TriggerOnSpecificCollectables
- uid: Global.CollectInteractionCondition`1.CollectableList
  commentId: F:Global.CollectInteractionCondition`1.CollectableList
  id: CollectableList
  parent: Global.CollectInteractionCondition`1
  langs:
  - csharp
  - vb
  name: CollectableList
  nameWithType: CollectInteractionCondition<T>.CollectableList
  fullName: CollectInteractionCondition<T>.CollectableList
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/World/Interactable/Conditions/CollectInteractionCondition.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: CollectableList
    path: ../Assets/Objects & Components/World/Interactable/Conditions/CollectInteractionCondition.cs
    startLine: 17
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public List<T> CollectableList
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public CollectableList As List(Of T)
  nameWithType.vb: CollectInteractionCondition(Of T).CollectableList
  fullName.vb: CollectInteractionCondition(Of T).CollectableList
- uid: Global.CollectInteractionCondition`1.SetupCondition(Interactable)
  commentId: M:Global.CollectInteractionCondition`1.SetupCondition(Interactable)
  id: SetupCondition(Interactable)
  parent: Global.CollectInteractionCondition`1
  langs:
  - csharp
  - vb
  name: SetupCondition(Interactable)
  nameWithType: CollectInteractionCondition<T>.SetupCondition(Interactable)
  fullName: CollectInteractionCondition<T>.SetupCondition(Interactable)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/World/Interactable/Conditions/CollectInteractionCondition.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SetupCondition
    path: ../Assets/Objects & Components/World/Interactable/Conditions/CollectInteractionCondition.cs
    startLine: 21
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void SetupCondition(Interactable interactable)
    parameters:
    - id: interactable
      type: Global.Interactable
    content.vb: Public Overrides Sub SetupCondition(interactable As Interactable)
  overridden: Global.Interactable.InteractionCondition.SetupCondition(Interactable)
  overload: Global.CollectInteractionCondition`1.SetupCondition*
  nameWithType.vb: CollectInteractionCondition(Of T).SetupCondition(Interactable)
  fullName.vb: CollectInteractionCondition(Of T).SetupCondition(Interactable)
- uid: Global.CollectInteractionCondition`1.UpdateCondition
  commentId: M:Global.CollectInteractionCondition`1.UpdateCondition
  id: UpdateCondition
  parent: Global.CollectInteractionCondition`1
  langs:
  - csharp
  - vb
  name: UpdateCondition()
  nameWithType: CollectInteractionCondition<T>.UpdateCondition()
  fullName: CollectInteractionCondition<T>.UpdateCondition()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/World/Interactable/Conditions/CollectInteractionCondition.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: UpdateCondition
    path: ../Assets/Objects & Components/World/Interactable/Conditions/CollectInteractionCondition.cs
    startLine: 48
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void UpdateCondition()
    content.vb: Public Overrides Sub UpdateCondition()
  overridden: Global.Interactable.InteractionCondition.UpdateCondition
  overload: Global.CollectInteractionCondition`1.UpdateCondition*
  nameWithType.vb: CollectInteractionCondition(Of T).UpdateCondition()
  fullName.vb: CollectInteractionCondition(Of T).UpdateCondition()
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.Interactable.InteractionCondition
  commentId: T:Global.Interactable.InteractionCondition
  name: Interactable.InteractionCondition
  nameWithType: Interactable.InteractionCondition
  fullName: Interactable.InteractionCondition
  spec.csharp:
  - uid: Global.Interactable
    name: Interactable
  - name: .
  - uid: Global.Interactable.InteractionCondition
    name: InteractionCondition
  spec.vb:
  - uid: Global.Interactable
    name: Interactable
  - name: .
  - uid: Global.Interactable.InteractionCondition
    name: InteractionCondition
- uid: Global.Interactable.InteractionCondition.interactable
  commentId: F:Global.Interactable.InteractionCondition.interactable
  parent: Global.Interactable.InteractionCondition
  name: interactable
  nameWithType: Interactable.InteractionCondition.interactable
  fullName: Interactable.InteractionCondition.interactable
- uid: Global.Interactable.InteractionCondition.InvokeOnConditionMet
  commentId: M:Global.Interactable.InteractionCondition.InvokeOnConditionMet
  parent: Global.Interactable.InteractionCondition
  name: InvokeOnConditionMet()
  nameWithType: Interactable.InteractionCondition.InvokeOnConditionMet()
  fullName: Interactable.InteractionCondition.InvokeOnConditionMet()
  spec.csharp:
  - uid: Global.Interactable.InteractionCondition.InvokeOnConditionMet
    name: InvokeOnConditionMet
  - name: (
  - name: )
  spec.vb:
  - uid: Global.Interactable.InteractionCondition.InvokeOnConditionMet
    name: InvokeOnConditionMet
  - name: (
  - name: )
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: Global.Interactable.InteractionCondition.SetupCondition(Interactable)
  commentId: M:Global.Interactable.InteractionCondition.SetupCondition(Interactable)
  parent: Global.Interactable.InteractionCondition
  name: SetupCondition(Interactable)
  nameWithType: Interactable.InteractionCondition.SetupCondition(Interactable)
  fullName: Interactable.InteractionCondition.SetupCondition(Interactable)
  spec.csharp:
  - uid: Global.Interactable.InteractionCondition.SetupCondition(Interactable)
    name: SetupCondition
  - name: (
  - uid: Global.Interactable
    name: Interactable
  - name: )
  spec.vb:
  - uid: Global.Interactable.InteractionCondition.SetupCondition(Interactable)
    name: SetupCondition
  - name: (
  - uid: Global.Interactable
    name: Interactable
  - name: )
- uid: Global.CollectInteractionCondition`1.SetupCondition*
  commentId: Overload:Global.CollectInteractionCondition`1.SetupCondition
  name: SetupCondition
  nameWithType: CollectInteractionCondition<T>.SetupCondition
  fullName: CollectInteractionCondition<T>.SetupCondition
  nameWithType.vb: CollectInteractionCondition(Of T).SetupCondition
  fullName.vb: CollectInteractionCondition(Of T).SetupCondition
- uid: Global.Interactable
  commentId: T:Global.Interactable
  name: Interactable
  nameWithType: Interactable
  fullName: Interactable
- uid: Global.Interactable.InteractionCondition.UpdateCondition
  commentId: M:Global.Interactable.InteractionCondition.UpdateCondition
  parent: Global.Interactable.InteractionCondition
  name: UpdateCondition()
  nameWithType: Interactable.InteractionCondition.UpdateCondition()
  fullName: Interactable.InteractionCondition.UpdateCondition()
  spec.csharp:
  - uid: Global.Interactable.InteractionCondition.UpdateCondition
    name: UpdateCondition
  - name: (
  - name: )
  spec.vb:
  - uid: Global.Interactable.InteractionCondition.UpdateCondition
    name: UpdateCondition
  - name: (
  - name: )
- uid: Global.CollectInteractionCondition`1.UpdateCondition*
  commentId: Overload:Global.CollectInteractionCondition`1.UpdateCondition
  name: UpdateCondition
  nameWithType: CollectInteractionCondition<T>.UpdateCondition
  fullName: CollectInteractionCondition<T>.UpdateCondition
  nameWithType.vb: CollectInteractionCondition(Of T).UpdateCondition
  fullName.vb: CollectInteractionCondition(Of T).UpdateCondition
