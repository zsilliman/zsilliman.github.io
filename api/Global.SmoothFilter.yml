### YamlMime:ManagedReference
items:
- uid: Global.SmoothFilter
  commentId: T:Global.SmoothFilter
  id: SmoothFilter
  parent: Global
  children:
  - Global.SmoothFilter.#ctor(System.Single,EasingFunction.Ease,System.Single)
  - Global.SmoothFilter.GetValue
  - Global.SmoothFilter.update(System.Single,System.Single)
  langs:
  - csharp
  - vb
  name: SmoothFilter
  nameWithType: SmoothFilter
  fullName: SmoothFilter
  type: Class
  source:
    remote:
      path: Assets/Framework/Util/SmoothingFilter.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SmoothFilter
    path: ../Assets/Framework/Util/SmoothingFilter.cs
    startLine: 4
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public class SmoothFilter
    content.vb: Public Class SmoothFilter
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
- uid: Global.SmoothFilter.#ctor(System.Single,EasingFunction.Ease,System.Single)
  commentId: M:Global.SmoothFilter.#ctor(System.Single,EasingFunction.Ease,System.Single)
  id: '#ctor(System.Single,EasingFunction.Ease,System.Single)'
  parent: Global.SmoothFilter
  langs:
  - csharp
  - vb
  name: SmoothFilter(float, Ease, float)
  nameWithType: SmoothFilter.SmoothFilter(float, EasingFunction.Ease, float)
  fullName: SmoothFilter.SmoothFilter(float, EasingFunction.Ease, float)
  type: Constructor
  source:
    remote:
      path: Assets/Framework/Util/SmoothingFilter.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: .ctor
    path: ../Assets/Framework/Util/SmoothingFilter.cs
    startLine: 13
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public SmoothFilter(float initial_value, EasingFunction.Ease ease, float time_taken)
    parameters:
    - id: initial_value
      type: System.Single
    - id: ease
      type: Global.EasingFunction.Ease
    - id: time_taken
      type: System.Single
    content.vb: Public Sub New(initial_value As Single, ease As EasingFunction.Ease, time_taken As Single)
  overload: Global.SmoothFilter.#ctor*
  nameWithType.vb: SmoothFilter.New(Single, EasingFunction.Ease, Single)
  fullName.vb: SmoothFilter.New(Single, EasingFunction.Ease, Single)
  name.vb: New(Single, Ease, Single)
- uid: Global.SmoothFilter.update(System.Single,System.Single)
  commentId: M:Global.SmoothFilter.update(System.Single,System.Single)
  id: update(System.Single,System.Single)
  parent: Global.SmoothFilter
  langs:
  - csharp
  - vb
  name: update(float, float)
  nameWithType: SmoothFilter.update(float, float)
  fullName: SmoothFilter.update(float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/SmoothingFilter.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: update
    path: ../Assets/Framework/Util/SmoothingFilter.cs
    startLine: 23
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void update(float desired_value, float dTime)
    parameters:
    - id: desired_value
      type: System.Single
    - id: dTime
      type: System.Single
    content.vb: Public Sub update(desired_value As Single, dTime As Single)
  overload: Global.SmoothFilter.update*
  nameWithType.vb: SmoothFilter.update(Single, Single)
  fullName.vb: SmoothFilter.update(Single, Single)
  name.vb: update(Single, Single)
- uid: Global.SmoothFilter.GetValue
  commentId: M:Global.SmoothFilter.GetValue
  id: GetValue
  parent: Global.SmoothFilter
  langs:
  - csharp
  - vb
  name: GetValue()
  nameWithType: SmoothFilter.GetValue()
  fullName: SmoothFilter.GetValue()
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/SmoothingFilter.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetValue
    path: ../Assets/Framework/Util/SmoothingFilter.cs
    startLine: 36
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public float GetValue()
    return:
      type: System.Single
    content.vb: Public Function GetValue() As Single
  overload: Global.SmoothFilter.GetValue*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.SmoothFilter.#ctor*
  commentId: Overload:Global.SmoothFilter.#ctor
  name: SmoothFilter
  nameWithType: SmoothFilter.SmoothFilter
  fullName: SmoothFilter.SmoothFilter
  nameWithType.vb: SmoothFilter.New
  fullName.vb: SmoothFilter.New
  name.vb: New
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.EasingFunction.Ease
  commentId: T:Global.EasingFunction.Ease
  name: EasingFunction.Ease
  nameWithType: EasingFunction.Ease
  fullName: EasingFunction.Ease
  spec.csharp:
  - uid: Global.EasingFunction
    name: EasingFunction
  - name: .
  - uid: Global.EasingFunction.Ease
    name: Ease
  spec.vb:
  - uid: Global.EasingFunction
    name: EasingFunction
  - name: .
  - uid: Global.EasingFunction.Ease
    name: Ease
- uid: Global.SmoothFilter.update*
  commentId: Overload:Global.SmoothFilter.update
  name: update
  nameWithType: SmoothFilter.update
  fullName: SmoothFilter.update
- uid: Global.SmoothFilter.GetValue*
  commentId: Overload:Global.SmoothFilter.GetValue
  name: GetValue
  nameWithType: SmoothFilter.GetValue
  fullName: SmoothFilter.GetValue
