### YamlMime:ManagedReference
items:
- uid: Global.DamageType
  commentId: T:Global.DamageType
  id: DamageType
  parent: Global
  children:
  - Global.DamageType.Critical
  - Global.DamageType.Impact
  - Global.DamageType.PlayerHurt
  - Global.DamageType.Poison
  langs:
  - csharp
  - vb
  name: DamageType
  nameWithType: DamageType
  fullName: DamageType
  type: Enum
  source:
    remote:
      path: Assets/DamagePopUpManager.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: DamageType
    path: ../Assets/DamagePopUpManager.cs
    startLine: 1
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public enum DamageType
    content.vb: Public Enum DamageType
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
- uid: Global.DamageType.PlayerHurt
  commentId: F:Global.DamageType.PlayerHurt
  id: PlayerHurt
  parent: Global.DamageType
  langs:
  - csharp
  - vb
  name: PlayerHurt
  nameWithType: DamageType.PlayerHurt
  fullName: DamageType.PlayerHurt
  type: Field
  source:
    remote:
      path: Assets/DamagePopUpManager.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: PlayerHurt
    path: ../Assets/DamagePopUpManager.cs
    startLine: 2
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: PlayerHurt = 0
    return:
      type: Global.DamageType
- uid: Global.DamageType.Impact
  commentId: F:Global.DamageType.Impact
  id: Impact
  parent: Global.DamageType
  langs:
  - csharp
  - vb
  name: Impact
  nameWithType: DamageType.Impact
  fullName: DamageType.Impact
  type: Field
  source:
    remote:
      path: Assets/DamagePopUpManager.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Impact
    path: ../Assets/DamagePopUpManager.cs
    startLine: 3
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: Impact = 1
    return:
      type: Global.DamageType
- uid: Global.DamageType.Poison
  commentId: F:Global.DamageType.Poison
  id: Poison
  parent: Global.DamageType
  langs:
  - csharp
  - vb
  name: Poison
  nameWithType: DamageType.Poison
  fullName: DamageType.Poison
  type: Field
  source:
    remote:
      path: Assets/DamagePopUpManager.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Poison
    path: ../Assets/DamagePopUpManager.cs
    startLine: 4
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: Poison = 2
    return:
      type: Global.DamageType
- uid: Global.DamageType.Critical
  commentId: F:Global.DamageType.Critical
  id: Critical
  parent: Global.DamageType
  langs:
  - csharp
  - vb
  name: Critical
  nameWithType: DamageType.Critical
  fullName: DamageType.Critical
  type: Field
  source:
    remote:
      path: Assets/DamagePopUpManager.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Critical
    path: ../Assets/DamagePopUpManager.cs
    startLine: 5
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: Critical = 3
    return:
      type: Global.DamageType
references:
- uid: Global
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.DamageType
  commentId: T:Global.DamageType
  name: DamageType
  nameWithType: DamageType
  fullName: DamageType
