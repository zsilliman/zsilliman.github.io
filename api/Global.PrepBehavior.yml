### YamlMime:ManagedReference
items:
- uid: Global.PrepBehavior
  commentId: T:Global.PrepBehavior
  id: PrepBehavior
  parent: Global
  children:
  - Global.PrepBehavior.KeepDistance
  - Global.PrepBehavior.Nudge
  - Global.PrepBehavior.OnResetObject(ModularEnemy)
  - Global.PrepBehavior.OnRestart
  - Global.PrepBehavior.PrepHop
  - Global.PrepBehavior.PrepType
  - Global.PrepBehavior.RegisterBehaviors(ModularEnemy)
  - Global.PrepBehavior.ReturnToStart
  - Global.PrepBehavior.SetInitialBehavior(ModularEnemy)
  - Global.PrepBehavior.SpawnShield
  - Global.PrepBehavior.Start(ModularEnemy)
  - Global.PrepBehavior.Teleport
  langs:
  - csharp
  - vb
  name: PrepBehavior
  nameWithType: PrepBehavior
  fullName: PrepBehavior
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: PrepBehavior
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
    startLine: 10
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Serializable]

      public class PrepBehavior : ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>
    content.vb: >-
      <Serializable>

      Public Class PrepBehavior Inherits ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType)
  inheritance:
  - System.Object
  - Global.ModularEnemy.EnemyBehaviorInterface
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  inheritedMembers:
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.CurrentBehavior
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisteredBehaviors
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisteredAlwaysRun
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehavior(PrepBehaviorType,ModularEnemy.EnemyBehaviorInterface)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.Update
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.DrawGizmos(ModularEnemy)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.HasStarted(PrepBehaviorType)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnKill(ModularEnemy,System.Boolean)
  - Global.ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  - Global.ModularEnemy.EnemyBehaviorInterface.self
  - Global.ModularEnemy.EnemyBehaviorInterface.Started
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
- uid: Global.PrepBehavior.SpawnShield
  commentId: F:Global.PrepBehavior.SpawnShield
  id: SpawnShield
  parent: Global.PrepBehavior
  langs:
  - csharp
  - vb
  name: SpawnShield
  nameWithType: PrepBehavior.SpawnShield
  fullName: PrepBehavior.SpawnShield
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SpawnShield
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
    startLine: 13
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool SpawnShield
    return:
      type: System.Boolean
    content.vb: Public SpawnShield As Boolean
- uid: Global.PrepBehavior.PrepType
  commentId: F:Global.PrepBehavior.PrepType
  id: PrepType
  parent: Global.PrepBehavior
  langs:
  - csharp
  - vb
  name: PrepType
  nameWithType: PrepBehavior.PrepType
  fullName: PrepBehavior.PrepType
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: PrepType
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
    startLine: 14
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public PrepBehaviorType PrepType
    return:
      type: Global.PrepBehaviorType
    content.vb: Public PrepType As PrepBehaviorType
- uid: Global.PrepBehavior.KeepDistance
  commentId: F:Global.PrepBehavior.KeepDistance
  id: KeepDistance
  parent: Global.PrepBehavior
  langs:
  - csharp
  - vb
  name: KeepDistance
  nameWithType: PrepBehavior.KeepDistance
  fullName: PrepBehavior.KeepDistance
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: KeepDistance
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
    startLine: 18
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [SerializeField]

      [ConditionalShow("PrepType", 1)]

      public KeepDistanceBehavior KeepDistance
    return:
      type: Global.KeepDistanceBehavior
    content.vb: >-
      <SerializeField>

      <ConditionalShow("PrepType", 1)>

      Public KeepDistance As KeepDistanceBehavior
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: PrepType
    - type: System.Int32
      value: 1
- uid: Global.PrepBehavior.Teleport
  commentId: F:Global.PrepBehavior.Teleport
  id: Teleport
  parent: Global.PrepBehavior
  langs:
  - csharp
  - vb
  name: Teleport
  nameWithType: PrepBehavior.Teleport
  fullName: PrepBehavior.Teleport
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Teleport
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
    startLine: 21
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [SerializeField]

      [ConditionalShow("PrepType", 2)]

      public TeleportBehavior Teleport
    return:
      type: Global.TeleportBehavior
    content.vb: >-
      <SerializeField>

      <ConditionalShow("PrepType", 2)>

      Public Teleport As TeleportBehavior
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: PrepType
    - type: System.Int32
      value: 2
- uid: Global.PrepBehavior.PrepHop
  commentId: F:Global.PrepBehavior.PrepHop
  id: PrepHop
  parent: Global.PrepBehavior
  langs:
  - csharp
  - vb
  name: PrepHop
  nameWithType: PrepBehavior.PrepHop
  fullName: PrepBehavior.PrepHop
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: PrepHop
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
    startLine: 24
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [SerializeField]

      [ConditionalShow("PrepType", 3)]

      public PrepHopBehavior PrepHop
    return:
      type: Global.PrepHopBehavior
    content.vb: >-
      <SerializeField>

      <ConditionalShow("PrepType", 3)>

      Public PrepHop As PrepHopBehavior
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: PrepType
    - type: System.Int32
      value: 3
- uid: Global.PrepBehavior.ReturnToStart
  commentId: F:Global.PrepBehavior.ReturnToStart
  id: ReturnToStart
  parent: Global.PrepBehavior
  langs:
  - csharp
  - vb
  name: ReturnToStart
  nameWithType: PrepBehavior.ReturnToStart
  fullName: PrepBehavior.ReturnToStart
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ReturnToStart
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
    startLine: 27
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [SerializeField]

      [ConditionalShow("PrepType", 4)]

      public ReturnToStartBehavior ReturnToStart
    return:
      type: Global.ReturnToStartBehavior
    content.vb: >-
      <SerializeField>

      <ConditionalShow("PrepType", 4)>

      Public ReturnToStart As ReturnToStartBehavior
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: PrepType
    - type: System.Int32
      value: 4
- uid: Global.PrepBehavior.Nudge
  commentId: F:Global.PrepBehavior.Nudge
  id: Nudge
  parent: Global.PrepBehavior
  langs:
  - csharp
  - vb
  name: Nudge
  nameWithType: PrepBehavior.Nudge
  fullName: PrepBehavior.Nudge
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Nudge
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
    startLine: 30
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [SerializeField]

      [ConditionalShow("PrepType", 5)]

      public NudgeBehavior Nudge
    return:
      type: Global.NudgeBehavior
    content.vb: >-
      <SerializeField>

      <ConditionalShow("PrepType", 5)>

      Public Nudge As NudgeBehavior
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: PrepType
    - type: System.Int32
      value: 5
- uid: Global.PrepBehavior.RegisterBehaviors(ModularEnemy)
  commentId: M:Global.PrepBehavior.RegisterBehaviors(ModularEnemy)
  id: RegisterBehaviors(ModularEnemy)
  parent: Global.PrepBehavior
  langs:
  - csharp
  - vb
  name: RegisterBehaviors(ModularEnemy)
  nameWithType: PrepBehavior.RegisterBehaviors(ModularEnemy)
  fullName: PrepBehavior.RegisterBehaviors(ModularEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RegisterBehaviors
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
    startLine: 34
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void RegisterBehaviors(ModularEnemy enemy)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    content.vb: Public Overrides Sub RegisterBehaviors(enemy As ModularEnemy)
  overridden: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehaviors(ModularEnemy)
  overload: Global.PrepBehavior.RegisterBehaviors*
- uid: Global.PrepBehavior.SetInitialBehavior(ModularEnemy)
  commentId: M:Global.PrepBehavior.SetInitialBehavior(ModularEnemy)
  id: SetInitialBehavior(ModularEnemy)
  parent: Global.PrepBehavior
  langs:
  - csharp
  - vb
  name: SetInitialBehavior(ModularEnemy)
  nameWithType: PrepBehavior.SetInitialBehavior(ModularEnemy)
  fullName: PrepBehavior.SetInitialBehavior(ModularEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SetInitialBehavior
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
    startLine: 44
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void SetInitialBehavior(ModularEnemy enemy)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    content.vb: Public Overrides Sub SetInitialBehavior(enemy As ModularEnemy)
  overridden: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.SetInitialBehavior(ModularEnemy)
  overload: Global.PrepBehavior.SetInitialBehavior*
- uid: Global.PrepBehavior.Start(ModularEnemy)
  commentId: M:Global.PrepBehavior.Start(ModularEnemy)
  id: Start(ModularEnemy)
  parent: Global.PrepBehavior
  langs:
  - csharp
  - vb
  name: Start(ModularEnemy)
  nameWithType: PrepBehavior.Start(ModularEnemy)
  fullName: PrepBehavior.Start(ModularEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Start
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
    startLine: 49
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void Start(ModularEnemy enemy)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    content.vb: Public Overrides Sub Start(enemy As ModularEnemy)
  overridden: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.Start(ModularEnemy)
  overload: Global.PrepBehavior.Start*
- uid: Global.PrepBehavior.OnRestart
  commentId: M:Global.PrepBehavior.OnRestart
  id: OnRestart
  parent: Global.PrepBehavior
  langs:
  - csharp
  - vb
  name: OnRestart()
  nameWithType: PrepBehavior.OnRestart()
  fullName: PrepBehavior.OnRestart()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnRestart
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
    startLine: 56
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void OnRestart()
    content.vb: Public Overrides Sub OnRestart()
  overridden: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnRestart
  overload: Global.PrepBehavior.OnRestart*
- uid: Global.PrepBehavior.OnResetObject(ModularEnemy)
  commentId: M:Global.PrepBehavior.OnResetObject(ModularEnemy)
  id: OnResetObject(ModularEnemy)
  parent: Global.PrepBehavior
  langs:
  - csharp
  - vb
  name: OnResetObject(ModularEnemy)
  nameWithType: PrepBehavior.OnResetObject(ModularEnemy)
  fullName: PrepBehavior.OnResetObject(ModularEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnResetObject
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Prep/PrepBehavior.cs
    startLine: 63
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void OnResetObject(ModularEnemy enemy)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    content.vb: Public Overrides Sub OnResetObject(enemy As ModularEnemy)
  overridden: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnResetObject(ModularEnemy)
  overload: Global.PrepBehavior.OnResetObject*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.ModularEnemy.EnemyBehaviorInterface
  commentId: T:Global.ModularEnemy.EnemyBehaviorInterface
  name: ModularEnemy.EnemyBehaviorInterface
  nameWithType: ModularEnemy.EnemyBehaviorInterface
  fullName: ModularEnemy.EnemyBehaviorInterface
  spec.csharp:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  spec.vb:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  commentId: T:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  name: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType)
  name.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType)
  spec.csharp:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
    name: EnemyBehaviorInterfaceManager
  - name: <
  - uid: Global.PrepBehaviorType
    name: PrepBehaviorType
  - name: '>'
  spec.vb:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
    name: EnemyBehaviorInterfaceManager
  - name: (
  - name: Of
  - name: " "
  - uid: Global.PrepBehaviorType
    name: PrepBehaviorType
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.CurrentBehavior
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.CurrentBehavior
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.CurrentBehavior
  name: CurrentBehavior
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.CurrentBehavior
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.CurrentBehavior
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).CurrentBehavior
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).CurrentBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisteredBehaviors
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisteredBehaviors
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredBehaviors
  name: RegisteredBehaviors
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.RegisteredBehaviors
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.RegisteredBehaviors
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).RegisteredBehaviors
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).RegisteredBehaviors
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisteredAlwaysRun
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisteredAlwaysRun
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredAlwaysRun
  name: RegisteredAlwaysRun
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.RegisteredAlwaysRun
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.RegisteredAlwaysRun
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).RegisteredAlwaysRun
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).RegisteredAlwaysRun
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehavior(PrepBehaviorType,ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehavior(PrepBehaviorType,ModularEnemy.EnemyBehaviorInterface)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
  name: RegisterBehavior(PrepBehaviorType, EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.RegisterBehavior(PrepBehaviorType, ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.RegisterBehavior(PrepBehaviorType, ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).RegisterBehavior(PrepBehaviorType, ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).RegisterBehavior(PrepBehaviorType, ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehavior(PrepBehaviorType,ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehavior
  - name: (
  - uid: Global.PrepBehaviorType
    name: PrepBehaviorType
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehavior(PrepBehaviorType,ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehavior
  - name: (
  - uid: Global.PrepBehaviorType
    name: PrepBehaviorType
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  name: RegisterBehaviorAlwaysRun(EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehaviorAlwaysRun
  - name: (
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehaviorAlwaysRun
  - name: (
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.Update
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.Update
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
  name: Update()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.Update()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.Update()
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).Update()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).Update()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.Update
    name: Update
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.Update
    name: Update
  - name: (
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.DrawGizmos(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.DrawGizmos(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
  name: DrawGizmos(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.DrawGizmos(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.DrawGizmos(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).DrawGizmos(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).DrawGizmos(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.HasStarted(PrepBehaviorType)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.HasStarted(PrepBehaviorType)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
  name: HasStarted(PrepBehaviorType)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.HasStarted(PrepBehaviorType)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.HasStarted(PrepBehaviorType)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).HasStarted(PrepBehaviorType)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).HasStarted(PrepBehaviorType)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.HasStarted(PrepBehaviorType)
    name: HasStarted
  - name: (
  - uid: Global.PrepBehaviorType
    name: PrepBehaviorType
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.HasStarted(PrepBehaviorType)
    name: HasStarted
  - name: (
  - uid: Global.PrepBehaviorType
    name: PrepBehaviorType
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnKill(ModularEnemy,System.Boolean)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnKill(ModularEnemy,System.Boolean)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
  name: OnKill(ModularEnemy, bool)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.OnKill(ModularEnemy, bool)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.OnKill(ModularEnemy, bool)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).OnKill(ModularEnemy, Boolean)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).OnKill(ModularEnemy, Boolean)
  name.vb: OnKill(ModularEnemy, Boolean)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: ShowGizmos
  nameWithType: ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  fullName: ModularEnemy.EnemyBehaviorInterface.ShowGizmos
- uid: Global.ModularEnemy.EnemyBehaviorInterface.self
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterface.self
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: self
  nameWithType: ModularEnemy.EnemyBehaviorInterface.self
  fullName: ModularEnemy.EnemyBehaviorInterface.self
- uid: Global.ModularEnemy.EnemyBehaviorInterface.Started
  commentId: P:Global.ModularEnemy.EnemyBehaviorInterface.Started
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: Started
  nameWithType: ModularEnemy.EnemyBehaviorInterface.Started
  fullName: ModularEnemy.EnemyBehaviorInterface.Started
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  commentId: T:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  name: ModularEnemy.EnemyBehaviorInterfaceManager<T>
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T)
  name.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T)
  spec.csharp:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
    name: EnemyBehaviorInterfaceManager
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
    name: EnemyBehaviorInterfaceManager
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.CurrentBehavior
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.CurrentBehavior
  name: CurrentBehavior
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.CurrentBehavior
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.CurrentBehavior
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).CurrentBehavior
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).CurrentBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredBehaviors
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredBehaviors
  name: RegisteredBehaviors
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredBehaviors
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredBehaviors
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredBehaviors
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredBehaviors
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredAlwaysRun
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredAlwaysRun
  name: RegisteredAlwaysRun
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredAlwaysRun
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredAlwaysRun
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredAlwaysRun
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredAlwaysRun
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
  name: RegisterBehavior(T, EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehavior
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehavior
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  name: RegisterBehaviorAlwaysRun(EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehaviorAlwaysRun
  - name: (
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehaviorAlwaysRun
  - name: (
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
  name: Update()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Update()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Update()
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Update()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Update()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
    name: Update
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
    name: Update
  - name: (
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
  name: DrawGizmos(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.DrawGizmos(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.DrawGizmos(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).DrawGizmos(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).DrawGizmos(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
  name: HasStarted(T)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.HasStarted(T)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.HasStarted(T)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).HasStarted(T)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).HasStarted(T)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
    name: HasStarted
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
    name: HasStarted
  - name: (
  - name: T
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
  isExternal: true
  name: OnKill(ModularEnemy, bool)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnKill(ModularEnemy, bool)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnKill(ModularEnemy, bool)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnKill(ModularEnemy, Boolean)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnKill(ModularEnemy, Boolean)
  name.vb: OnKill(ModularEnemy, Boolean)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.PrepBehaviorType
  commentId: T:Global.PrepBehaviorType
  name: PrepBehaviorType
  nameWithType: PrepBehaviorType
  fullName: PrepBehaviorType
- uid: Global.KeepDistanceBehavior
  commentId: T:Global.KeepDistanceBehavior
  name: KeepDistanceBehavior
  nameWithType: KeepDistanceBehavior
  fullName: KeepDistanceBehavior
- uid: Global.TeleportBehavior
  commentId: T:Global.TeleportBehavior
  name: TeleportBehavior
  nameWithType: TeleportBehavior
  fullName: TeleportBehavior
- uid: Global.PrepHopBehavior
  commentId: T:Global.PrepHopBehavior
  name: PrepHopBehavior
  nameWithType: PrepHopBehavior
  fullName: PrepHopBehavior
- uid: Global.ReturnToStartBehavior
  commentId: T:Global.ReturnToStartBehavior
  name: ReturnToStartBehavior
  nameWithType: ReturnToStartBehavior
  fullName: ReturnToStartBehavior
- uid: Global.NudgeBehavior
  commentId: T:Global.NudgeBehavior
  name: NudgeBehavior
  nameWithType: NudgeBehavior
  fullName: NudgeBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehaviors(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehaviors(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
  name: RegisterBehaviors(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.RegisterBehaviors(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.RegisterBehaviors(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).RegisterBehaviors(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).RegisterBehaviors(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehaviors(ModularEnemy)
    name: RegisterBehaviors
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.RegisterBehaviors(ModularEnemy)
    name: RegisterBehaviors
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.PrepBehavior.RegisterBehaviors*
  commentId: Overload:Global.PrepBehavior.RegisterBehaviors
  name: RegisterBehaviors
  nameWithType: PrepBehavior.RegisterBehaviors
  fullName: PrepBehavior.RegisterBehaviors
- uid: Global.ModularEnemy
  commentId: T:Global.ModularEnemy
  name: ModularEnemy
  nameWithType: ModularEnemy
  fullName: ModularEnemy
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
  name: RegisterBehaviors(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviors(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviors(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviors(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviors(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
    name: RegisterBehaviors
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
    name: RegisterBehaviors
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.SetInitialBehavior(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.SetInitialBehavior(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
  name: SetInitialBehavior(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.SetInitialBehavior(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.SetInitialBehavior(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).SetInitialBehavior(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).SetInitialBehavior(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.SetInitialBehavior(ModularEnemy)
    name: SetInitialBehavior
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.SetInitialBehavior(ModularEnemy)
    name: SetInitialBehavior
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.PrepBehavior.SetInitialBehavior*
  commentId: Overload:Global.PrepBehavior.SetInitialBehavior
  name: SetInitialBehavior
  nameWithType: PrepBehavior.SetInitialBehavior
  fullName: PrepBehavior.SetInitialBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
  name: SetInitialBehavior(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.SetInitialBehavior(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.SetInitialBehavior(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).SetInitialBehavior(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).SetInitialBehavior(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
    name: SetInitialBehavior
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
    name: SetInitialBehavior
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.Start(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.Start(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
  name: Start(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.Start(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.Start(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).Start(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).Start(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.PrepBehavior.Start*
  commentId: Overload:Global.PrepBehavior.Start
  name: Start
  nameWithType: PrepBehavior.Start
  fullName: PrepBehavior.Start
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
  name: Start(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Start(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Start(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Start(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Start(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnRestart
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnRestart
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
  name: OnRestart()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.OnRestart()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.OnRestart()
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).OnRestart()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).OnRestart()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnRestart
    name: OnRestart
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnRestart
    name: OnRestart
  - name: (
  - name: )
- uid: Global.PrepBehavior.OnRestart*
  commentId: Overload:Global.PrepBehavior.OnRestart
  name: OnRestart
  nameWithType: PrepBehavior.OnRestart
  fullName: PrepBehavior.OnRestart
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
  name: OnRestart()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnRestart()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnRestart()
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnRestart()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnRestart()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
    name: OnRestart
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
    name: OnRestart
  - name: (
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnResetObject(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnResetObject(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
  name: OnResetObject(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.OnResetObject(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<PrepBehaviorType>.OnResetObject(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).OnResetObject(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of PrepBehaviorType).OnResetObject(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{PrepBehaviorType}.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.PrepBehavior.OnResetObject*
  commentId: Overload:Global.PrepBehavior.OnResetObject
  name: OnResetObject
  nameWithType: PrepBehavior.OnResetObject
  fullName: PrepBehavior.OnResetObject
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
  name: OnResetObject(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnResetObject(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnResetObject(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnResetObject(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnResetObject(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
