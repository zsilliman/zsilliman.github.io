### YamlMime:ManagedReference
items:
- uid: Global.IntActor
  commentId: T:Global.IntActor
  id: IntActor
  parent: Global
  children:
  - Global.IntActor.aabb
  - Global.IntActor.activeWater
  - Global.IntActor.ApplyWind(UnityEngine.Vector2)
  - Global.IntActor.Awake
  - Global.IntActor.Bottom
  - Global.IntActor.CheckActorInteractableCollisions
  - Global.IntActor.CheckActorTriggerCollisions(IntObject.ActorAction,IntObject.TriggerAction)
  - Global.IntActor.CheckGrounded
  - Global.IntActor.CheckOnWall
  - Global.IntActor.ComplexMove(UnityEngine.Vector2,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction,System.Int32)
  - Global.IntActor.DropDownOneWay
  - Global.IntActor.EfficientMove(UnityEngine.Vector2,IntObject.SolidAction,IntObject.SolidAction)
  - Global.IntActor.EnsureAABBIntColliderSet
  - Global.IntActor.GetAABBIntCollider
  - Global.IntActor.GetCollisionMapValue(IntObject)
  - Global.IntActor.GetEffectiveVelocity(UnityEngine.Vector2)
  - Global.IntActor.getIntersectParameters(System.Int32,System.Single,System.Single,System.Single)
  - Global.IntActor.GetSubmergedPercentage
  - Global.IntActor.GetSubmergedPercentage(UnityEngine.Vector2Int)
  - Global.IntActor.GetVelocity
  - Global.IntActor.GroundActor
  - Global.IntActor.HurtBySpike
  - Global.IntActor.IsInWater
  - Global.IntActor.IsRiding(IntSolid)
  - Global.IntActor.IsRidingFlatSurface
  - Global.IntActor.IsTouchingWall(IntSolid)
  - Global.IntActor.IsWalkingFlatOrUphill(UnityEngine.Vector2)
  - Global.IntActor.Left
  - Global.IntActor.ManualInit
  - Global.IntActor.MoveX(System.Single,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  - Global.IntActor.MoveY(System.Single,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  - Global.IntActor.NotifyObjectKilled(IntObject)
  - Global.IntActor.OnActor(IntActor)
  - Global.IntActor.OnEnterWater(WaterComponent,System.Single)
  - Global.IntActor.OnExitWater(WaterComponent)
  - Global.IntActor.OnSpike(IntSolid)
  - Global.IntActor.OnTakeDamage(System.Int32)
  - Global.IntActor.OnTakeDamageCallback
  - Global.IntActor.OnTriggerEnd(IntTrigger)
  - Global.IntActor.OnTriggerStart(IntTrigger)
  - Global.IntActor.RegisterOnTakeDamageCallback(IntObject.Action)
  - Global.IntActor.RemoveWind
  - Global.IntActor.ResetActorCollisionMap
  - Global.IntActor.ResetAuraCollisionMap
  - Global.IntActor.ResetCollisionMap
  - Global.IntActor.ResetCollisionsAfterTime(IntObject,System.Single)
  - Global.IntActor.ResolvePosition(UnityEngine.Vector2,System.Single,System.Int32,System.Boolean,System.Boolean,IntObject.ActorAction,IntObject.TriggerAction)
  - Global.IntActor.ResolvePositionNoSlide(UnityEngine.Vector2Int)
  - Global.IntActor.RidingNormal
  - Global.IntActor.RidingSolid
  - Global.IntActor.RidingTangent
  - Global.IntActor.Right
  - Global.IntActor.SetCollisionMapValue(IntObject,System.Boolean)
  - Global.IntActor.SimpleMove(UnityEngine.Vector2,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  - Global.IntActor.Size
  - Global.IntActor.SlantMove(UnityEngine.Vector2,IntObject.ActorAction,IntObject.TriggerAction)
  - Global.IntActor.SolidContainsPoint(UnityEngine.Vector2Int)
  - Global.IntActor.Squish(IntSolid)
  - Global.IntActor.TakeDamage(System.Int32,System.Boolean,System.Boolean,DamageType)
  - Global.IntActor.Top
  - Global.IntActor.UnregisterOnTakeDamageCallback(IntObject.Action)
  - Global.IntActor.WindInfluence
  langs:
  - csharp
  - vb
  name: IntActor
  nameWithType: IntActor
  fullName: IntActor
  type: Class
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: IntActor
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 4
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [RequireComponent(typeof(AABBIntCollider))]

      public class IntActor : IntObject, ISavableObject<IntObjectSaveData>
    content.vb: >-
      <RequireComponent(GetType(AABBIntCollider))>

      Public Class IntActor Inherits IntObject Implements ISavableObject(Of IntObjectSaveData)
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.Component
  - UnityEngine.Behaviour
  - UnityEngine.MonoBehaviour
  - Global.IntObject
  derivedClasses:
  - Global.BeeEgg
  - Global.IntBasePlatformer
  - Global.IntBoss
  - Global.IntCompositeActor
  - Global.IntEnemy
  - Global.IntFlyingEntity
  - Global.Spore
  implements:
  - Global.ISavableObject{IntObjectSaveData}
  inheritedMembers:
  - Global.IntObject.section
  - Global.IntObject.state
  - Global.IntObject.int_collider
  - Global.IntObject.remainder
  - Global.IntObject.StartPosition
  - Global.IntObject.AttachedToPlayer
  - Global.IntObject.IgnoredObjectsMap
  - Global.IntObject.KilledCallback
  - Global.IntObject.Position
  - Global.IntObject.GetStartWorldPosition
  - Global.IntObject.collider_type
  - Global.IntObject.MarkedForKill
  - Global.IntObject.ObjectID
  - Global.IntObject.DestroyOnKill
  - Global.IntObject.RespawnBehavior
  - Global.IntObject.Status
  - Global.IntObject.InitialStatus
  - Global.IntObject.SaveObject
  - Global.IntObject.IsInSetPiece
  - Global.IntObject.Start
  - Global.IntObject.Init
  - Global.IntObject.FindIntColliderState(System.Int32)
  - Global.IntObject.GetLocalGameStates
  - Global.IntObject.RegisterSelf
  - Global.IntObject.UnregisterSelf
  - Global.IntObject.RegisterKilledCallback(IntObject.Action)
  - Global.IntObject.UnregisterKilledCallback(IntObject.Action)
  - Global.IntObject.IsContainedInRect(UnityEngine.Rect)
  - Global.IntObject.Update
  - Global.IntObject.SetStatus(ObjectStatus)
  - Global.IntObject.OnKill(System.Boolean)
  - Global.IntObject.Kill
  - Global.IntObject.Kill(System.Boolean)
  - Global.IntObject.Kill(System.Single)
  - Global.IntObject.Kill(System.Boolean,System.Single)
  - Global.IntObject.IgnoreObjectCollisions(IntObject,System.Single)
  - Global.IntObject.SleepObject
  - Global.IntObject.OptimizeSleepObject
  - Global.IntObject.WakeObject
  - Global.IntObject.EnableObject
  - Global.IntObject.DisableObject
  - Global.IntObject.RespawnObject
  - Global.IntObject.ResetObject
  - Global.IntObject.RecursiveSetCollidable(System.Boolean)
  - Global.IntObject.SetColliderState(IntColliderState)
  - Global.IntObject.Translate(UnityEngine.Vector2Int)
  - Global.IntObject.Translate(UnityEngine.Vector2)
  - Global.IntObject.SetPosition(UnityEngine.Vector2Int)
  - Global.IntObject.SetCollidable(System.Boolean)
  - Global.IntObject.GetCollidable
  - Global.IntObject.GetCollider
  - Global.IntObject.GetColliderState
  - Global.IntObject.Overlaps(IntObject)
  - Global.IntObject.Overlaps(IntObject,UnityEngine.Vector2Int)
  - Global.IntObject.RayCast(IntRay)
  - Global.IntObject.CollideAt(System.Collections.Generic.List{IntSolid},UnityEngine.Vector2Int)
  - Global.IntObject.CollideAt(System.Collections.Generic.List{IntActor},UnityEngine.Vector2Int)
  - Global.IntObject.CollideAt(System.Collections.Generic.List{IntTrigger},UnityEngine.Vector2Int)
  - Global.IntObject.OnDrawGizmos
  - Global.IntObject.LoadObjectSaveData(IntObjectSaveData)
  - Global.IntObject.GetObjectSaveData
  - Global.IntObject.OnPostLoadSaveFile
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  attributes:
  - type: UnityEngine.RequireComponent
    ctor: UnityEngine.RequireComponent.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: Global.AABBIntCollider
- uid: Global.IntActor.HurtBySpike
  commentId: F:Global.IntActor.HurtBySpike
  id: HurtBySpike
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: HurtBySpike
  nameWithType: IntActor.HurtBySpike
  fullName: IntActor.HurtBySpike
  type: Field
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: HurtBySpike
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 7
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool HurtBySpike
    return:
      type: System.Boolean
    content.vb: Public HurtBySpike As Boolean
- uid: Global.IntActor.aabb
  commentId: F:Global.IntActor.aabb
  id: aabb
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: aabb
  nameWithType: IntActor.aabb
  fullName: IntActor.aabb
  type: Field
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: aabb
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 9
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected AABBIntCollider aabb
    return:
      type: Global.AABBIntCollider
    content.vb: Protected aabb As AABBIntCollider
- uid: Global.IntActor.Left
  commentId: P:Global.IntActor.Left
  id: Left
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: Left
  nameWithType: IntActor.Left
  fullName: IntActor.Left
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Left
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 11
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public float Left { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Left As Single
  overload: Global.IntActor.Left*
- uid: Global.IntActor.Right
  commentId: P:Global.IntActor.Right
  id: Right
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: Right
  nameWithType: IntActor.Right
  fullName: IntActor.Right
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Right
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 12
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public float Right { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Right As Single
  overload: Global.IntActor.Right*
- uid: Global.IntActor.Top
  commentId: P:Global.IntActor.Top
  id: Top
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: Top
  nameWithType: IntActor.Top
  fullName: IntActor.Top
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Top
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 13
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public float Top { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Top As Single
  overload: Global.IntActor.Top*
- uid: Global.IntActor.Bottom
  commentId: P:Global.IntActor.Bottom
  id: Bottom
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: Bottom
  nameWithType: IntActor.Bottom
  fullName: IntActor.Bottom
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Bottom
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 14
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public float Bottom { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Bottom As Single
  overload: Global.IntActor.Bottom*
- uid: Global.IntActor.Size
  commentId: P:Global.IntActor.Size
  id: Size
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: IntActor.Size
  fullName: IntActor.Size
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Size
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 16
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public Vector2Int Size { get; }
    parameters: []
    return:
      type: UnityEngine.Vector2Int
    content.vb: Public ReadOnly Property Size As Vector2Int
  overload: Global.IntActor.Size*
- uid: Global.IntActor.WindInfluence
  commentId: F:Global.IntActor.WindInfluence
  id: WindInfluence
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: WindInfluence
  nameWithType: IntActor.WindInfluence
  fullName: IntActor.WindInfluence
  type: Field
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: WindInfluence
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 18
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected Vector2 WindInfluence
    return:
      type: UnityEngine.Vector2
    content.vb: Protected WindInfluence As Vector2
- uid: Global.IntActor.OnTakeDamageCallback
  commentId: F:Global.IntActor.OnTakeDamageCallback
  id: OnTakeDamageCallback
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: OnTakeDamageCallback
  nameWithType: IntActor.OnTakeDamageCallback
  fullName: IntActor.OnTakeDamageCallback
  type: Field
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnTakeDamageCallback
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 20
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected IntObject.Action OnTakeDamageCallback
    return:
      type: Global.IntObject.Action
    content.vb: Protected OnTakeDamageCallback As IntObject.Action
- uid: Global.IntActor.RidingSolid
  commentId: P:Global.IntActor.RidingSolid
  id: RidingSolid
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: RidingSolid
  nameWithType: IntActor.RidingSolid
  fullName: IntActor.RidingSolid
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RidingSolid
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 23
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public IntSolid RidingSolid { get; protected set; }
    parameters: []
    return:
      type: Global.IntSolid
    content.vb: Public Property RidingSolid As IntSolid
  overload: Global.IntActor.RidingSolid*
- uid: Global.IntActor.RidingTangent
  commentId: P:Global.IntActor.RidingTangent
  id: RidingTangent
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: RidingTangent
  nameWithType: IntActor.RidingTangent
  fullName: IntActor.RidingTangent
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RidingTangent
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 24
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public Vector2 RidingTangent { get; protected set; }
    parameters: []
    return:
      type: UnityEngine.Vector2
    content.vb: Public Property RidingTangent As Vector2
  overload: Global.IntActor.RidingTangent*
- uid: Global.IntActor.RidingNormal
  commentId: P:Global.IntActor.RidingNormal
  id: RidingNormal
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: RidingNormal
  nameWithType: IntActor.RidingNormal
  fullName: IntActor.RidingNormal
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RidingNormal
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 25
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public Vector2 RidingNormal { get; protected set; }
    parameters: []
    return:
      type: UnityEngine.Vector2
    content.vb: Public Property RidingNormal As Vector2
  overload: Global.IntActor.RidingNormal*
- uid: Global.IntActor.IsRidingFlatSurface
  commentId: P:Global.IntActor.IsRidingFlatSurface
  id: IsRidingFlatSurface
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: IsRidingFlatSurface
  nameWithType: IntActor.IsRidingFlatSurface
  fullName: IntActor.IsRidingFlatSurface
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: IsRidingFlatSurface
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 26
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool IsRidingFlatSurface { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsRidingFlatSurface As Boolean
  overload: Global.IntActor.IsRidingFlatSurface*
- uid: Global.IntActor.Awake
  commentId: M:Global.IntActor.Awake
  id: Awake
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: Awake()
  nameWithType: IntActor.Awake()
  fullName: IntActor.Awake()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Awake
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 28
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected void Awake()
    content.vb: Protected Sub Awake()
  overload: Global.IntActor.Awake*
- uid: Global.IntActor.ManualInit
  commentId: M:Global.IntActor.ManualInit
  id: ManualInit
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: ManualInit()
  nameWithType: IntActor.ManualInit()
  fullName: IntActor.ManualInit()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ManualInit
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 37
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void ManualInit()
    content.vb: Public Sub ManualInit()
  overload: Global.IntActor.ManualInit*
- uid: Global.IntActor.GetAABBIntCollider
  commentId: M:Global.IntActor.GetAABBIntCollider
  id: GetAABBIntCollider
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: GetAABBIntCollider()
  nameWithType: IntActor.GetAABBIntCollider()
  fullName: IntActor.GetAABBIntCollider()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetAABBIntCollider
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 46
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public AABBIntCollider GetAABBIntCollider()
    return:
      type: Global.AABBIntCollider
    content.vb: Public Function GetAABBIntCollider() As AABBIntCollider
  overload: Global.IntActor.GetAABBIntCollider*
- uid: Global.IntActor.EnsureAABBIntColliderSet
  commentId: M:Global.IntActor.EnsureAABBIntColliderSet
  id: EnsureAABBIntColliderSet
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: EnsureAABBIntColliderSet()
  nameWithType: IntActor.EnsureAABBIntColliderSet()
  fullName: IntActor.EnsureAABBIntColliderSet()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: EnsureAABBIntColliderSet
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 55
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void EnsureAABBIntColliderSet()
    content.vb: Public Sub EnsureAABBIntColliderSet()
  overload: Global.IntActor.EnsureAABBIntColliderSet*
- uid: Global.IntActor.IsRiding(IntSolid)
  commentId: M:Global.IntActor.IsRiding(IntSolid)
  id: IsRiding(IntSolid)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: IsRiding(IntSolid)
  nameWithType: IntActor.IsRiding(IntSolid)
  fullName: IntActor.IsRiding(IntSolid)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: IsRiding
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 63
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public virtual bool IsRiding(IntSolid solid)
    parameters:
    - id: solid
      type: Global.IntSolid
    return:
      type: System.Boolean
    content.vb: Public Overridable Function IsRiding(solid As IntSolid) As Boolean
  overload: Global.IntActor.IsRiding*
- uid: Global.IntActor.IsWalkingFlatOrUphill(UnityEngine.Vector2)
  commentId: M:Global.IntActor.IsWalkingFlatOrUphill(UnityEngine.Vector2)
  id: IsWalkingFlatOrUphill(UnityEngine.Vector2)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: IsWalkingFlatOrUphill(Vector2)
  nameWithType: IntActor.IsWalkingFlatOrUphill(Vector2)
  fullName: IntActor.IsWalkingFlatOrUphill(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: IsWalkingFlatOrUphill
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 74
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected bool IsWalkingFlatOrUphill(Vector2 vel)
    parameters:
    - id: vel
      type: UnityEngine.Vector2
    return:
      type: System.Boolean
    content.vb: Protected Function IsWalkingFlatOrUphill(vel As Vector2) As Boolean
  overload: Global.IntActor.IsWalkingFlatOrUphill*
- uid: Global.IntActor.GetEffectiveVelocity(UnityEngine.Vector2)
  commentId: M:Global.IntActor.GetEffectiveVelocity(UnityEngine.Vector2)
  id: GetEffectiveVelocity(UnityEngine.Vector2)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: GetEffectiveVelocity(Vector2)
  nameWithType: IntActor.GetEffectiveVelocity(Vector2)
  fullName: IntActor.GetEffectiveVelocity(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetEffectiveVelocity
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 83
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected Vector2 GetEffectiveVelocity(Vector2 vel)
    parameters:
    - id: vel
      type: UnityEngine.Vector2
    return:
      type: UnityEngine.Vector2
    content.vb: Protected Function GetEffectiveVelocity(vel As Vector2) As Vector2
  overload: Global.IntActor.GetEffectiveVelocity*
- uid: Global.IntActor.IsTouchingWall(IntSolid)
  commentId: M:Global.IntActor.IsTouchingWall(IntSolid)
  id: IsTouchingWall(IntSolid)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: IsTouchingWall(IntSolid)
  nameWithType: IntActor.IsTouchingWall(IntSolid)
  fullName: IntActor.IsTouchingWall(IntSolid)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: IsTouchingWall
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 115
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nReturns whether an actor is next to a wall.If the wall is to the left it will return IntMath.Direction.Left\nand IntMath.Direction.Right if on the right.If not on a wall it will return IntMath.Direction.None.\n"
  example: []
  syntax:
    content: public virtual IntMath.Direction IsTouchingWall(IntSolid solid)
    parameters:
    - id: solid
      type: Global.IntSolid
    return:
      type: Global.IntMath.Direction
    content.vb: Public Overridable Function IsTouchingWall(solid As IntSolid) As IntMath.Direction
  overload: Global.IntActor.IsTouchingWall*
- uid: Global.IntActor.SolidContainsPoint(UnityEngine.Vector2Int)
  commentId: M:Global.IntActor.SolidContainsPoint(UnityEngine.Vector2Int)
  id: SolidContainsPoint(UnityEngine.Vector2Int)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: SolidContainsPoint(Vector2Int)
  nameWithType: IntActor.SolidContainsPoint(Vector2Int)
  fullName: IntActor.SolidContainsPoint(UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SolidContainsPoint
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 145
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool SolidContainsPoint(Vector2Int worldPos)
    parameters:
    - id: worldPos
      type: UnityEngine.Vector2Int
    return:
      type: System.Boolean
    content.vb: Public Function SolidContainsPoint(worldPos As Vector2Int) As Boolean
  overload: Global.IntActor.SolidContainsPoint*
- uid: Global.IntActor.RegisterOnTakeDamageCallback(IntObject.Action)
  commentId: M:Global.IntActor.RegisterOnTakeDamageCallback(IntObject.Action)
  id: RegisterOnTakeDamageCallback(IntObject.Action)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: RegisterOnTakeDamageCallback(Action)
  nameWithType: IntActor.RegisterOnTakeDamageCallback(IntObject.Action)
  fullName: IntActor.RegisterOnTakeDamageCallback(IntObject.Action)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RegisterOnTakeDamageCallback
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 156
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void RegisterOnTakeDamageCallback(IntObject.Action action)
    parameters:
    - id: action
      type: Global.IntObject.Action
    content.vb: Public Sub RegisterOnTakeDamageCallback(action As IntObject.Action)
  overload: Global.IntActor.RegisterOnTakeDamageCallback*
- uid: Global.IntActor.UnregisterOnTakeDamageCallback(IntObject.Action)
  commentId: M:Global.IntActor.UnregisterOnTakeDamageCallback(IntObject.Action)
  id: UnregisterOnTakeDamageCallback(IntObject.Action)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: UnregisterOnTakeDamageCallback(Action)
  nameWithType: IntActor.UnregisterOnTakeDamageCallback(IntObject.Action)
  fullName: IntActor.UnregisterOnTakeDamageCallback(IntObject.Action)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: UnregisterOnTakeDamageCallback
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 161
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void UnregisterOnTakeDamageCallback(IntObject.Action action)
    parameters:
    - id: action
      type: Global.IntObject.Action
    content.vb: Public Sub UnregisterOnTakeDamageCallback(action As IntObject.Action)
  overload: Global.IntActor.UnregisterOnTakeDamageCallback*
- uid: Global.IntActor.OnTakeDamage(System.Int32)
  commentId: M:Global.IntActor.OnTakeDamage(System.Int32)
  id: OnTakeDamage(System.Int32)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: OnTakeDamage(int)
  nameWithType: IntActor.OnTakeDamage(int)
  fullName: IntActor.OnTakeDamage(int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnTakeDamage
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 166
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected virtual void OnTakeDamage(int amount)
    parameters:
    - id: amount
      type: System.Int32
    content.vb: Protected Overridable Sub OnTakeDamage(amount As Integer)
  overload: Global.IntActor.OnTakeDamage*
  nameWithType.vb: IntActor.OnTakeDamage(Integer)
  fullName.vb: IntActor.OnTakeDamage(Integer)
  name.vb: OnTakeDamage(Integer)
- uid: Global.IntActor.TakeDamage(System.Int32,System.Boolean,System.Boolean,DamageType)
  commentId: M:Global.IntActor.TakeDamage(System.Int32,System.Boolean,System.Boolean,DamageType)
  id: TakeDamage(System.Int32,System.Boolean,System.Boolean,DamageType)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: TakeDamage(int, bool, bool, DamageType)
  nameWithType: IntActor.TakeDamage(int, bool, bool, DamageType)
  fullName: IntActor.TakeDamage(int, bool, bool, DamageType)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: TakeDamage
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 170
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public virtual void TakeDamage(int amount, bool force = false, bool Respawn = false, DamageType damageType = DamageType.Impact)
    parameters:
    - id: amount
      type: System.Int32
    - id: force
      type: System.Boolean
    - id: Respawn
      type: System.Boolean
    - id: damageType
      type: Global.DamageType
    content.vb: Public Overridable Sub TakeDamage(amount As Integer, force As Boolean = False, Respawn As Boolean = False, damageType As DamageType = DamageType.Impact)
  overload: Global.IntActor.TakeDamage*
  nameWithType.vb: IntActor.TakeDamage(Integer, Boolean, Boolean, DamageType)
  fullName.vb: IntActor.TakeDamage(Integer, Boolean, Boolean, DamageType)
  name.vb: TakeDamage(Integer, Boolean, Boolean, DamageType)
- uid: Global.IntActor.ResetAuraCollisionMap
  commentId: M:Global.IntActor.ResetAuraCollisionMap
  id: ResetAuraCollisionMap
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: ResetAuraCollisionMap()
  nameWithType: IntActor.ResetAuraCollisionMap()
  fullName: IntActor.ResetAuraCollisionMap()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ResetAuraCollisionMap
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 178
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void ResetAuraCollisionMap()
    content.vb: Public Sub ResetAuraCollisionMap()
  overload: Global.IntActor.ResetAuraCollisionMap*
- uid: Global.IntActor.ResetActorCollisionMap
  commentId: M:Global.IntActor.ResetActorCollisionMap
  id: ResetActorCollisionMap
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: ResetActorCollisionMap()
  nameWithType: IntActor.ResetActorCollisionMap()
  fullName: IntActor.ResetActorCollisionMap()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ResetActorCollisionMap
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 196
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void ResetActorCollisionMap()
    content.vb: Public Sub ResetActorCollisionMap()
  overload: Global.IntActor.ResetActorCollisionMap*
- uid: Global.IntActor.ResetCollisionMap
  commentId: M:Global.IntActor.ResetCollisionMap
  id: ResetCollisionMap
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: ResetCollisionMap()
  nameWithType: IntActor.ResetCollisionMap()
  fullName: IntActor.ResetCollisionMap()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ResetCollisionMap
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 214
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void ResetCollisionMap()
    content.vb: Public Sub ResetCollisionMap()
  overload: Global.IntActor.ResetCollisionMap*
- uid: Global.IntActor.ResetCollisionsAfterTime(IntObject,System.Single)
  commentId: M:Global.IntActor.ResetCollisionsAfterTime(IntObject,System.Single)
  id: ResetCollisionsAfterTime(IntObject,System.Single)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: ResetCollisionsAfterTime(IntObject, float)
  nameWithType: IntActor.ResetCollisionsAfterTime(IntObject, float)
  fullName: IntActor.ResetCollisionsAfterTime(IntObject, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ResetCollisionsAfterTime
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 225
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void ResetCollisionsAfterTime(IntObject obj, float time)
    parameters:
    - id: obj
      type: Global.IntObject
    - id: time
      type: System.Single
    content.vb: Public Sub ResetCollisionsAfterTime(obj As IntObject, time As Single)
  overload: Global.IntActor.ResetCollisionsAfterTime*
  nameWithType.vb: IntActor.ResetCollisionsAfterTime(IntObject, Single)
  fullName.vb: IntActor.ResetCollisionsAfterTime(IntObject, Single)
  name.vb: ResetCollisionsAfterTime(IntObject, Single)
- uid: Global.IntActor.SetCollisionMapValue(IntObject,System.Boolean)
  commentId: M:Global.IntActor.SetCollisionMapValue(IntObject,System.Boolean)
  id: SetCollisionMapValue(IntObject,System.Boolean)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: SetCollisionMapValue(IntObject, bool)
  nameWithType: IntActor.SetCollisionMapValue(IntObject, bool)
  fullName: IntActor.SetCollisionMapValue(IntObject, bool)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SetCollisionMapValue
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 236
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nSets whether the actor is currently overlapping the provided object. \nThis is usually used to reset OnTriggerEnter, so it will be called on the next frame\n"
  example: []
  syntax:
    content: public void SetCollisionMapValue(IntObject obj, bool val)
    parameters:
    - id: obj
      type: Global.IntObject
      description: Object in the collision map
    - id: val
      type: System.Boolean
      description: Whether the actor is colliding with the object
    content.vb: Public Sub SetCollisionMapValue(obj As IntObject, val As Boolean)
  overload: Global.IntActor.SetCollisionMapValue*
  nameWithType.vb: IntActor.SetCollisionMapValue(IntObject, Boolean)
  fullName.vb: IntActor.SetCollisionMapValue(IntObject, Boolean)
  name.vb: SetCollisionMapValue(IntObject, Boolean)
- uid: Global.IntActor.GetCollisionMapValue(IntObject)
  commentId: M:Global.IntActor.GetCollisionMapValue(IntObject)
  id: GetCollisionMapValue(IntObject)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: GetCollisionMapValue(IntObject)
  nameWithType: IntActor.GetCollisionMapValue(IntObject)
  fullName: IntActor.GetCollisionMapValue(IntObject)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetCollisionMapValue
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 248
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nReturns whether the actor is overlapping the specified object based on precomputed collisions during movement.\n"
  example: []
  syntax:
    content: public int GetCollisionMapValue(IntObject obj)
    parameters:
    - id: obj
      type: Global.IntObject
      description: ''
    return:
      type: System.Int32
      description: returns 1 if colliding, returns 0 if not mapped, returns -1 if not colliding
    content.vb: Public Function GetCollisionMapValue(obj As IntObject) As Integer
  overload: Global.IntActor.GetCollisionMapValue*
- uid: Global.IntActor.Squish(IntSolid)
  commentId: M:Global.IntActor.Squish(IntSolid)
  id: Squish(IntSolid)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: Squish(IntSolid)
  nameWithType: IntActor.Squish(IntSolid)
  fullName: IntActor.Squish(IntSolid)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Squish
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 257
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public virtual void Squish(IntSolid solid)
    parameters:
    - id: solid
      type: Global.IntSolid
    content.vb: Public Overridable Sub Squish(solid As IntSolid)
  overload: Global.IntActor.Squish*
- uid: Global.IntActor.OnTriggerStart(IntTrigger)
  commentId: M:Global.IntActor.OnTriggerStart(IntTrigger)
  id: OnTriggerStart(IntTrigger)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: OnTriggerStart(IntTrigger)
  nameWithType: IntActor.OnTriggerStart(IntTrigger)
  fullName: IntActor.OnTriggerStart(IntTrigger)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnTriggerStart
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 259
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public virtual void OnTriggerStart(IntTrigger trigger)
    parameters:
    - id: trigger
      type: Global.IntTrigger
    content.vb: Public Overridable Sub OnTriggerStart(trigger As IntTrigger)
  overload: Global.IntActor.OnTriggerStart*
- uid: Global.IntActor.OnTriggerEnd(IntTrigger)
  commentId: M:Global.IntActor.OnTriggerEnd(IntTrigger)
  id: OnTriggerEnd(IntTrigger)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: OnTriggerEnd(IntTrigger)
  nameWithType: IntActor.OnTriggerEnd(IntTrigger)
  fullName: IntActor.OnTriggerEnd(IntTrigger)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnTriggerEnd
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 261
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public virtual void OnTriggerEnd(IntTrigger trigger)
    parameters:
    - id: trigger
      type: Global.IntTrigger
    content.vb: Public Overridable Sub OnTriggerEnd(trigger As IntTrigger)
  overload: Global.IntActor.OnTriggerEnd*
- uid: Global.IntActor.OnActor(IntActor)
  commentId: M:Global.IntActor.OnActor(IntActor)
  id: OnActor(IntActor)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: OnActor(IntActor)
  nameWithType: IntActor.OnActor(IntActor)
  fullName: IntActor.OnActor(IntActor)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnActor
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 263
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public virtual void OnActor(IntActor actor)
    parameters:
    - id: actor
      type: Global.IntActor
    content.vb: Public Overridable Sub OnActor(actor As IntActor)
  overload: Global.IntActor.OnActor*
- uid: Global.IntActor.GetVelocity
  commentId: M:Global.IntActor.GetVelocity
  id: GetVelocity
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: GetVelocity()
  nameWithType: IntActor.GetVelocity()
  fullName: IntActor.GetVelocity()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetVelocity
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 265
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public virtual Vector2 GetVelocity()
    return:
      type: UnityEngine.Vector2
    content.vb: Public Overridable Function GetVelocity() As Vector2
  overload: Global.IntActor.GetVelocity*
- uid: Global.IntActor.CheckGrounded
  commentId: M:Global.IntActor.CheckGrounded
  id: CheckGrounded
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: CheckGrounded()
  nameWithType: IntActor.CheckGrounded()
  fullName: IntActor.CheckGrounded()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: CheckGrounded
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 267
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool CheckGrounded()
    return:
      type: System.Boolean
    content.vb: Public Function CheckGrounded() As Boolean
  overload: Global.IntActor.CheckGrounded*
- uid: Global.IntActor.GroundActor
  commentId: M:Global.IntActor.GroundActor
  id: GroundActor
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: GroundActor()
  nameWithType: IntActor.GroundActor()
  fullName: IntActor.GroundActor()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GroundActor
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 290
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool GroundActor()
    return:
      type: System.Boolean
    content.vb: Public Function GroundActor() As Boolean
  overload: Global.IntActor.GroundActor*
- uid: Global.IntActor.CheckOnWall
  commentId: M:Global.IntActor.CheckOnWall
  id: CheckOnWall
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: CheckOnWall()
  nameWithType: IntActor.CheckOnWall()
  fullName: IntActor.CheckOnWall()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: CheckOnWall
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 309
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected IntMath.Direction CheckOnWall()
    return:
      type: Global.IntMath.Direction
    content.vb: Protected Function CheckOnWall() As IntMath.Direction
  overload: Global.IntActor.CheckOnWall*
- uid: Global.IntActor.DropDownOneWay
  commentId: M:Global.IntActor.DropDownOneWay
  id: DropDownOneWay
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: DropDownOneWay()
  nameWithType: IntActor.DropDownOneWay()
  fullName: IntActor.DropDownOneWay()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: DropDownOneWay
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 320
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected void DropDownOneWay()
    content.vb: Protected Sub DropDownOneWay()
  overload: Global.IntActor.DropDownOneWay*
- uid: Global.IntActor.activeWater
  commentId: P:Global.IntActor.activeWater
  id: activeWater
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: activeWater
  nameWithType: IntActor.activeWater
  fullName: IntActor.activeWater
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: activeWater
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 332
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public WaterComponent activeWater { get; protected set; }
    parameters: []
    return:
      type: Global.WaterComponent
    content.vb: Public Property activeWater As WaterComponent
  overload: Global.IntActor.activeWater*
- uid: Global.IntActor.GetSubmergedPercentage
  commentId: M:Global.IntActor.GetSubmergedPercentage
  id: GetSubmergedPercentage
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: GetSubmergedPercentage()
  nameWithType: IntActor.GetSubmergedPercentage()
  fullName: IntActor.GetSubmergedPercentage()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetSubmergedPercentage
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 334
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public float GetSubmergedPercentage()
    return:
      type: System.Single
    content.vb: Public Function GetSubmergedPercentage() As Single
  overload: Global.IntActor.GetSubmergedPercentage*
- uid: Global.IntActor.GetSubmergedPercentage(UnityEngine.Vector2Int)
  commentId: M:Global.IntActor.GetSubmergedPercentage(UnityEngine.Vector2Int)
  id: GetSubmergedPercentage(UnityEngine.Vector2Int)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: GetSubmergedPercentage(Vector2Int)
  nameWithType: IntActor.GetSubmergedPercentage(Vector2Int)
  fullName: IntActor.GetSubmergedPercentage(UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetSubmergedPercentage
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 339
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public float GetSubmergedPercentage(Vector2Int dPos)
    parameters:
    - id: dPos
      type: UnityEngine.Vector2Int
    return:
      type: System.Single
    content.vb: Public Function GetSubmergedPercentage(dPos As Vector2Int) As Single
  overload: Global.IntActor.GetSubmergedPercentage*
- uid: Global.IntActor.IsInWater
  commentId: P:Global.IntActor.IsInWater
  id: IsInWater
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: IsInWater
  nameWithType: IntActor.IsInWater
  fullName: IntActor.IsInWater
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: IsInWater
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 354
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool IsInWater { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsInWater As Boolean
  overload: Global.IntActor.IsInWater*
- uid: Global.IntActor.OnEnterWater(WaterComponent,System.Single)
  commentId: M:Global.IntActor.OnEnterWater(WaterComponent,System.Single)
  id: OnEnterWater(WaterComponent,System.Single)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: OnEnterWater(WaterComponent, float)
  nameWithType: IntActor.OnEnterWater(WaterComponent, float)
  fullName: IntActor.OnEnterWater(WaterComponent, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnEnterWater
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 356
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public virtual void OnEnterWater(WaterComponent water, float dampingFactor)
    parameters:
    - id: water
      type: Global.WaterComponent
    - id: dampingFactor
      type: System.Single
    content.vb: Public Overridable Sub OnEnterWater(water As WaterComponent, dampingFactor As Single)
  overload: Global.IntActor.OnEnterWater*
  nameWithType.vb: IntActor.OnEnterWater(WaterComponent, Single)
  fullName.vb: IntActor.OnEnterWater(WaterComponent, Single)
  name.vb: OnEnterWater(WaterComponent, Single)
- uid: Global.IntActor.OnExitWater(WaterComponent)
  commentId: M:Global.IntActor.OnExitWater(WaterComponent)
  id: OnExitWater(WaterComponent)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: OnExitWater(WaterComponent)
  nameWithType: IntActor.OnExitWater(WaterComponent)
  fullName: IntActor.OnExitWater(WaterComponent)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnExitWater
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 362
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public virtual void OnExitWater(WaterComponent water)
    parameters:
    - id: water
      type: Global.WaterComponent
    content.vb: Public Overridable Sub OnExitWater(water As WaterComponent)
  overload: Global.IntActor.OnExitWater*
- uid: Global.IntActor.ApplyWind(UnityEngine.Vector2)
  commentId: M:Global.IntActor.ApplyWind(UnityEngine.Vector2)
  id: ApplyWind(UnityEngine.Vector2)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: ApplyWind(Vector2)
  nameWithType: IntActor.ApplyWind(Vector2)
  fullName: IntActor.ApplyWind(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ApplyWind
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 370
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void ApplyWind(Vector2 force)
    parameters:
    - id: force
      type: UnityEngine.Vector2
    content.vb: Public Sub ApplyWind(force As Vector2)
  overload: Global.IntActor.ApplyWind*
- uid: Global.IntActor.RemoveWind
  commentId: M:Global.IntActor.RemoveWind
  id: RemoveWind
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: RemoveWind()
  nameWithType: IntActor.RemoveWind()
  fullName: IntActor.RemoveWind()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RemoveWind
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 375
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void RemoveWind()
    content.vb: Public Sub RemoveWind()
  overload: Global.IntActor.RemoveWind*
- uid: Global.IntActor.ResolvePosition(UnityEngine.Vector2,System.Single,System.Int32,System.Boolean,System.Boolean,IntObject.ActorAction,IntObject.TriggerAction)
  commentId: M:Global.IntActor.ResolvePosition(UnityEngine.Vector2,System.Single,System.Int32,System.Boolean,System.Boolean,IntObject.ActorAction,IntObject.TriggerAction)
  id: ResolvePosition(UnityEngine.Vector2,System.Single,System.Int32,System.Boolean,System.Boolean,IntObject.ActorAction,IntObject.TriggerAction)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: ResolvePosition(Vector2, float, int, bool, bool, ActorAction, TriggerAction)
  nameWithType: IntActor.ResolvePosition(Vector2, float, int, bool, bool, IntObject.ActorAction, IntObject.TriggerAction)
  fullName: IntActor.ResolvePosition(UnityEngine.Vector2, float, int, bool, bool, IntObject.ActorAction, IntObject.TriggerAction)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ResolvePosition
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 391
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\n\n"
  example: []
  syntax:
    content: public bool ResolvePosition(Vector2 direction, float maxSlideDistance, int stepSize, bool solidsOnly = false, bool checkCollisions = false, IntObject.ActorAction OnCollideActor = null, IntObject.TriggerAction OnCollideTrigger = null)
    parameters:
    - id: direction
      type: UnityEngine.Vector2
      description: ''
    - id: maxSlideDistance
      type: System.Single
      description: ''
    - id: stepSize
      type: System.Int32
      description: ''
    - id: solidsOnly
      type: System.Boolean
      description: ''
    - id: checkCollisions
      type: System.Boolean
      description: Whether to check actor and trigger collisions
    - id: OnCollideActor
      type: Global.IntObject.ActorAction
      description: ''
    - id: OnCollideTrigger
      type: Global.IntObject.TriggerAction
      description: ''
    return:
      type: System.Boolean
      description: Whether the player&apos;s position was able to be resolved
    content.vb: Public Function ResolvePosition(direction As Vector2, maxSlideDistance As Single, stepSize As Integer, solidsOnly As Boolean = False, checkCollisions As Boolean = False, OnCollideActor As IntObject.ActorAction = Nothing, OnCollideTrigger As IntObject.TriggerAction = Nothing) As Boolean
  overload: Global.IntActor.ResolvePosition*
  nameWithType.vb: IntActor.ResolvePosition(Vector2, Single, Integer, Boolean, Boolean, IntObject.ActorAction, IntObject.TriggerAction)
  fullName.vb: IntActor.ResolvePosition(UnityEngine.Vector2, Single, Integer, Boolean, Boolean, IntObject.ActorAction, IntObject.TriggerAction)
  name.vb: ResolvePosition(Vector2, Single, Integer, Boolean, Boolean, ActorAction, TriggerAction)
- uid: Global.IntActor.ResolvePositionNoSlide(UnityEngine.Vector2Int)
  commentId: M:Global.IntActor.ResolvePositionNoSlide(UnityEngine.Vector2Int)
  id: ResolvePositionNoSlide(UnityEngine.Vector2Int)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: ResolvePositionNoSlide(Vector2Int)
  nameWithType: IntActor.ResolvePositionNoSlide(Vector2Int)
  fullName: IntActor.ResolvePositionNoSlide(UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ResolvePositionNoSlide
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 460
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nOnly set the player&apos;s position if the specified offset location is safe (no collisions with solids)\n"
  example: []
  syntax:
    content: public bool ResolvePositionNoSlide(Vector2Int offset)
    parameters:
    - id: offset
      type: UnityEngine.Vector2Int
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function ResolvePositionNoSlide(offset As Vector2Int) As Boolean
  overload: Global.IntActor.ResolvePositionNoSlide*
- uid: Global.IntActor.EfficientMove(UnityEngine.Vector2,IntObject.SolidAction,IntObject.SolidAction)
  commentId: M:Global.IntActor.EfficientMove(UnityEngine.Vector2,IntObject.SolidAction,IntObject.SolidAction)
  id: EfficientMove(UnityEngine.Vector2,IntObject.SolidAction,IntObject.SolidAction)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: EfficientMove(Vector2, SolidAction, SolidAction)
  nameWithType: IntActor.EfficientMove(Vector2, IntObject.SolidAction, IntObject.SolidAction)
  fullName: IntActor.EfficientMove(UnityEngine.Vector2, IntObject.SolidAction, IntObject.SolidAction)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: EfficientMove
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 482
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void EfficientMove(Vector2 amount, IntObject.SolidAction OnCollideX, IntObject.SolidAction OnCollideY)
    parameters:
    - id: amount
      type: UnityEngine.Vector2
    - id: OnCollideX
      type: Global.IntObject.SolidAction
    - id: OnCollideY
      type: Global.IntObject.SolidAction
    content.vb: Public Sub EfficientMove(amount As Vector2, OnCollideX As IntObject.SolidAction, OnCollideY As IntObject.SolidAction)
  overload: Global.IntActor.EfficientMove*
- uid: Global.IntActor.MoveX(System.Single,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  commentId: M:Global.IntActor.MoveX(System.Single,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  id: MoveX(System.Single,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: MoveX(float, SolidAction, ActorAction, TriggerAction)
  nameWithType: IntActor.MoveX(float, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  fullName: IntActor.MoveX(float, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: MoveX
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 524
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void MoveX(float amount, IntObject.SolidAction OnCollide, IntObject.ActorAction OnCollideActor = null, IntObject.TriggerAction OnCollideTrigger = null)
    parameters:
    - id: amount
      type: System.Single
    - id: OnCollide
      type: Global.IntObject.SolidAction
    - id: OnCollideActor
      type: Global.IntObject.ActorAction
    - id: OnCollideTrigger
      type: Global.IntObject.TriggerAction
    content.vb: Public Sub MoveX(amount As Single, OnCollide As IntObject.SolidAction, OnCollideActor As IntObject.ActorAction = Nothing, OnCollideTrigger As IntObject.TriggerAction = Nothing)
  overload: Global.IntActor.MoveX*
  nameWithType.vb: IntActor.MoveX(Single, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  fullName.vb: IntActor.MoveX(Single, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  name.vb: MoveX(Single, SolidAction, ActorAction, TriggerAction)
- uid: Global.IntActor.MoveY(System.Single,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  commentId: M:Global.IntActor.MoveY(System.Single,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  id: MoveY(System.Single,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: MoveY(float, SolidAction, ActorAction, TriggerAction)
  nameWithType: IntActor.MoveY(float, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  fullName: IntActor.MoveY(float, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: MoveY
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 595
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void MoveY(float amount, IntObject.SolidAction OnCollide, IntObject.ActorAction OnCollideActor = null, IntObject.TriggerAction OnCollideTrigger = null)
    parameters:
    - id: amount
      type: System.Single
    - id: OnCollide
      type: Global.IntObject.SolidAction
    - id: OnCollideActor
      type: Global.IntObject.ActorAction
    - id: OnCollideTrigger
      type: Global.IntObject.TriggerAction
    content.vb: Public Sub MoveY(amount As Single, OnCollide As IntObject.SolidAction, OnCollideActor As IntObject.ActorAction = Nothing, OnCollideTrigger As IntObject.TriggerAction = Nothing)
  overload: Global.IntActor.MoveY*
  nameWithType.vb: IntActor.MoveY(Single, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  fullName.vb: IntActor.MoveY(Single, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  name.vb: MoveY(Single, SolidAction, ActorAction, TriggerAction)
- uid: Global.IntActor.getIntersectParameters(System.Int32,System.Single,System.Single,System.Single)
  commentId: M:Global.IntActor.getIntersectParameters(System.Int32,System.Single,System.Single,System.Single)
  id: getIntersectParameters(System.Int32,System.Single,System.Single,System.Single)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: getIntersectParameters(int, float, float, float)
  nameWithType: IntActor.getIntersectParameters(int, float, float, float)
  fullName: IntActor.getIntersectParameters(int, float, float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: getIntersectParameters
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 666
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected (float intersectStep, float nextIntersect) getIntersectParameters(int startTile, float startRay, float diff, float cellsize)
    parameters:
    - id: startTile
      type: System.Int32
    - id: startRay
      type: System.Single
    - id: diff
      type: System.Single
    - id: cellsize
      type: System.Single
    return:
      type: System.ValueTuple{System.Single,System.Single}
    content.vb: Protected Function getIntersectParameters(startTile As Integer, startRay As Single, diff As Single, cellsize As Single) As (intersectStep As Single, nextIntersect As Single)
  overload: Global.IntActor.getIntersectParameters*
  nameWithType.vb: IntActor.getIntersectParameters(Integer, Single, Single, Single)
  fullName.vb: IntActor.getIntersectParameters(Integer, Single, Single, Single)
  name.vb: getIntersectParameters(Integer, Single, Single, Single)
- uid: Global.IntActor.NotifyObjectKilled(IntObject)
  commentId: M:Global.IntActor.NotifyObjectKilled(IntObject)
  id: NotifyObjectKilled(IntObject)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: NotifyObjectKilled(IntObject)
  nameWithType: IntActor.NotifyObjectKilled(IntObject)
  fullName: IntActor.NotifyObjectKilled(IntObject)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: NotifyObjectKilled
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 693
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void NotifyObjectKilled(IntObject obj)
    parameters:
    - id: obj
      type: Global.IntObject
    content.vb: Public Sub NotifyObjectKilled(obj As IntObject)
  overload: Global.IntActor.NotifyObjectKilled*
- uid: Global.IntActor.OnSpike(IntSolid)
  commentId: M:Global.IntActor.OnSpike(IntSolid)
  id: OnSpike(IntSolid)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: OnSpike(IntSolid)
  nameWithType: IntActor.OnSpike(IntSolid)
  fullName: IntActor.OnSpike(IntSolid)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnSpike
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 699
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected virtual void OnSpike(IntSolid solid)
    parameters:
    - id: solid
      type: Global.IntSolid
    content.vb: Protected Overridable Sub OnSpike(solid As IntSolid)
  overload: Global.IntActor.OnSpike*
- uid: Global.IntActor.SlantMove(UnityEngine.Vector2,IntObject.ActorAction,IntObject.TriggerAction)
  commentId: M:Global.IntActor.SlantMove(UnityEngine.Vector2,IntObject.ActorAction,IntObject.TriggerAction)
  id: SlantMove(UnityEngine.Vector2,IntObject.ActorAction,IntObject.TriggerAction)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: SlantMove(Vector2, ActorAction, TriggerAction)
  nameWithType: IntActor.SlantMove(Vector2, IntObject.ActorAction, IntObject.TriggerAction)
  fullName: IntActor.SlantMove(UnityEngine.Vector2, IntObject.ActorAction, IntObject.TriggerAction)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SlantMove
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 704
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected void SlantMove(Vector2 amount, IntObject.ActorAction OnEnterActor = null, IntObject.TriggerAction OnEnterTrigger = null)
    parameters:
    - id: amount
      type: UnityEngine.Vector2
    - id: OnEnterActor
      type: Global.IntObject.ActorAction
    - id: OnEnterTrigger
      type: Global.IntObject.TriggerAction
    content.vb: Protected Sub SlantMove(amount As Vector2, OnEnterActor As IntObject.ActorAction = Nothing, OnEnterTrigger As IntObject.TriggerAction = Nothing)
  overload: Global.IntActor.SlantMove*
- uid: Global.IntActor.CheckActorTriggerCollisions(IntObject.ActorAction,IntObject.TriggerAction)
  commentId: M:Global.IntActor.CheckActorTriggerCollisions(IntObject.ActorAction,IntObject.TriggerAction)
  id: CheckActorTriggerCollisions(IntObject.ActorAction,IntObject.TriggerAction)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: CheckActorTriggerCollisions(ActorAction, TriggerAction)
  nameWithType: IntActor.CheckActorTriggerCollisions(IntObject.ActorAction, IntObject.TriggerAction)
  fullName: IntActor.CheckActorTriggerCollisions(IntObject.ActorAction, IntObject.TriggerAction)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: CheckActorTriggerCollisions
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 731
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void CheckActorTriggerCollisions(IntObject.ActorAction OnEnterActor, IntObject.TriggerAction OnEnterTrigger)
    parameters:
    - id: OnEnterActor
      type: Global.IntObject.ActorAction
    - id: OnEnterTrigger
      type: Global.IntObject.TriggerAction
    content.vb: Public Sub CheckActorTriggerCollisions(OnEnterActor As IntObject.ActorAction, OnEnterTrigger As IntObject.TriggerAction)
  overload: Global.IntActor.CheckActorTriggerCollisions*
- uid: Global.IntActor.CheckActorInteractableCollisions
  commentId: M:Global.IntActor.CheckActorInteractableCollisions
  id: CheckActorInteractableCollisions
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: CheckActorInteractableCollisions()
  nameWithType: IntActor.CheckActorInteractableCollisions()
  fullName: IntActor.CheckActorInteractableCollisions()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: CheckActorInteractableCollisions
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 811
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected void CheckActorInteractableCollisions()
    content.vb: Protected Sub CheckActorInteractableCollisions()
  overload: Global.IntActor.CheckActorInteractableCollisions*
- uid: Global.IntActor.SimpleMove(UnityEngine.Vector2,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  commentId: M:Global.IntActor.SimpleMove(UnityEngine.Vector2,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  id: SimpleMove(UnityEngine.Vector2,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: SimpleMove(Vector2, SolidAction, SolidAction, ActorAction, TriggerAction)
  nameWithType: IntActor.SimpleMove(Vector2, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  fullName: IntActor.SimpleMove(UnityEngine.Vector2, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SimpleMove
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 844
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void SimpleMove(Vector2 amount, IntObject.SolidAction OnCollideX, IntObject.SolidAction OnCollideY, IntObject.ActorAction OnEnterActor = null, IntObject.TriggerAction OnEnterTrigger = null)
    parameters:
    - id: amount
      type: UnityEngine.Vector2
    - id: OnCollideX
      type: Global.IntObject.SolidAction
    - id: OnCollideY
      type: Global.IntObject.SolidAction
    - id: OnEnterActor
      type: Global.IntObject.ActorAction
    - id: OnEnterTrigger
      type: Global.IntObject.TriggerAction
    content.vb: Public Sub SimpleMove(amount As Vector2, OnCollideX As IntObject.SolidAction, OnCollideY As IntObject.SolidAction, OnEnterActor As IntObject.ActorAction = Nothing, OnEnterTrigger As IntObject.TriggerAction = Nothing)
  overload: Global.IntActor.SimpleMove*
- uid: Global.IntActor.ComplexMove(UnityEngine.Vector2,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction,System.Int32)
  commentId: M:Global.IntActor.ComplexMove(UnityEngine.Vector2,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction,System.Int32)
  id: ComplexMove(UnityEngine.Vector2,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction,System.Int32)
  parent: Global.IntActor
  langs:
  - csharp
  - vb
  name: ComplexMove(Vector2, SolidAction, SolidAction, ActorAction, TriggerAction, int)
  nameWithType: IntActor.ComplexMove(Vector2, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction, int)
  fullName: IntActor.ComplexMove(UnityEngine.Vector2, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction, int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Objects/IntActor.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ComplexMove
    path: ../Assets/Framework/Physics/Objects/IntActor.cs
    startLine: 850
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void ComplexMove(Vector2 amount, IntObject.SolidAction OnCollideX, IntObject.SolidAction OnCollideY, IntObject.ActorAction OnEnterActor = null, IntObject.TriggerAction OnEnterTrigger = null, int step = 1)
    parameters:
    - id: amount
      type: UnityEngine.Vector2
    - id: OnCollideX
      type: Global.IntObject.SolidAction
    - id: OnCollideY
      type: Global.IntObject.SolidAction
    - id: OnEnterActor
      type: Global.IntObject.ActorAction
    - id: OnEnterTrigger
      type: Global.IntObject.TriggerAction
    - id: step
      type: System.Int32
    content.vb: Public Sub ComplexMove(amount As Vector2, OnCollideX As IntObject.SolidAction, OnCollideY As IntObject.SolidAction, OnEnterActor As IntObject.ActorAction = Nothing, OnEnterTrigger As IntObject.TriggerAction = Nothing, [step] As Integer = 1)
  overload: Global.IntActor.ComplexMove*
  nameWithType.vb: IntActor.ComplexMove(Vector2, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction, Integer)
  fullName.vb: IntActor.ComplexMove(UnityEngine.Vector2, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction, Integer)
  name.vb: ComplexMove(Vector2, SolidAction, SolidAction, ActorAction, TriggerAction, Integer)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.Component
  commentId: T:UnityEngine.Component
  parent: UnityEngine
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: UnityEngine.Component
- uid: UnityEngine.Behaviour
  commentId: T:UnityEngine.Behaviour
  parent: UnityEngine
  isExternal: true
  name: Behaviour
  nameWithType: Behaviour
  fullName: UnityEngine.Behaviour
- uid: UnityEngine.MonoBehaviour
  commentId: T:UnityEngine.MonoBehaviour
  parent: UnityEngine
  isExternal: true
  name: MonoBehaviour
  nameWithType: MonoBehaviour
  fullName: UnityEngine.MonoBehaviour
- uid: Global.IntObject
  commentId: T:Global.IntObject
  name: IntObject
  nameWithType: IntObject
  fullName: IntObject
- uid: Global.ISavableObject{IntObjectSaveData}
  commentId: T:Global.ISavableObject{IntObjectSaveData}
  definition: Global.ISavableObject`1
  name: ISavableObject<IntObjectSaveData>
  nameWithType: ISavableObject<IntObjectSaveData>
  fullName: ISavableObject<IntObjectSaveData>
  nameWithType.vb: ISavableObject(Of IntObjectSaveData)
  fullName.vb: ISavableObject(Of IntObjectSaveData)
  name.vb: ISavableObject(Of IntObjectSaveData)
  spec.csharp:
  - uid: Global.ISavableObject`1
    name: ISavableObject
  - name: <
  - uid: Global.IntObjectSaveData
    name: IntObjectSaveData
  - name: '>'
  spec.vb:
  - uid: Global.ISavableObject`1
    name: ISavableObject
  - name: (
  - name: Of
  - name: " "
  - uid: Global.IntObjectSaveData
    name: IntObjectSaveData
  - name: )
- uid: Global.IntObject.section
  commentId: P:Global.IntObject.section
  parent: Global.IntObject
  name: section
  nameWithType: IntObject.section
  fullName: IntObject.section
- uid: Global.IntObject.state
  commentId: P:Global.IntObject.state
  parent: Global.IntObject
  name: state
  nameWithType: IntObject.state
  fullName: IntObject.state
- uid: Global.IntObject.int_collider
  commentId: F:Global.IntObject.int_collider
  parent: Global.IntObject
  name: int_collider
  nameWithType: IntObject.int_collider
  fullName: IntObject.int_collider
- uid: Global.IntObject.remainder
  commentId: F:Global.IntObject.remainder
  parent: Global.IntObject
  name: remainder
  nameWithType: IntObject.remainder
  fullName: IntObject.remainder
- uid: Global.IntObject.StartPosition
  commentId: F:Global.IntObject.StartPosition
  parent: Global.IntObject
  name: StartPosition
  nameWithType: IntObject.StartPosition
  fullName: IntObject.StartPosition
- uid: Global.IntObject.AttachedToPlayer
  commentId: F:Global.IntObject.AttachedToPlayer
  parent: Global.IntObject
  name: AttachedToPlayer
  nameWithType: IntObject.AttachedToPlayer
  fullName: IntObject.AttachedToPlayer
- uid: Global.IntObject.IgnoredObjectsMap
  commentId: F:Global.IntObject.IgnoredObjectsMap
  parent: Global.IntObject
  name: IgnoredObjectsMap
  nameWithType: IntObject.IgnoredObjectsMap
  fullName: IntObject.IgnoredObjectsMap
- uid: Global.IntObject.KilledCallback
  commentId: F:Global.IntObject.KilledCallback
  parent: Global.IntObject
  name: KilledCallback
  nameWithType: IntObject.KilledCallback
  fullName: IntObject.KilledCallback
- uid: Global.IntObject.Position
  commentId: P:Global.IntObject.Position
  parent: Global.IntObject
  name: Position
  nameWithType: IntObject.Position
  fullName: IntObject.Position
- uid: Global.IntObject.GetStartWorldPosition
  commentId: P:Global.IntObject.GetStartWorldPosition
  parent: Global.IntObject
  name: GetStartWorldPosition
  nameWithType: IntObject.GetStartWorldPosition
  fullName: IntObject.GetStartWorldPosition
- uid: Global.IntObject.collider_type
  commentId: P:Global.IntObject.collider_type
  parent: Global.IntObject
  name: collider_type
  nameWithType: IntObject.collider_type
  fullName: IntObject.collider_type
- uid: Global.IntObject.MarkedForKill
  commentId: P:Global.IntObject.MarkedForKill
  parent: Global.IntObject
  name: MarkedForKill
  nameWithType: IntObject.MarkedForKill
  fullName: IntObject.MarkedForKill
- uid: Global.IntObject.ObjectID
  commentId: F:Global.IntObject.ObjectID
  parent: Global.IntObject
  name: ObjectID
  nameWithType: IntObject.ObjectID
  fullName: IntObject.ObjectID
- uid: Global.IntObject.DestroyOnKill
  commentId: F:Global.IntObject.DestroyOnKill
  parent: Global.IntObject
  name: DestroyOnKill
  nameWithType: IntObject.DestroyOnKill
  fullName: IntObject.DestroyOnKill
- uid: Global.IntObject.RespawnBehavior
  commentId: F:Global.IntObject.RespawnBehavior
  parent: Global.IntObject
  name: RespawnBehavior
  nameWithType: IntObject.RespawnBehavior
  fullName: IntObject.RespawnBehavior
- uid: Global.IntObject.Status
  commentId: F:Global.IntObject.Status
  parent: Global.IntObject
  name: Status
  nameWithType: IntObject.Status
  fullName: IntObject.Status
- uid: Global.IntObject.InitialStatus
  commentId: F:Global.IntObject.InitialStatus
  parent: Global.IntObject
  name: InitialStatus
  nameWithType: IntObject.InitialStatus
  fullName: IntObject.InitialStatus
- uid: Global.IntObject.SaveObject
  commentId: F:Global.IntObject.SaveObject
  parent: Global.IntObject
  name: SaveObject
  nameWithType: IntObject.SaveObject
  fullName: IntObject.SaveObject
- uid: Global.IntObject.IsInSetPiece
  commentId: P:Global.IntObject.IsInSetPiece
  parent: Global.IntObject
  name: IsInSetPiece
  nameWithType: IntObject.IsInSetPiece
  fullName: IntObject.IsInSetPiece
- uid: Global.IntObject.Start
  commentId: M:Global.IntObject.Start
  parent: Global.IntObject
  name: Start()
  nameWithType: IntObject.Start()
  fullName: IntObject.Start()
  spec.csharp:
  - uid: Global.IntObject.Start
    name: Start
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.Start
    name: Start
  - name: (
  - name: )
- uid: Global.IntObject.Init
  commentId: M:Global.IntObject.Init
  parent: Global.IntObject
  name: Init()
  nameWithType: IntObject.Init()
  fullName: IntObject.Init()
  spec.csharp:
  - uid: Global.IntObject.Init
    name: Init
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.Init
    name: Init
  - name: (
  - name: )
- uid: Global.IntObject.FindIntColliderState(System.Int32)
  commentId: M:Global.IntObject.FindIntColliderState(System.Int32)
  parent: Global.IntObject
  isExternal: true
  name: FindIntColliderState(int)
  nameWithType: IntObject.FindIntColliderState(int)
  fullName: IntObject.FindIntColliderState(int)
  nameWithType.vb: IntObject.FindIntColliderState(Integer)
  fullName.vb: IntObject.FindIntColliderState(Integer)
  name.vb: FindIntColliderState(Integer)
  spec.csharp:
  - uid: Global.IntObject.FindIntColliderState(System.Int32)
    name: FindIntColliderState
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.FindIntColliderState(System.Int32)
    name: FindIntColliderState
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: Global.IntObject.GetLocalGameStates
  commentId: M:Global.IntObject.GetLocalGameStates
  parent: Global.IntObject
  name: GetLocalGameStates()
  nameWithType: IntObject.GetLocalGameStates()
  fullName: IntObject.GetLocalGameStates()
  spec.csharp:
  - uid: Global.IntObject.GetLocalGameStates
    name: GetLocalGameStates
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.GetLocalGameStates
    name: GetLocalGameStates
  - name: (
  - name: )
- uid: Global.IntObject.RegisterSelf
  commentId: M:Global.IntObject.RegisterSelf
  parent: Global.IntObject
  name: RegisterSelf()
  nameWithType: IntObject.RegisterSelf()
  fullName: IntObject.RegisterSelf()
  spec.csharp:
  - uid: Global.IntObject.RegisterSelf
    name: RegisterSelf
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.RegisterSelf
    name: RegisterSelf
  - name: (
  - name: )
- uid: Global.IntObject.UnregisterSelf
  commentId: M:Global.IntObject.UnregisterSelf
  parent: Global.IntObject
  name: UnregisterSelf()
  nameWithType: IntObject.UnregisterSelf()
  fullName: IntObject.UnregisterSelf()
  spec.csharp:
  - uid: Global.IntObject.UnregisterSelf
    name: UnregisterSelf
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.UnregisterSelf
    name: UnregisterSelf
  - name: (
  - name: )
- uid: Global.IntObject.RegisterKilledCallback(IntObject.Action)
  commentId: M:Global.IntObject.RegisterKilledCallback(IntObject.Action)
  parent: Global.IntObject
  name: RegisterKilledCallback(Action)
  nameWithType: IntObject.RegisterKilledCallback(IntObject.Action)
  fullName: IntObject.RegisterKilledCallback(IntObject.Action)
  spec.csharp:
  - uid: Global.IntObject.RegisterKilledCallback(IntObject.Action)
    name: RegisterKilledCallback
  - name: (
  - uid: Global.IntObject.Action
    name: Action
  - name: )
  spec.vb:
  - uid: Global.IntObject.RegisterKilledCallback(IntObject.Action)
    name: RegisterKilledCallback
  - name: (
  - uid: Global.IntObject.Action
    name: Action
  - name: )
- uid: Global.IntObject.UnregisterKilledCallback(IntObject.Action)
  commentId: M:Global.IntObject.UnregisterKilledCallback(IntObject.Action)
  parent: Global.IntObject
  name: UnregisterKilledCallback(Action)
  nameWithType: IntObject.UnregisterKilledCallback(IntObject.Action)
  fullName: IntObject.UnregisterKilledCallback(IntObject.Action)
  spec.csharp:
  - uid: Global.IntObject.UnregisterKilledCallback(IntObject.Action)
    name: UnregisterKilledCallback
  - name: (
  - uid: Global.IntObject.Action
    name: Action
  - name: )
  spec.vb:
  - uid: Global.IntObject.UnregisterKilledCallback(IntObject.Action)
    name: UnregisterKilledCallback
  - name: (
  - uid: Global.IntObject.Action
    name: Action
  - name: )
- uid: Global.IntObject.IsContainedInRect(UnityEngine.Rect)
  commentId: M:Global.IntObject.IsContainedInRect(UnityEngine.Rect)
  parent: Global.IntObject
  isExternal: true
  name: IsContainedInRect(Rect)
  nameWithType: IntObject.IsContainedInRect(Rect)
  fullName: IntObject.IsContainedInRect(UnityEngine.Rect)
  spec.csharp:
  - uid: Global.IntObject.IsContainedInRect(UnityEngine.Rect)
    name: IsContainedInRect
  - name: (
  - uid: UnityEngine.Rect
    name: Rect
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.IsContainedInRect(UnityEngine.Rect)
    name: IsContainedInRect
  - name: (
  - uid: UnityEngine.Rect
    name: Rect
    isExternal: true
  - name: )
- uid: Global.IntObject.Update
  commentId: M:Global.IntObject.Update
  parent: Global.IntObject
  name: Update()
  nameWithType: IntObject.Update()
  fullName: IntObject.Update()
  spec.csharp:
  - uid: Global.IntObject.Update
    name: Update
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.Update
    name: Update
  - name: (
  - name: )
- uid: Global.IntObject.SetStatus(ObjectStatus)
  commentId: M:Global.IntObject.SetStatus(ObjectStatus)
  parent: Global.IntObject
  name: SetStatus(ObjectStatus)
  nameWithType: IntObject.SetStatus(ObjectStatus)
  fullName: IntObject.SetStatus(ObjectStatus)
  spec.csharp:
  - uid: Global.IntObject.SetStatus(ObjectStatus)
    name: SetStatus
  - name: (
  - uid: Global.ObjectStatus
    name: ObjectStatus
  - name: )
  spec.vb:
  - uid: Global.IntObject.SetStatus(ObjectStatus)
    name: SetStatus
  - name: (
  - uid: Global.ObjectStatus
    name: ObjectStatus
  - name: )
- uid: Global.IntObject.OnKill(System.Boolean)
  commentId: M:Global.IntObject.OnKill(System.Boolean)
  parent: Global.IntObject
  isExternal: true
  name: OnKill(bool)
  nameWithType: IntObject.OnKill(bool)
  fullName: IntObject.OnKill(bool)
  nameWithType.vb: IntObject.OnKill(Boolean)
  fullName.vb: IntObject.OnKill(Boolean)
  name.vb: OnKill(Boolean)
  spec.csharp:
  - uid: Global.IntObject.OnKill(System.Boolean)
    name: OnKill
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.OnKill(System.Boolean)
    name: OnKill
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.IntObject.Kill
  commentId: M:Global.IntObject.Kill
  parent: Global.IntObject
  name: Kill()
  nameWithType: IntObject.Kill()
  fullName: IntObject.Kill()
  spec.csharp:
  - uid: Global.IntObject.Kill
    name: Kill
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.Kill
    name: Kill
  - name: (
  - name: )
- uid: Global.IntObject.Kill(System.Boolean)
  commentId: M:Global.IntObject.Kill(System.Boolean)
  parent: Global.IntObject
  isExternal: true
  name: Kill(bool)
  nameWithType: IntObject.Kill(bool)
  fullName: IntObject.Kill(bool)
  nameWithType.vb: IntObject.Kill(Boolean)
  fullName.vb: IntObject.Kill(Boolean)
  name.vb: Kill(Boolean)
  spec.csharp:
  - uid: Global.IntObject.Kill(System.Boolean)
    name: Kill
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.Kill(System.Boolean)
    name: Kill
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.IntObject.Kill(System.Single)
  commentId: M:Global.IntObject.Kill(System.Single)
  parent: Global.IntObject
  isExternal: true
  name: Kill(float)
  nameWithType: IntObject.Kill(float)
  fullName: IntObject.Kill(float)
  nameWithType.vb: IntObject.Kill(Single)
  fullName.vb: IntObject.Kill(Single)
  name.vb: Kill(Single)
  spec.csharp:
  - uid: Global.IntObject.Kill(System.Single)
    name: Kill
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.Kill(System.Single)
    name: Kill
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
- uid: Global.IntObject.Kill(System.Boolean,System.Single)
  commentId: M:Global.IntObject.Kill(System.Boolean,System.Single)
  parent: Global.IntObject
  isExternal: true
  name: Kill(bool, float)
  nameWithType: IntObject.Kill(bool, float)
  fullName: IntObject.Kill(bool, float)
  nameWithType.vb: IntObject.Kill(Boolean, Single)
  fullName.vb: IntObject.Kill(Boolean, Single)
  name.vb: Kill(Boolean, Single)
  spec.csharp:
  - uid: Global.IntObject.Kill(System.Boolean,System.Single)
    name: Kill
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.Kill(System.Boolean,System.Single)
    name: Kill
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
- uid: Global.IntObject.IgnoreObjectCollisions(IntObject,System.Single)
  commentId: M:Global.IntObject.IgnoreObjectCollisions(IntObject,System.Single)
  parent: Global.IntObject
  isExternal: true
  name: IgnoreObjectCollisions(IntObject, float)
  nameWithType: IntObject.IgnoreObjectCollisions(IntObject, float)
  fullName: IntObject.IgnoreObjectCollisions(IntObject, float)
  nameWithType.vb: IntObject.IgnoreObjectCollisions(IntObject, Single)
  fullName.vb: IntObject.IgnoreObjectCollisions(IntObject, Single)
  name.vb: IgnoreObjectCollisions(IntObject, Single)
  spec.csharp:
  - uid: Global.IntObject.IgnoreObjectCollisions(IntObject,System.Single)
    name: IgnoreObjectCollisions
  - name: (
  - uid: Global.IntObject
    name: IntObject
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.IgnoreObjectCollisions(IntObject,System.Single)
    name: IgnoreObjectCollisions
  - name: (
  - uid: Global.IntObject
    name: IntObject
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
- uid: Global.IntObject.SleepObject
  commentId: M:Global.IntObject.SleepObject
  parent: Global.IntObject
  name: SleepObject()
  nameWithType: IntObject.SleepObject()
  fullName: IntObject.SleepObject()
  spec.csharp:
  - uid: Global.IntObject.SleepObject
    name: SleepObject
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.SleepObject
    name: SleepObject
  - name: (
  - name: )
- uid: Global.IntObject.OptimizeSleepObject
  commentId: M:Global.IntObject.OptimizeSleepObject
  parent: Global.IntObject
  name: OptimizeSleepObject()
  nameWithType: IntObject.OptimizeSleepObject()
  fullName: IntObject.OptimizeSleepObject()
  spec.csharp:
  - uid: Global.IntObject.OptimizeSleepObject
    name: OptimizeSleepObject
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.OptimizeSleepObject
    name: OptimizeSleepObject
  - name: (
  - name: )
- uid: Global.IntObject.WakeObject
  commentId: M:Global.IntObject.WakeObject
  parent: Global.IntObject
  name: WakeObject()
  nameWithType: IntObject.WakeObject()
  fullName: IntObject.WakeObject()
  spec.csharp:
  - uid: Global.IntObject.WakeObject
    name: WakeObject
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.WakeObject
    name: WakeObject
  - name: (
  - name: )
- uid: Global.IntObject.EnableObject
  commentId: M:Global.IntObject.EnableObject
  parent: Global.IntObject
  name: EnableObject()
  nameWithType: IntObject.EnableObject()
  fullName: IntObject.EnableObject()
  spec.csharp:
  - uid: Global.IntObject.EnableObject
    name: EnableObject
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.EnableObject
    name: EnableObject
  - name: (
  - name: )
- uid: Global.IntObject.DisableObject
  commentId: M:Global.IntObject.DisableObject
  parent: Global.IntObject
  name: DisableObject()
  nameWithType: IntObject.DisableObject()
  fullName: IntObject.DisableObject()
  spec.csharp:
  - uid: Global.IntObject.DisableObject
    name: DisableObject
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.DisableObject
    name: DisableObject
  - name: (
  - name: )
- uid: Global.IntObject.RespawnObject
  commentId: M:Global.IntObject.RespawnObject
  parent: Global.IntObject
  name: RespawnObject()
  nameWithType: IntObject.RespawnObject()
  fullName: IntObject.RespawnObject()
  spec.csharp:
  - uid: Global.IntObject.RespawnObject
    name: RespawnObject
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.RespawnObject
    name: RespawnObject
  - name: (
  - name: )
- uid: Global.IntObject.ResetObject
  commentId: M:Global.IntObject.ResetObject
  parent: Global.IntObject
  name: ResetObject()
  nameWithType: IntObject.ResetObject()
  fullName: IntObject.ResetObject()
  spec.csharp:
  - uid: Global.IntObject.ResetObject
    name: ResetObject
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.ResetObject
    name: ResetObject
  - name: (
  - name: )
- uid: Global.IntObject.RecursiveSetCollidable(System.Boolean)
  commentId: M:Global.IntObject.RecursiveSetCollidable(System.Boolean)
  parent: Global.IntObject
  isExternal: true
  name: RecursiveSetCollidable(bool)
  nameWithType: IntObject.RecursiveSetCollidable(bool)
  fullName: IntObject.RecursiveSetCollidable(bool)
  nameWithType.vb: IntObject.RecursiveSetCollidable(Boolean)
  fullName.vb: IntObject.RecursiveSetCollidable(Boolean)
  name.vb: RecursiveSetCollidable(Boolean)
  spec.csharp:
  - uid: Global.IntObject.RecursiveSetCollidable(System.Boolean)
    name: RecursiveSetCollidable
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.RecursiveSetCollidable(System.Boolean)
    name: RecursiveSetCollidable
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.IntObject.SetColliderState(IntColliderState)
  commentId: M:Global.IntObject.SetColliderState(IntColliderState)
  parent: Global.IntObject
  name: SetColliderState(IntColliderState)
  nameWithType: IntObject.SetColliderState(IntColliderState)
  fullName: IntObject.SetColliderState(IntColliderState)
  spec.csharp:
  - uid: Global.IntObject.SetColliderState(IntColliderState)
    name: SetColliderState
  - name: (
  - uid: Global.IntColliderState
    name: IntColliderState
  - name: )
  spec.vb:
  - uid: Global.IntObject.SetColliderState(IntColliderState)
    name: SetColliderState
  - name: (
  - uid: Global.IntColliderState
    name: IntColliderState
  - name: )
- uid: Global.IntObject.Translate(UnityEngine.Vector2Int)
  commentId: M:Global.IntObject.Translate(UnityEngine.Vector2Int)
  parent: Global.IntObject
  isExternal: true
  name: Translate(Vector2Int)
  nameWithType: IntObject.Translate(Vector2Int)
  fullName: IntObject.Translate(UnityEngine.Vector2Int)
  spec.csharp:
  - uid: Global.IntObject.Translate(UnityEngine.Vector2Int)
    name: Translate
  - name: (
  - uid: UnityEngine.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.Translate(UnityEngine.Vector2Int)
    name: Translate
  - name: (
  - uid: UnityEngine.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
- uid: Global.IntObject.Translate(UnityEngine.Vector2)
  commentId: M:Global.IntObject.Translate(UnityEngine.Vector2)
  parent: Global.IntObject
  isExternal: true
  name: Translate(Vector2)
  nameWithType: IntObject.Translate(Vector2)
  fullName: IntObject.Translate(UnityEngine.Vector2)
  spec.csharp:
  - uid: Global.IntObject.Translate(UnityEngine.Vector2)
    name: Translate
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.Translate(UnityEngine.Vector2)
    name: Translate
  - name: (
  - uid: UnityEngine.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: Global.IntObject.SetPosition(UnityEngine.Vector2Int)
  commentId: M:Global.IntObject.SetPosition(UnityEngine.Vector2Int)
  parent: Global.IntObject
  isExternal: true
  name: SetPosition(Vector2Int)
  nameWithType: IntObject.SetPosition(Vector2Int)
  fullName: IntObject.SetPosition(UnityEngine.Vector2Int)
  spec.csharp:
  - uid: Global.IntObject.SetPosition(UnityEngine.Vector2Int)
    name: SetPosition
  - name: (
  - uid: UnityEngine.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.SetPosition(UnityEngine.Vector2Int)
    name: SetPosition
  - name: (
  - uid: UnityEngine.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
- uid: Global.IntObject.SetCollidable(System.Boolean)
  commentId: M:Global.IntObject.SetCollidable(System.Boolean)
  parent: Global.IntObject
  isExternal: true
  name: SetCollidable(bool)
  nameWithType: IntObject.SetCollidable(bool)
  fullName: IntObject.SetCollidable(bool)
  nameWithType.vb: IntObject.SetCollidable(Boolean)
  fullName.vb: IntObject.SetCollidable(Boolean)
  name.vb: SetCollidable(Boolean)
  spec.csharp:
  - uid: Global.IntObject.SetCollidable(System.Boolean)
    name: SetCollidable
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.SetCollidable(System.Boolean)
    name: SetCollidable
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.IntObject.GetCollidable
  commentId: M:Global.IntObject.GetCollidable
  parent: Global.IntObject
  name: GetCollidable()
  nameWithType: IntObject.GetCollidable()
  fullName: IntObject.GetCollidable()
  spec.csharp:
  - uid: Global.IntObject.GetCollidable
    name: GetCollidable
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.GetCollidable
    name: GetCollidable
  - name: (
  - name: )
- uid: Global.IntObject.GetCollider
  commentId: M:Global.IntObject.GetCollider
  parent: Global.IntObject
  name: GetCollider()
  nameWithType: IntObject.GetCollider()
  fullName: IntObject.GetCollider()
  spec.csharp:
  - uid: Global.IntObject.GetCollider
    name: GetCollider
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.GetCollider
    name: GetCollider
  - name: (
  - name: )
- uid: Global.IntObject.GetColliderState
  commentId: M:Global.IntObject.GetColliderState
  parent: Global.IntObject
  name: GetColliderState()
  nameWithType: IntObject.GetColliderState()
  fullName: IntObject.GetColliderState()
  spec.csharp:
  - uid: Global.IntObject.GetColliderState
    name: GetColliderState
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.GetColliderState
    name: GetColliderState
  - name: (
  - name: )
- uid: Global.IntObject.Overlaps(IntObject)
  commentId: M:Global.IntObject.Overlaps(IntObject)
  parent: Global.IntObject
  name: Overlaps(IntObject)
  nameWithType: IntObject.Overlaps(IntObject)
  fullName: IntObject.Overlaps(IntObject)
  spec.csharp:
  - uid: Global.IntObject.Overlaps(IntObject)
    name: Overlaps
  - name: (
  - uid: Global.IntObject
    name: IntObject
  - name: )
  spec.vb:
  - uid: Global.IntObject.Overlaps(IntObject)
    name: Overlaps
  - name: (
  - uid: Global.IntObject
    name: IntObject
  - name: )
- uid: Global.IntObject.Overlaps(IntObject,UnityEngine.Vector2Int)
  commentId: M:Global.IntObject.Overlaps(IntObject,UnityEngine.Vector2Int)
  parent: Global.IntObject
  isExternal: true
  name: Overlaps(IntObject, Vector2Int)
  nameWithType: IntObject.Overlaps(IntObject, Vector2Int)
  fullName: IntObject.Overlaps(IntObject, UnityEngine.Vector2Int)
  spec.csharp:
  - uid: Global.IntObject.Overlaps(IntObject,UnityEngine.Vector2Int)
    name: Overlaps
  - name: (
  - uid: Global.IntObject
    name: IntObject
  - name: ','
  - name: " "
  - uid: UnityEngine.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.Overlaps(IntObject,UnityEngine.Vector2Int)
    name: Overlaps
  - name: (
  - uid: Global.IntObject
    name: IntObject
  - name: ','
  - name: " "
  - uid: UnityEngine.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
- uid: Global.IntObject.RayCast(IntRay)
  commentId: M:Global.IntObject.RayCast(IntRay)
  parent: Global.IntObject
  name: RayCast(IntRay)
  nameWithType: IntObject.RayCast(IntRay)
  fullName: IntObject.RayCast(IntRay)
  spec.csharp:
  - uid: Global.IntObject.RayCast(IntRay)
    name: RayCast
  - name: (
  - uid: Global.IntRay
    name: IntRay
  - name: )
  spec.vb:
  - uid: Global.IntObject.RayCast(IntRay)
    name: RayCast
  - name: (
  - uid: Global.IntRay
    name: IntRay
  - name: )
- uid: Global.IntObject.CollideAt(System.Collections.Generic.List{IntSolid},UnityEngine.Vector2Int)
  commentId: M:Global.IntObject.CollideAt(System.Collections.Generic.List{IntSolid},UnityEngine.Vector2Int)
  parent: Global.IntObject
  isExternal: true
  name: CollideAt(List<IntSolid>, Vector2Int)
  nameWithType: IntObject.CollideAt(List<IntSolid>, Vector2Int)
  fullName: IntObject.CollideAt(System.Collections.Generic.List<IntSolid>, UnityEngine.Vector2Int)
  nameWithType.vb: IntObject.CollideAt(List(Of IntSolid), Vector2Int)
  fullName.vb: IntObject.CollideAt(System.Collections.Generic.List(Of IntSolid), UnityEngine.Vector2Int)
  name.vb: CollideAt(List(Of IntSolid), Vector2Int)
  spec.csharp:
  - uid: Global.IntObject.CollideAt(System.Collections.Generic.List{IntSolid},UnityEngine.Vector2Int)
    name: CollideAt
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.IntSolid
    name: IntSolid
  - name: '>'
  - name: ','
  - name: " "
  - uid: UnityEngine.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.CollideAt(System.Collections.Generic.List{IntSolid},UnityEngine.Vector2Int)
    name: CollideAt
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.IntSolid
    name: IntSolid
  - name: )
  - name: ','
  - name: " "
  - uid: UnityEngine.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
- uid: Global.IntObject.CollideAt(System.Collections.Generic.List{IntActor},UnityEngine.Vector2Int)
  commentId: M:Global.IntObject.CollideAt(System.Collections.Generic.List{IntActor},UnityEngine.Vector2Int)
  parent: Global.IntObject
  isExternal: true
  name: CollideAt(List<IntActor>, Vector2Int)
  nameWithType: IntObject.CollideAt(List<IntActor>, Vector2Int)
  fullName: IntObject.CollideAt(System.Collections.Generic.List<IntActor>, UnityEngine.Vector2Int)
  nameWithType.vb: IntObject.CollideAt(List(Of IntActor), Vector2Int)
  fullName.vb: IntObject.CollideAt(System.Collections.Generic.List(Of IntActor), UnityEngine.Vector2Int)
  name.vb: CollideAt(List(Of IntActor), Vector2Int)
  spec.csharp:
  - uid: Global.IntObject.CollideAt(System.Collections.Generic.List{IntActor},UnityEngine.Vector2Int)
    name: CollideAt
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.IntActor
    name: IntActor
  - name: '>'
  - name: ','
  - name: " "
  - uid: UnityEngine.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.CollideAt(System.Collections.Generic.List{IntActor},UnityEngine.Vector2Int)
    name: CollideAt
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.IntActor
    name: IntActor
  - name: )
  - name: ','
  - name: " "
  - uid: UnityEngine.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
- uid: Global.IntObject.CollideAt(System.Collections.Generic.List{IntTrigger},UnityEngine.Vector2Int)
  commentId: M:Global.IntObject.CollideAt(System.Collections.Generic.List{IntTrigger},UnityEngine.Vector2Int)
  parent: Global.IntObject
  isExternal: true
  name: CollideAt(List<IntTrigger>, Vector2Int)
  nameWithType: IntObject.CollideAt(List<IntTrigger>, Vector2Int)
  fullName: IntObject.CollideAt(System.Collections.Generic.List<IntTrigger>, UnityEngine.Vector2Int)
  nameWithType.vb: IntObject.CollideAt(List(Of IntTrigger), Vector2Int)
  fullName.vb: IntObject.CollideAt(System.Collections.Generic.List(Of IntTrigger), UnityEngine.Vector2Int)
  name.vb: CollideAt(List(Of IntTrigger), Vector2Int)
  spec.csharp:
  - uid: Global.IntObject.CollideAt(System.Collections.Generic.List{IntTrigger},UnityEngine.Vector2Int)
    name: CollideAt
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.IntTrigger
    name: IntTrigger
  - name: '>'
  - name: ','
  - name: " "
  - uid: UnityEngine.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.IntObject.CollideAt(System.Collections.Generic.List{IntTrigger},UnityEngine.Vector2Int)
    name: CollideAt
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.IntTrigger
    name: IntTrigger
  - name: )
  - name: ','
  - name: " "
  - uid: UnityEngine.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
- uid: Global.IntObject.OnDrawGizmos
  commentId: M:Global.IntObject.OnDrawGizmos
  parent: Global.IntObject
  name: OnDrawGizmos()
  nameWithType: IntObject.OnDrawGizmos()
  fullName: IntObject.OnDrawGizmos()
  spec.csharp:
  - uid: Global.IntObject.OnDrawGizmos
    name: OnDrawGizmos
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.OnDrawGizmos
    name: OnDrawGizmos
  - name: (
  - name: )
- uid: Global.IntObject.LoadObjectSaveData(IntObjectSaveData)
  commentId: M:Global.IntObject.LoadObjectSaveData(IntObjectSaveData)
  parent: Global.IntObject
  name: LoadObjectSaveData(IntObjectSaveData)
  nameWithType: IntObject.LoadObjectSaveData(IntObjectSaveData)
  fullName: IntObject.LoadObjectSaveData(IntObjectSaveData)
  spec.csharp:
  - uid: Global.IntObject.LoadObjectSaveData(IntObjectSaveData)
    name: LoadObjectSaveData
  - name: (
  - uid: Global.IntObjectSaveData
    name: IntObjectSaveData
  - name: )
  spec.vb:
  - uid: Global.IntObject.LoadObjectSaveData(IntObjectSaveData)
    name: LoadObjectSaveData
  - name: (
  - uid: Global.IntObjectSaveData
    name: IntObjectSaveData
  - name: )
- uid: Global.IntObject.GetObjectSaveData
  commentId: M:Global.IntObject.GetObjectSaveData
  parent: Global.IntObject
  name: GetObjectSaveData()
  nameWithType: IntObject.GetObjectSaveData()
  fullName: IntObject.GetObjectSaveData()
  spec.csharp:
  - uid: Global.IntObject.GetObjectSaveData
    name: GetObjectSaveData
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.GetObjectSaveData
    name: GetObjectSaveData
  - name: (
  - name: )
- uid: Global.IntObject.OnPostLoadSaveFile
  commentId: M:Global.IntObject.OnPostLoadSaveFile
  parent: Global.IntObject
  name: OnPostLoadSaveFile()
  nameWithType: IntObject.OnPostLoadSaveFile()
  fullName: IntObject.OnPostLoadSaveFile()
  spec.csharp:
  - uid: Global.IntObject.OnPostLoadSaveFile
    name: OnPostLoadSaveFile
  - name: (
  - name: )
  spec.vb:
  - uid: Global.IntObject.OnPostLoadSaveFile
    name: OnPostLoadSaveFile
  - name: (
  - name: )
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.ISavableObject`1
  commentId: T:Global.ISavableObject`1
  name: ISavableObject<T>
  nameWithType: ISavableObject<T>
  fullName: ISavableObject<T>
  nameWithType.vb: ISavableObject(Of T)
  fullName.vb: ISavableObject(Of T)
  name.vb: ISavableObject(Of T)
  spec.csharp:
  - uid: Global.ISavableObject`1
    name: ISavableObject
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.ISavableObject`1
    name: ISavableObject
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.AABBIntCollider
  commentId: T:Global.AABBIntCollider
  name: AABBIntCollider
  nameWithType: AABBIntCollider
  fullName: AABBIntCollider
- uid: Global.IntActor.Left*
  commentId: Overload:Global.IntActor.Left
  name: Left
  nameWithType: IntActor.Left
  fullName: IntActor.Left
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.IntActor.Right*
  commentId: Overload:Global.IntActor.Right
  name: Right
  nameWithType: IntActor.Right
  fullName: IntActor.Right
- uid: Global.IntActor.Top*
  commentId: Overload:Global.IntActor.Top
  name: Top
  nameWithType: IntActor.Top
  fullName: IntActor.Top
- uid: Global.IntActor.Bottom*
  commentId: Overload:Global.IntActor.Bottom
  name: Bottom
  nameWithType: IntActor.Bottom
  fullName: IntActor.Bottom
- uid: Global.IntActor.Size*
  commentId: Overload:Global.IntActor.Size
  name: Size
  nameWithType: IntActor.Size
  fullName: IntActor.Size
- uid: UnityEngine.Vector2Int
  commentId: T:UnityEngine.Vector2Int
  parent: UnityEngine
  isExternal: true
  name: Vector2Int
  nameWithType: Vector2Int
  fullName: UnityEngine.Vector2Int
- uid: UnityEngine.Vector2
  commentId: T:UnityEngine.Vector2
  parent: UnityEngine
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: Global.IntObject.Action
  commentId: T:Global.IntObject.Action
  name: IntObject.Action
  nameWithType: IntObject.Action
  fullName: IntObject.Action
  spec.csharp:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.Action
    name: Action
  spec.vb:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.Action
    name: Action
- uid: Global.IntActor.RidingSolid*
  commentId: Overload:Global.IntActor.RidingSolid
  name: RidingSolid
  nameWithType: IntActor.RidingSolid
  fullName: IntActor.RidingSolid
- uid: Global.IntSolid
  commentId: T:Global.IntSolid
  name: IntSolid
  nameWithType: IntSolid
  fullName: IntSolid
- uid: Global.IntActor.RidingTangent*
  commentId: Overload:Global.IntActor.RidingTangent
  name: RidingTangent
  nameWithType: IntActor.RidingTangent
  fullName: IntActor.RidingTangent
- uid: Global.IntActor.RidingNormal*
  commentId: Overload:Global.IntActor.RidingNormal
  name: RidingNormal
  nameWithType: IntActor.RidingNormal
  fullName: IntActor.RidingNormal
- uid: Global.IntActor.IsRidingFlatSurface*
  commentId: Overload:Global.IntActor.IsRidingFlatSurface
  name: IsRidingFlatSurface
  nameWithType: IntActor.IsRidingFlatSurface
  fullName: IntActor.IsRidingFlatSurface
- uid: Global.IntActor.Awake*
  commentId: Overload:Global.IntActor.Awake
  name: Awake
  nameWithType: IntActor.Awake
  fullName: IntActor.Awake
- uid: Global.IntActor.ManualInit*
  commentId: Overload:Global.IntActor.ManualInit
  name: ManualInit
  nameWithType: IntActor.ManualInit
  fullName: IntActor.ManualInit
- uid: Global.IntActor.GetAABBIntCollider*
  commentId: Overload:Global.IntActor.GetAABBIntCollider
  name: GetAABBIntCollider
  nameWithType: IntActor.GetAABBIntCollider
  fullName: IntActor.GetAABBIntCollider
- uid: Global.IntActor.EnsureAABBIntColliderSet*
  commentId: Overload:Global.IntActor.EnsureAABBIntColliderSet
  name: EnsureAABBIntColliderSet
  nameWithType: IntActor.EnsureAABBIntColliderSet
  fullName: IntActor.EnsureAABBIntColliderSet
- uid: Global.IntActor.IsRiding*
  commentId: Overload:Global.IntActor.IsRiding
  name: IsRiding
  nameWithType: IntActor.IsRiding
  fullName: IntActor.IsRiding
- uid: Global.IntActor.IsWalkingFlatOrUphill*
  commentId: Overload:Global.IntActor.IsWalkingFlatOrUphill
  name: IsWalkingFlatOrUphill
  nameWithType: IntActor.IsWalkingFlatOrUphill
  fullName: IntActor.IsWalkingFlatOrUphill
- uid: Global.IntActor.GetEffectiveVelocity*
  commentId: Overload:Global.IntActor.GetEffectiveVelocity
  name: GetEffectiveVelocity
  nameWithType: IntActor.GetEffectiveVelocity
  fullName: IntActor.GetEffectiveVelocity
- uid: Global.IntActor.IsTouchingWall*
  commentId: Overload:Global.IntActor.IsTouchingWall
  name: IsTouchingWall
  nameWithType: IntActor.IsTouchingWall
  fullName: IntActor.IsTouchingWall
- uid: Global.IntMath.Direction
  commentId: T:Global.IntMath.Direction
  name: IntMath.Direction
  nameWithType: IntMath.Direction
  fullName: IntMath.Direction
  spec.csharp:
  - uid: Global.IntMath
    name: IntMath
  - name: .
  - uid: Global.IntMath.Direction
    name: Direction
  spec.vb:
  - uid: Global.IntMath
    name: IntMath
  - name: .
  - uid: Global.IntMath.Direction
    name: Direction
- uid: Global.IntActor.SolidContainsPoint*
  commentId: Overload:Global.IntActor.SolidContainsPoint
  name: SolidContainsPoint
  nameWithType: IntActor.SolidContainsPoint
  fullName: IntActor.SolidContainsPoint
- uid: Global.IntActor.RegisterOnTakeDamageCallback*
  commentId: Overload:Global.IntActor.RegisterOnTakeDamageCallback
  name: RegisterOnTakeDamageCallback
  nameWithType: IntActor.RegisterOnTakeDamageCallback
  fullName: IntActor.RegisterOnTakeDamageCallback
- uid: Global.IntActor.UnregisterOnTakeDamageCallback*
  commentId: Overload:Global.IntActor.UnregisterOnTakeDamageCallback
  name: UnregisterOnTakeDamageCallback
  nameWithType: IntActor.UnregisterOnTakeDamageCallback
  fullName: IntActor.UnregisterOnTakeDamageCallback
- uid: Global.IntActor.OnTakeDamage*
  commentId: Overload:Global.IntActor.OnTakeDamage
  name: OnTakeDamage
  nameWithType: IntActor.OnTakeDamage
  fullName: IntActor.OnTakeDamage
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.IntActor.TakeDamage*
  commentId: Overload:Global.IntActor.TakeDamage
  name: TakeDamage
  nameWithType: IntActor.TakeDamage
  fullName: IntActor.TakeDamage
- uid: Global.DamageType
  commentId: T:Global.DamageType
  name: DamageType
  nameWithType: DamageType
  fullName: DamageType
- uid: Global.IntActor.ResetAuraCollisionMap*
  commentId: Overload:Global.IntActor.ResetAuraCollisionMap
  name: ResetAuraCollisionMap
  nameWithType: IntActor.ResetAuraCollisionMap
  fullName: IntActor.ResetAuraCollisionMap
- uid: Global.IntActor.ResetActorCollisionMap*
  commentId: Overload:Global.IntActor.ResetActorCollisionMap
  name: ResetActorCollisionMap
  nameWithType: IntActor.ResetActorCollisionMap
  fullName: IntActor.ResetActorCollisionMap
- uid: Global.IntActor.ResetCollisionMap*
  commentId: Overload:Global.IntActor.ResetCollisionMap
  name: ResetCollisionMap
  nameWithType: IntActor.ResetCollisionMap
  fullName: IntActor.ResetCollisionMap
- uid: Global.IntActor.ResetCollisionsAfterTime*
  commentId: Overload:Global.IntActor.ResetCollisionsAfterTime
  name: ResetCollisionsAfterTime
  nameWithType: IntActor.ResetCollisionsAfterTime
  fullName: IntActor.ResetCollisionsAfterTime
- uid: Global.IntActor.SetCollisionMapValue*
  commentId: Overload:Global.IntActor.SetCollisionMapValue
  name: SetCollisionMapValue
  nameWithType: IntActor.SetCollisionMapValue
  fullName: IntActor.SetCollisionMapValue
- uid: Global.IntActor.GetCollisionMapValue*
  commentId: Overload:Global.IntActor.GetCollisionMapValue
  name: GetCollisionMapValue
  nameWithType: IntActor.GetCollisionMapValue
  fullName: IntActor.GetCollisionMapValue
- uid: Global.IntActor.Squish*
  commentId: Overload:Global.IntActor.Squish
  name: Squish
  nameWithType: IntActor.Squish
  fullName: IntActor.Squish
- uid: Global.IntActor.OnTriggerStart*
  commentId: Overload:Global.IntActor.OnTriggerStart
  name: OnTriggerStart
  nameWithType: IntActor.OnTriggerStart
  fullName: IntActor.OnTriggerStart
- uid: Global.IntTrigger
  commentId: T:Global.IntTrigger
  name: IntTrigger
  nameWithType: IntTrigger
  fullName: IntTrigger
- uid: Global.IntActor.OnTriggerEnd*
  commentId: Overload:Global.IntActor.OnTriggerEnd
  name: OnTriggerEnd
  nameWithType: IntActor.OnTriggerEnd
  fullName: IntActor.OnTriggerEnd
- uid: Global.IntActor.OnActor*
  commentId: Overload:Global.IntActor.OnActor
  name: OnActor
  nameWithType: IntActor.OnActor
  fullName: IntActor.OnActor
- uid: Global.IntActor
  commentId: T:Global.IntActor
  name: IntActor
  nameWithType: IntActor
  fullName: IntActor
- uid: Global.IntActor.GetVelocity*
  commentId: Overload:Global.IntActor.GetVelocity
  name: GetVelocity
  nameWithType: IntActor.GetVelocity
  fullName: IntActor.GetVelocity
- uid: Global.IntActor.CheckGrounded*
  commentId: Overload:Global.IntActor.CheckGrounded
  name: CheckGrounded
  nameWithType: IntActor.CheckGrounded
  fullName: IntActor.CheckGrounded
- uid: Global.IntActor.GroundActor*
  commentId: Overload:Global.IntActor.GroundActor
  name: GroundActor
  nameWithType: IntActor.GroundActor
  fullName: IntActor.GroundActor
- uid: Global.IntActor.CheckOnWall*
  commentId: Overload:Global.IntActor.CheckOnWall
  name: CheckOnWall
  nameWithType: IntActor.CheckOnWall
  fullName: IntActor.CheckOnWall
- uid: Global.IntActor.DropDownOneWay*
  commentId: Overload:Global.IntActor.DropDownOneWay
  name: DropDownOneWay
  nameWithType: IntActor.DropDownOneWay
  fullName: IntActor.DropDownOneWay
- uid: Global.IntActor.activeWater*
  commentId: Overload:Global.IntActor.activeWater
  name: activeWater
  nameWithType: IntActor.activeWater
  fullName: IntActor.activeWater
- uid: Global.WaterComponent
  commentId: T:Global.WaterComponent
  name: WaterComponent
  nameWithType: WaterComponent
  fullName: WaterComponent
- uid: Global.IntActor.GetSubmergedPercentage*
  commentId: Overload:Global.IntActor.GetSubmergedPercentage
  name: GetSubmergedPercentage
  nameWithType: IntActor.GetSubmergedPercentage
  fullName: IntActor.GetSubmergedPercentage
- uid: Global.IntActor.IsInWater*
  commentId: Overload:Global.IntActor.IsInWater
  name: IsInWater
  nameWithType: IntActor.IsInWater
  fullName: IntActor.IsInWater
- uid: Global.IntActor.OnEnterWater*
  commentId: Overload:Global.IntActor.OnEnterWater
  name: OnEnterWater
  nameWithType: IntActor.OnEnterWater
  fullName: IntActor.OnEnterWater
- uid: Global.IntActor.OnExitWater*
  commentId: Overload:Global.IntActor.OnExitWater
  name: OnExitWater
  nameWithType: IntActor.OnExitWater
  fullName: IntActor.OnExitWater
- uid: Global.IntActor.ApplyWind*
  commentId: Overload:Global.IntActor.ApplyWind
  name: ApplyWind
  nameWithType: IntActor.ApplyWind
  fullName: IntActor.ApplyWind
- uid: Global.IntActor.RemoveWind*
  commentId: Overload:Global.IntActor.RemoveWind
  name: RemoveWind
  nameWithType: IntActor.RemoveWind
  fullName: IntActor.RemoveWind
- uid: Global.IntActor.ResolvePosition*
  commentId: Overload:Global.IntActor.ResolvePosition
  name: ResolvePosition
  nameWithType: IntActor.ResolvePosition
  fullName: IntActor.ResolvePosition
- uid: Global.IntObject.ActorAction
  commentId: T:Global.IntObject.ActorAction
  name: IntObject.ActorAction
  nameWithType: IntObject.ActorAction
  fullName: IntObject.ActorAction
  spec.csharp:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  spec.vb:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.ActorAction
    name: ActorAction
- uid: Global.IntObject.TriggerAction
  commentId: T:Global.IntObject.TriggerAction
  name: IntObject.TriggerAction
  nameWithType: IntObject.TriggerAction
  fullName: IntObject.TriggerAction
  spec.csharp:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  spec.vb:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
- uid: Global.IntActor.ResolvePositionNoSlide*
  commentId: Overload:Global.IntActor.ResolvePositionNoSlide
  name: ResolvePositionNoSlide
  nameWithType: IntActor.ResolvePositionNoSlide
  fullName: IntActor.ResolvePositionNoSlide
- uid: Global.IntActor.EfficientMove*
  commentId: Overload:Global.IntActor.EfficientMove
  name: EfficientMove
  nameWithType: IntActor.EfficientMove
  fullName: IntActor.EfficientMove
- uid: Global.IntObject.SolidAction
  commentId: T:Global.IntObject.SolidAction
  name: IntObject.SolidAction
  nameWithType: IntObject.SolidAction
  fullName: IntObject.SolidAction
  spec.csharp:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  spec.vb:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.SolidAction
    name: SolidAction
- uid: Global.IntActor.MoveX*
  commentId: Overload:Global.IntActor.MoveX
  name: MoveX
  nameWithType: IntActor.MoveX
  fullName: IntActor.MoveX
- uid: Global.IntActor.MoveY*
  commentId: Overload:Global.IntActor.MoveY
  name: MoveY
  nameWithType: IntActor.MoveY
  fullName: IntActor.MoveY
- uid: Global.IntActor.getIntersectParameters*
  commentId: Overload:Global.IntActor.getIntersectParameters
  name: getIntersectParameters
  nameWithType: IntActor.getIntersectParameters
  fullName: IntActor.getIntersectParameters
- uid: System.ValueTuple{System.Single,System.Single}
  commentId: T:System.ValueTuple{System.Single,System.Single}
  parent: System
  definition: System.ValueTuple`2
  name: (float intersectStep, float nextIntersect)
  nameWithType: (float intersectStep, float nextIntersect)
  fullName: (float intersectStep, float nextIntersect)
  nameWithType.vb: (intersectStep As Single, nextIntersect As Single)
  fullName.vb: (intersectStep As Single, nextIntersect As Single)
  name.vb: (intersectStep As Single, nextIntersect As Single)
  spec.csharp:
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{System.Single,System.Single}.intersectStep
    name: intersectStep
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{System.Single,System.Single}.nextIntersect
    name: nextIntersect
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Single,System.Single}.intersectStep
    name: intersectStep
  - name: " "
  - name: As
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Single,System.Single}.nextIntersect
    name: nextIntersect
  - name: " "
  - name: As
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: Global.IntActor.NotifyObjectKilled*
  commentId: Overload:Global.IntActor.NotifyObjectKilled
  name: NotifyObjectKilled
  nameWithType: IntActor.NotifyObjectKilled
  fullName: IntActor.NotifyObjectKilled
- uid: Global.IntActor.OnSpike*
  commentId: Overload:Global.IntActor.OnSpike
  name: OnSpike
  nameWithType: IntActor.OnSpike
  fullName: IntActor.OnSpike
- uid: Global.IntActor.SlantMove*
  commentId: Overload:Global.IntActor.SlantMove
  name: SlantMove
  nameWithType: IntActor.SlantMove
  fullName: IntActor.SlantMove
- uid: Global.IntActor.CheckActorTriggerCollisions*
  commentId: Overload:Global.IntActor.CheckActorTriggerCollisions
  name: CheckActorTriggerCollisions
  nameWithType: IntActor.CheckActorTriggerCollisions
  fullName: IntActor.CheckActorTriggerCollisions
- uid: Global.IntActor.CheckActorInteractableCollisions*
  commentId: Overload:Global.IntActor.CheckActorInteractableCollisions
  name: CheckActorInteractableCollisions
  nameWithType: IntActor.CheckActorInteractableCollisions
  fullName: IntActor.CheckActorInteractableCollisions
- uid: Global.IntActor.SimpleMove*
  commentId: Overload:Global.IntActor.SimpleMove
  name: SimpleMove
  nameWithType: IntActor.SimpleMove
  fullName: IntActor.SimpleMove
- uid: Global.IntActor.ComplexMove*
  commentId: Overload:Global.IntActor.ComplexMove
  name: ComplexMove
  nameWithType: IntActor.ComplexMove
  fullName: IntActor.ComplexMove
