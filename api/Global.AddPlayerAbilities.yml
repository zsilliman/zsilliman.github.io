### YamlMime:ManagedReference
items:
- uid: Global.AddPlayerAbilities
  commentId: T:Global.AddPlayerAbilities
  id: AddPlayerAbilities
  parent: Global
  children:
  - Global.AddPlayerAbilities.AddDash
  - Global.AddPlayerAbilities.AddDoubleJump
  - Global.AddPlayerAbilities.AddInteract
  - Global.AddPlayerAbilities.AddJump
  - Global.AddPlayerAbilities.AddWalk
  - Global.AddPlayerAbilities.OnEnter(Section,Section)
  - Global.AddPlayerAbilities.OnExit(Section,Section)
  - Global.AddPlayerAbilities.otherSection
  - Global.AddPlayerAbilities.SetPlayerAbilities
  - Global.AddPlayerAbilities.TriggerOnExit
  langs:
  - csharp
  - vb
  name: AddPlayerAbilities
  nameWithType: AddPlayerAbilities
  fullName: AddPlayerAbilities
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddPlayerAbilities
    path: ../Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
    startLine: 9
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nThis class does not &quot;set&quot; player abilities. It never removes abilities. It only adds them.\nThe bool determines whether to add the ability\n"
  example: []
  syntax:
    content: 'public class AddPlayerAbilities : TriggeredAction'
    content.vb: Public Class AddPlayerAbilities Inherits TriggeredAction
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.Component
  - UnityEngine.Behaviour
  - UnityEngine.MonoBehaviour
  - Global.TriggeredAction
  inheritedMembers:
  - Global.TriggeredAction.OnSafeEnter(Section)
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
- uid: Global.AddPlayerAbilities.TriggerOnExit
  commentId: F:Global.AddPlayerAbilities.TriggerOnExit
  id: TriggerOnExit
  parent: Global.AddPlayerAbilities
  langs:
  - csharp
  - vb
  name: TriggerOnExit
  nameWithType: AddPlayerAbilities.TriggerOnExit
  fullName: AddPlayerAbilities.TriggerOnExit
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: TriggerOnExit
    path: ../Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
    startLine: 12
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool TriggerOnExit
    return:
      type: System.Boolean
    content.vb: Public TriggerOnExit As Boolean
- uid: Global.AddPlayerAbilities.otherSection
  commentId: F:Global.AddPlayerAbilities.otherSection
  id: otherSection
  parent: Global.AddPlayerAbilities
  langs:
  - csharp
  - vb
  name: otherSection
  nameWithType: AddPlayerAbilities.otherSection
  fullName: AddPlayerAbilities.otherSection
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: otherSection
    path: ../Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
    startLine: 13
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public Section otherSection
    return:
      type: Global.Section
    content.vb: Public otherSection As Section
- uid: Global.AddPlayerAbilities.AddWalk
  commentId: F:Global.AddPlayerAbilities.AddWalk
  id: AddWalk
  parent: Global.AddPlayerAbilities
  langs:
  - csharp
  - vb
  name: AddWalk
  nameWithType: AddPlayerAbilities.AddWalk
  fullName: AddPlayerAbilities.AddWalk
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddWalk
    path: ../Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
    startLine: 14
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool AddWalk
    return:
      type: System.Boolean
    content.vb: Public AddWalk As Boolean
- uid: Global.AddPlayerAbilities.AddJump
  commentId: F:Global.AddPlayerAbilities.AddJump
  id: AddJump
  parent: Global.AddPlayerAbilities
  langs:
  - csharp
  - vb
  name: AddJump
  nameWithType: AddPlayerAbilities.AddJump
  fullName: AddPlayerAbilities.AddJump
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddJump
    path: ../Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
    startLine: 15
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool AddJump
    return:
      type: System.Boolean
    content.vb: Public AddJump As Boolean
- uid: Global.AddPlayerAbilities.AddDoubleJump
  commentId: F:Global.AddPlayerAbilities.AddDoubleJump
  id: AddDoubleJump
  parent: Global.AddPlayerAbilities
  langs:
  - csharp
  - vb
  name: AddDoubleJump
  nameWithType: AddPlayerAbilities.AddDoubleJump
  fullName: AddPlayerAbilities.AddDoubleJump
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddDoubleJump
    path: ../Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
    startLine: 16
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool AddDoubleJump
    return:
      type: System.Boolean
    content.vb: Public AddDoubleJump As Boolean
- uid: Global.AddPlayerAbilities.AddDash
  commentId: F:Global.AddPlayerAbilities.AddDash
  id: AddDash
  parent: Global.AddPlayerAbilities
  langs:
  - csharp
  - vb
  name: AddDash
  nameWithType: AddPlayerAbilities.AddDash
  fullName: AddPlayerAbilities.AddDash
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddDash
    path: ../Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
    startLine: 17
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool AddDash
    return:
      type: System.Boolean
    content.vb: Public AddDash As Boolean
- uid: Global.AddPlayerAbilities.AddInteract
  commentId: F:Global.AddPlayerAbilities.AddInteract
  id: AddInteract
  parent: Global.AddPlayerAbilities
  langs:
  - csharp
  - vb
  name: AddInteract
  nameWithType: AddPlayerAbilities.AddInteract
  fullName: AddPlayerAbilities.AddInteract
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddInteract
    path: ../Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
    startLine: 18
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool AddInteract
    return:
      type: System.Boolean
    content.vb: Public AddInteract As Boolean
- uid: Global.AddPlayerAbilities.OnEnter(Section,Section)
  commentId: M:Global.AddPlayerAbilities.OnEnter(Section,Section)
  id: OnEnter(Section,Section)
  parent: Global.AddPlayerAbilities
  langs:
  - csharp
  - vb
  name: OnEnter(Section, Section)
  nameWithType: AddPlayerAbilities.OnEnter(Section, Section)
  fullName: AddPlayerAbilities.OnEnter(Section, Section)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnEnter
    path: ../Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
    startLine: 20
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void OnEnter(Section from, Section to)
    parameters:
    - id: from
      type: Global.Section
    - id: to
      type: Global.Section
    content.vb: Public Overrides Sub OnEnter(from As Section, [to] As Section)
  overridden: Global.TriggeredAction.OnEnter(Section,Section)
  overload: Global.AddPlayerAbilities.OnEnter*
- uid: Global.AddPlayerAbilities.OnExit(Section,Section)
  commentId: M:Global.AddPlayerAbilities.OnExit(Section,Section)
  id: OnExit(Section,Section)
  parent: Global.AddPlayerAbilities
  langs:
  - csharp
  - vb
  name: OnExit(Section, Section)
  nameWithType: AddPlayerAbilities.OnExit(Section, Section)
  fullName: AddPlayerAbilities.OnExit(Section, Section)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnExit
    path: ../Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
    startLine: 26
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void OnExit(Section from, Section to)
    parameters:
    - id: from
      type: Global.Section
    - id: to
      type: Global.Section
    content.vb: Public Overrides Sub OnExit(from As Section, [to] As Section)
  overridden: Global.TriggeredAction.OnExit(Section,Section)
  overload: Global.AddPlayerAbilities.OnExit*
- uid: Global.AddPlayerAbilities.SetPlayerAbilities
  commentId: M:Global.AddPlayerAbilities.SetPlayerAbilities
  id: SetPlayerAbilities
  parent: Global.AddPlayerAbilities
  langs:
  - csharp
  - vb
  name: SetPlayerAbilities()
  nameWithType: AddPlayerAbilities.SetPlayerAbilities()
  fullName: AddPlayerAbilities.SetPlayerAbilities()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SetPlayerAbilities
    path: ../Assets/Objects & Components/World/Section/TriggeredAction/AddPlayerAbilities.cs
    startLine: 32
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected void SetPlayerAbilities()
    content.vb: Protected Sub SetPlayerAbilities()
  overload: Global.AddPlayerAbilities.SetPlayerAbilities*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.Component
  commentId: T:UnityEngine.Component
  parent: UnityEngine
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: UnityEngine.Component
- uid: UnityEngine.Behaviour
  commentId: T:UnityEngine.Behaviour
  parent: UnityEngine
  isExternal: true
  name: Behaviour
  nameWithType: Behaviour
  fullName: UnityEngine.Behaviour
- uid: UnityEngine.MonoBehaviour
  commentId: T:UnityEngine.MonoBehaviour
  parent: UnityEngine
  isExternal: true
  name: MonoBehaviour
  nameWithType: MonoBehaviour
  fullName: UnityEngine.MonoBehaviour
- uid: Global.TriggeredAction
  commentId: T:Global.TriggeredAction
  name: TriggeredAction
  nameWithType: TriggeredAction
  fullName: TriggeredAction
- uid: Global.TriggeredAction.OnSafeEnter(Section)
  commentId: M:Global.TriggeredAction.OnSafeEnter(Section)
  parent: Global.TriggeredAction
  name: OnSafeEnter(Section)
  nameWithType: TriggeredAction.OnSafeEnter(Section)
  fullName: TriggeredAction.OnSafeEnter(Section)
  spec.csharp:
  - uid: Global.TriggeredAction.OnSafeEnter(Section)
    name: OnSafeEnter
  - name: (
  - uid: Global.Section
    name: Section
  - name: )
  spec.vb:
  - uid: Global.TriggeredAction.OnSafeEnter(Section)
    name: OnSafeEnter
  - name: (
  - uid: Global.Section
    name: Section
  - name: )
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.Section
  commentId: T:Global.Section
  name: Section
  nameWithType: Section
  fullName: Section
- uid: Global.TriggeredAction.OnEnter(Section,Section)
  commentId: M:Global.TriggeredAction.OnEnter(Section,Section)
  parent: Global.TriggeredAction
  name: OnEnter(Section, Section)
  nameWithType: TriggeredAction.OnEnter(Section, Section)
  fullName: TriggeredAction.OnEnter(Section, Section)
  spec.csharp:
  - uid: Global.TriggeredAction.OnEnter(Section,Section)
    name: OnEnter
  - name: (
  - uid: Global.Section
    name: Section
  - name: ','
  - name: " "
  - uid: Global.Section
    name: Section
  - name: )
  spec.vb:
  - uid: Global.TriggeredAction.OnEnter(Section,Section)
    name: OnEnter
  - name: (
  - uid: Global.Section
    name: Section
  - name: ','
  - name: " "
  - uid: Global.Section
    name: Section
  - name: )
- uid: Global.AddPlayerAbilities.OnEnter*
  commentId: Overload:Global.AddPlayerAbilities.OnEnter
  name: OnEnter
  nameWithType: AddPlayerAbilities.OnEnter
  fullName: AddPlayerAbilities.OnEnter
- uid: Global.TriggeredAction.OnExit(Section,Section)
  commentId: M:Global.TriggeredAction.OnExit(Section,Section)
  parent: Global.TriggeredAction
  name: OnExit(Section, Section)
  nameWithType: TriggeredAction.OnExit(Section, Section)
  fullName: TriggeredAction.OnExit(Section, Section)
  spec.csharp:
  - uid: Global.TriggeredAction.OnExit(Section,Section)
    name: OnExit
  - name: (
  - uid: Global.Section
    name: Section
  - name: ','
  - name: " "
  - uid: Global.Section
    name: Section
  - name: )
  spec.vb:
  - uid: Global.TriggeredAction.OnExit(Section,Section)
    name: OnExit
  - name: (
  - uid: Global.Section
    name: Section
  - name: ','
  - name: " "
  - uid: Global.Section
    name: Section
  - name: )
- uid: Global.AddPlayerAbilities.OnExit*
  commentId: Overload:Global.AddPlayerAbilities.OnExit
  name: OnExit
  nameWithType: AddPlayerAbilities.OnExit
  fullName: AddPlayerAbilities.OnExit
- uid: Global.AddPlayerAbilities.SetPlayerAbilities*
  commentId: Overload:Global.AddPlayerAbilities.SetPlayerAbilities
  name: SetPlayerAbilities
  nameWithType: AddPlayerAbilities.SetPlayerAbilities
  fullName: AddPlayerAbilities.SetPlayerAbilities
