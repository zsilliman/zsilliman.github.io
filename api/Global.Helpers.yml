### YamlMime:ManagedReference
items:
- uid: Global.Helpers
  commentId: T:Global.Helpers
  id: Helpers
  parent: Global
  children:
  - Global.Helpers.ArrayToString``1(``0[])
  - Global.Helpers.ComputeEffectiveProbabilities``1(System.Collections.Generic.List{``0},System.Func{``0,System.Single},System.Action{``0,System.Single})
  - Global.Helpers.FindComponentInParents``1(UnityEngine.GameObject,System.Boolean,System.Int32)
  - Global.Helpers.FindComponentWithInterface``1(UnityEngine.GameObject)
  - Global.Helpers.GenericCastTo``1(System.Object,``0)
  - Global.Helpers.GetAllChildrenRecursive(UnityEngine.Transform,System.Collections.Generic.List{UnityEngine.Transform})
  - Global.Helpers.GetContainingSection(UnityEngine.GameObject)
  - Global.Helpers.GetFirstOverlappingSection(SetPiece)
  - Global.Helpers.GetGameObjectPath(UnityEngine.GameObject)
  - Global.Helpers.GetSectionPosFromWorldPos(UnityEngine.GameObject,UnityEngine.Vector2Int)
  - Global.Helpers.GetWorldPosFromSectionPos(UnityEngine.GameObject,UnityEngine.Vector2Int)
  - Global.Helpers.InsetRect(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)
  - Global.Helpers.InsetRect(UnityEngine.Rect,System.Single,System.Single)
  - Global.Helpers.InsetRect(UnityEngine.Rect,System.Single)
  - Global.Helpers.IsFieldVisible(System.Reflection.FieldInfo,System.Object)
  - Global.Helpers.ListToString``1(System.Collections.Generic.List{``0})
  - Global.Helpers.ObjectToDebugString(System.String,System.Object,System.Int32,System.Int32)
  - Global.Helpers.RandomEnum``1
  - Global.Helpers.RecursiveListFieldsOfType``1(System.Collections.Generic.List{Helpers.FieldObjectInfo},System.Object,System.Int32,System.Boolean)
  - Global.Helpers.Shuffle``1(System.Collections.Generic.IList{``0})
  - Global.Helpers.WeightedRandomSelect``1(System.Collections.Generic.List{``0},System.Func{``0,System.Single})
  langs:
  - csharp
  - vb
  name: Helpers
  nameWithType: Helpers
  fullName: Helpers
  type: Class
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Helpers
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 8
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static class Helpers
    content.vb: Public Module Helpers
  inheritance:
  - System.Object
- uid: Global.Helpers.ListToString``1(System.Collections.Generic.List{``0})
  commentId: M:Global.Helpers.ListToString``1(System.Collections.Generic.List{``0})
  id: ListToString``1(System.Collections.Generic.List{``0})
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: ListToString<T>(List<T>)
  nameWithType: Helpers.ListToString<T>(List<T>)
  fullName: Helpers.ListToString<T>(System.Collections.Generic.List<T>)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ListToString
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 11
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static string ListToString<T>(List<T> lst)
    parameters:
    - id: lst
      type: System.Collections.Generic.List{{T}}
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Shared Function ListToString(Of T)(lst As List(Of T)) As String
  overload: Global.Helpers.ListToString*
  nameWithType.vb: Helpers.ListToString(Of T)(List(Of T))
  fullName.vb: Helpers.ListToString(Of T)(System.Collections.Generic.List(Of T))
  name.vb: ListToString(Of T)(List(Of T))
- uid: Global.Helpers.ArrayToString``1(``0[])
  commentId: M:Global.Helpers.ArrayToString``1(``0[])
  id: ArrayToString``1(``0[])
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: ArrayToString<T>(T[])
  nameWithType: Helpers.ArrayToString<T>(T[])
  fullName: Helpers.ArrayToString<T>(T[])
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ArrayToString
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 23
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static string ArrayToString<T>(T[] arr)
    parameters:
    - id: arr
      type: '{T}[]'
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Shared Function ArrayToString(Of T)(arr As T()) As String
  overload: Global.Helpers.ArrayToString*
  nameWithType.vb: Helpers.ArrayToString(Of T)(T())
  fullName.vb: Helpers.ArrayToString(Of T)(T())
  name.vb: ArrayToString(Of T)(T())
- uid: Global.Helpers.Shuffle``1(System.Collections.Generic.IList{``0})
  commentId: M:Global.Helpers.Shuffle``1(System.Collections.Generic.IList{``0})
  id: Shuffle``1(System.Collections.Generic.IList{``0})
  isExtensionMethod: true
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: Shuffle<T>(IList<T>)
  nameWithType: Helpers.Shuffle<T>(IList<T>)
  fullName: Helpers.Shuffle<T>(System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Shuffle
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 36
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static void Shuffle<T>(this IList<T> list)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Shuffle(Of T)(list As IList(Of T))
  overload: Global.Helpers.Shuffle*
  nameWithType.vb: Helpers.Shuffle(Of T)(IList(Of T))
  fullName.vb: Helpers.Shuffle(Of T)(System.Collections.Generic.IList(Of T))
  name.vb: Shuffle(Of T)(IList(Of T))
- uid: Global.Helpers.RandomEnum``1
  commentId: M:Global.Helpers.RandomEnum``1
  id: RandomEnum``1
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: RandomEnum<T>()
  nameWithType: Helpers.RandomEnum<T>()
  fullName: Helpers.RandomEnum<T>()
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RandomEnum
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 49
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: 'public static T RandomEnum<T>() where T : Enum'
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function RandomEnum(Of T As [Enum])() As T
  overload: Global.Helpers.RandomEnum*
  nameWithType.vb: Helpers.RandomEnum(Of T)()
  fullName.vb: Helpers.RandomEnum(Of T)()
  name.vb: RandomEnum(Of T)()
- uid: Global.Helpers.WeightedRandomSelect``1(System.Collections.Generic.List{``0},System.Func{``0,System.Single})
  commentId: M:Global.Helpers.WeightedRandomSelect``1(System.Collections.Generic.List{``0},System.Func{``0,System.Single})
  id: WeightedRandomSelect``1(System.Collections.Generic.List{``0},System.Func{``0,System.Single})
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: WeightedRandomSelect<T>(List<T>, Func<T, float>)
  nameWithType: Helpers.WeightedRandomSelect<T>(List<T>, Func<T, float>)
  fullName: Helpers.WeightedRandomSelect<T>(System.Collections.Generic.List<T>, System.Func<T, float>)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: WeightedRandomSelect
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 56
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static int WeightedRandomSelect<T>(List<T> lst, Func<T, float> GetWeight)
    parameters:
    - id: lst
      type: System.Collections.Generic.List{{T}}
    - id: GetWeight
      type: System.Func{{T},System.Single}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function WeightedRandomSelect(Of T)(lst As List(Of T), GetWeight As Func(Of T, Single)) As Integer
  overload: Global.Helpers.WeightedRandomSelect*
  nameWithType.vb: Helpers.WeightedRandomSelect(Of T)(List(Of T), Func(Of T, Single))
  fullName.vb: Helpers.WeightedRandomSelect(Of T)(System.Collections.Generic.List(Of T), System.Func(Of T, Single))
  name.vb: WeightedRandomSelect(Of T)(List(Of T), Func(Of T, Single))
- uid: Global.Helpers.ComputeEffectiveProbabilities``1(System.Collections.Generic.List{``0},System.Func{``0,System.Single},System.Action{``0,System.Single})
  commentId: M:Global.Helpers.ComputeEffectiveProbabilities``1(System.Collections.Generic.List{``0},System.Func{``0,System.Single},System.Action{``0,System.Single})
  id: ComputeEffectiveProbabilities``1(System.Collections.Generic.List{``0},System.Func{``0,System.Single},System.Action{``0,System.Single})
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: ComputeEffectiveProbabilities<T>(List<T>, Func<T, float>, Action<T, float>)
  nameWithType: Helpers.ComputeEffectiveProbabilities<T>(List<T>, Func<T, float>, Action<T, float>)
  fullName: Helpers.ComputeEffectiveProbabilities<T>(System.Collections.Generic.List<T>, System.Func<T, float>, System.Action<T, float>)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ComputeEffectiveProbabilities
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 83
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static void ComputeEffectiveProbabilities<T>(List<T> lst, Func<T, float> GetWeight, Action<T, float> SetProbability)
    parameters:
    - id: lst
      type: System.Collections.Generic.List{{T}}
    - id: GetWeight
      type: System.Func{{T},System.Single}
    - id: SetProbability
      type: System.Action{{T},System.Single}
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ComputeEffectiveProbabilities(Of T)(lst As List(Of T), GetWeight As Func(Of T, Single), SetProbability As Action(Of T, Single))
  overload: Global.Helpers.ComputeEffectiveProbabilities*
  nameWithType.vb: Helpers.ComputeEffectiveProbabilities(Of T)(List(Of T), Func(Of T, Single), Action(Of T, Single))
  fullName.vb: Helpers.ComputeEffectiveProbabilities(Of T)(System.Collections.Generic.List(Of T), System.Func(Of T, Single), System.Action(Of T, Single))
  name.vb: ComputeEffectiveProbabilities(Of T)(List(Of T), Func(Of T, Single), Action(Of T, Single))
- uid: Global.Helpers.GetGameObjectPath(UnityEngine.GameObject)
  commentId: M:Global.Helpers.GetGameObjectPath(UnityEngine.GameObject)
  id: GetGameObjectPath(UnityEngine.GameObject)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: GetGameObjectPath(GameObject)
  nameWithType: Helpers.GetGameObjectPath(GameObject)
  fullName: Helpers.GetGameObjectPath(UnityEngine.GameObject)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetGameObjectPath
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 103
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static string GetGameObjectPath(GameObject obj)
    parameters:
    - id: obj
      type: UnityEngine.GameObject
    return:
      type: System.String
    content.vb: Public Shared Function GetGameObjectPath(obj As GameObject) As String
  overload: Global.Helpers.GetGameObjectPath*
- uid: Global.Helpers.FindComponentWithInterface``1(UnityEngine.GameObject)
  commentId: M:Global.Helpers.FindComponentWithInterface``1(UnityEngine.GameObject)
  id: FindComponentWithInterface``1(UnityEngine.GameObject)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: FindComponentWithInterface<T>(GameObject)
  nameWithType: Helpers.FindComponentWithInterface<T>(GameObject)
  fullName: Helpers.FindComponentWithInterface<T>(UnityEngine.GameObject)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: FindComponentWithInterface
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 114
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static T FindComponentWithInterface<T>(GameObject go)
    parameters:
    - id: go
      type: UnityEngine.GameObject
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function FindComponentWithInterface(Of T)(go As GameObject) As T
  overload: Global.Helpers.FindComponentWithInterface*
  nameWithType.vb: Helpers.FindComponentWithInterface(Of T)(GameObject)
  fullName.vb: Helpers.FindComponentWithInterface(Of T)(UnityEngine.GameObject)
  name.vb: FindComponentWithInterface(Of T)(GameObject)
- uid: Global.Helpers.FindComponentInParents``1(UnityEngine.GameObject,System.Boolean,System.Int32)
  commentId: M:Global.Helpers.FindComponentInParents``1(UnityEngine.GameObject,System.Boolean,System.Int32)
  id: FindComponentInParents``1(UnityEngine.GameObject,System.Boolean,System.Int32)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: FindComponentInParents<T>(GameObject, bool, int)
  nameWithType: Helpers.FindComponentInParents<T>(GameObject, bool, int)
  fullName: Helpers.FindComponentInParents<T>(UnityEngine.GameObject, bool, int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: FindComponentInParents
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 128
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: 'public static T FindComponentInParents<T>(GameObject obj, bool includeSelf = false, int maxDepth = 7) where T : MonoBehaviour'
    parameters:
    - id: obj
      type: UnityEngine.GameObject
    - id: includeSelf
      type: System.Boolean
    - id: maxDepth
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function FindComponentInParents(Of T As MonoBehaviour)(obj As GameObject, includeSelf As Boolean = False, maxDepth As Integer = 7) As T
  overload: Global.Helpers.FindComponentInParents*
  nameWithType.vb: Helpers.FindComponentInParents(Of T)(GameObject, Boolean, Integer)
  fullName.vb: Helpers.FindComponentInParents(Of T)(UnityEngine.GameObject, Boolean, Integer)
  name.vb: FindComponentInParents(Of T)(GameObject, Boolean, Integer)
- uid: Global.Helpers.GetAllChildrenRecursive(UnityEngine.Transform,System.Collections.Generic.List{UnityEngine.Transform})
  commentId: M:Global.Helpers.GetAllChildrenRecursive(UnityEngine.Transform,System.Collections.Generic.List{UnityEngine.Transform})
  id: GetAllChildrenRecursive(UnityEngine.Transform,System.Collections.Generic.List{UnityEngine.Transform})
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: GetAllChildrenRecursive(Transform, List<Transform>)
  nameWithType: Helpers.GetAllChildrenRecursive(Transform, List<Transform>)
  fullName: Helpers.GetAllChildrenRecursive(UnityEngine.Transform, System.Collections.Generic.List<UnityEngine.Transform>)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetAllChildrenRecursive
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 161
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nPopulates list with all children of the specified transform. Includes nested children\n"
  example: []
  syntax:
    content: public static void GetAllChildrenRecursive(Transform trm, List<Transform> children)
    parameters:
    - id: trm
      type: UnityEngine.Transform
      description: The root transform to iterate over
    - id: children
      type: System.Collections.Generic.List{UnityEngine.Transform}
      description: The output list
    content.vb: Public Shared Sub GetAllChildrenRecursive(trm As Transform, children As List(Of Transform))
  overload: Global.Helpers.GetAllChildrenRecursive*
  nameWithType.vb: Helpers.GetAllChildrenRecursive(Transform, List(Of Transform))
  fullName.vb: Helpers.GetAllChildrenRecursive(UnityEngine.Transform, System.Collections.Generic.List(Of UnityEngine.Transform))
  name.vb: GetAllChildrenRecursive(Transform, List(Of Transform))
- uid: Global.Helpers.GenericCastTo``1(System.Object,``0)
  commentId: M:Global.Helpers.GenericCastTo``1(System.Object,``0)
  id: GenericCastTo``1(System.Object,``0)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: GenericCastTo<T>(object, T)
  nameWithType: Helpers.GenericCastTo<T>(object, T)
  fullName: Helpers.GenericCastTo<T>(object, T)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GenericCastTo
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 181
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nConverts input to Type of default value or given as typeparam T\n"
  example: []
  syntax:
    content: public static T GenericCastTo<T>(object input, T defaultValue)
    parameters:
    - id: input
      type: System.Object
      description: Input that need to be converted to specified type
    - id: defaultValue
      type: '{T}'
      description: defaultValue will be returned in case of value is null or any exception occures
    typeParameters:
    - id: T
      description: typeparam is the type in which value will be returned, it could be any type eg. int, string, bool, decimal etc.
    return:
      type: '{T}'
      description: Input is converted in Type of default value or given as typeparam T and returned
    content.vb: Public Shared Function GenericCastTo(Of T)(input As Object, defaultValue As T) As T
  overload: Global.Helpers.GenericCastTo*
  nameWithType.vb: Helpers.GenericCastTo(Of T)(Object, T)
  fullName.vb: Helpers.GenericCastTo(Of T)(Object, T)
  name.vb: GenericCastTo(Of T)(Object, T)
- uid: Global.Helpers.GetContainingSection(UnityEngine.GameObject)
  commentId: M:Global.Helpers.GetContainingSection(UnityEngine.GameObject)
  id: GetContainingSection(UnityEngine.GameObject)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: GetContainingSection(GameObject)
  nameWithType: Helpers.GetContainingSection(GameObject)
  fullName: Helpers.GetContainingSection(UnityEngine.GameObject)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetContainingSection
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 219
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Section GetContainingSection(GameObject go)
    parameters:
    - id: go
      type: UnityEngine.GameObject
    return:
      type: Global.Section
    content.vb: Public Shared Function GetContainingSection(go As GameObject) As Section
  overload: Global.Helpers.GetContainingSection*
- uid: Global.Helpers.GetFirstOverlappingSection(SetPiece)
  commentId: M:Global.Helpers.GetFirstOverlappingSection(SetPiece)
  id: GetFirstOverlappingSection(SetPiece)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: GetFirstOverlappingSection(SetPiece)
  nameWithType: Helpers.GetFirstOverlappingSection(SetPiece)
  fullName: Helpers.GetFirstOverlappingSection(SetPiece)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetFirstOverlappingSection
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 231
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Section GetFirstOverlappingSection(SetPiece set_piece)
    parameters:
    - id: set_piece
      type: Global.SetPiece
    return:
      type: Global.Section
    content.vb: Public Shared Function GetFirstOverlappingSection(set_piece As SetPiece) As Section
  overload: Global.Helpers.GetFirstOverlappingSection*
- uid: Global.Helpers.GetWorldPosFromSectionPos(UnityEngine.GameObject,UnityEngine.Vector2Int)
  commentId: M:Global.Helpers.GetWorldPosFromSectionPos(UnityEngine.GameObject,UnityEngine.Vector2Int)
  id: GetWorldPosFromSectionPos(UnityEngine.GameObject,UnityEngine.Vector2Int)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: GetWorldPosFromSectionPos(GameObject, Vector2Int)
  nameWithType: Helpers.GetWorldPosFromSectionPos(GameObject, Vector2Int)
  fullName: Helpers.GetWorldPosFromSectionPos(UnityEngine.GameObject, UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetWorldPosFromSectionPos
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 245
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector2Int GetWorldPosFromSectionPos(GameObject go, Vector2Int pos)
    parameters:
    - id: go
      type: UnityEngine.GameObject
    - id: pos
      type: UnityEngine.Vector2Int
    return:
      type: UnityEngine.Vector2Int
    content.vb: Public Shared Function GetWorldPosFromSectionPos(go As GameObject, pos As Vector2Int) As Vector2Int
  overload: Global.Helpers.GetWorldPosFromSectionPos*
- uid: Global.Helpers.GetSectionPosFromWorldPos(UnityEngine.GameObject,UnityEngine.Vector2Int)
  commentId: M:Global.Helpers.GetSectionPosFromWorldPos(UnityEngine.GameObject,UnityEngine.Vector2Int)
  id: GetSectionPosFromWorldPos(UnityEngine.GameObject,UnityEngine.Vector2Int)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: GetSectionPosFromWorldPos(GameObject, Vector2Int)
  nameWithType: Helpers.GetSectionPosFromWorldPos(GameObject, Vector2Int)
  fullName: Helpers.GetSectionPosFromWorldPos(UnityEngine.GameObject, UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetSectionPosFromWorldPos
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 262
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector2Int GetSectionPosFromWorldPos(GameObject go, Vector2Int pos)
    parameters:
    - id: go
      type: UnityEngine.GameObject
    - id: pos
      type: UnityEngine.Vector2Int
    return:
      type: UnityEngine.Vector2Int
    content.vb: Public Shared Function GetSectionPosFromWorldPos(go As GameObject, pos As Vector2Int) As Vector2Int
  overload: Global.Helpers.GetSectionPosFromWorldPos*
- uid: Global.Helpers.ObjectToDebugString(System.String,System.Object,System.Int32,System.Int32)
  commentId: M:Global.Helpers.ObjectToDebugString(System.String,System.Object,System.Int32,System.Int32)
  id: ObjectToDebugString(System.String,System.Object,System.Int32,System.Int32)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: ObjectToDebugString(string, object, int, int)
  nameWithType: Helpers.ObjectToDebugString(string, object, int, int)
  fullName: Helpers.ObjectToDebugString(string, object, int, int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ObjectToDebugString
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 278
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static string ObjectToDebugString(string name, object val, int max_depth = 5, int depth = 0)
    parameters:
    - id: name
      type: System.String
    - id: val
      type: System.Object
    - id: max_depth
      type: System.Int32
    - id: depth
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Shared Function ObjectToDebugString(name As String, val As Object, max_depth As Integer = 5, depth As Integer = 0) As String
  overload: Global.Helpers.ObjectToDebugString*
  nameWithType.vb: Helpers.ObjectToDebugString(String, Object, Integer, Integer)
  fullName.vb: Helpers.ObjectToDebugString(String, Object, Integer, Integer)
  name.vb: ObjectToDebugString(String, Object, Integer, Integer)
- uid: Global.Helpers.RecursiveListFieldsOfType``1(System.Collections.Generic.List{Helpers.FieldObjectInfo},System.Object,System.Int32,System.Boolean)
  commentId: M:Global.Helpers.RecursiveListFieldsOfType``1(System.Collections.Generic.List{Helpers.FieldObjectInfo},System.Object,System.Int32,System.Boolean)
  id: RecursiveListFieldsOfType``1(System.Collections.Generic.List{Helpers.FieldObjectInfo},System.Object,System.Int32,System.Boolean)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: RecursiveListFieldsOfType<T>(List<FieldObjectInfo>, object, int, bool)
  nameWithType: Helpers.RecursiveListFieldsOfType<T>(List<Helpers.FieldObjectInfo>, object, int, bool)
  fullName: Helpers.RecursiveListFieldsOfType<T>(System.Collections.Generic.List<Helpers.FieldObjectInfo>, object, int, bool)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RecursiveListFieldsOfType
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 358
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static void RecursiveListFieldsOfType<T>(List<Helpers.FieldObjectInfo> fields, object obj, int max_depth = 6, bool checkVisibility = true)
    parameters:
    - id: fields
      type: System.Collections.Generic.List{Helpers.FieldObjectInfo}
    - id: obj
      type: System.Object
    - id: max_depth
      type: System.Int32
    - id: checkVisibility
      type: System.Boolean
    typeParameters:
    - id: T
    content.vb: Public Shared Sub RecursiveListFieldsOfType(Of T)(fields As List(Of Helpers.FieldObjectInfo), obj As Object, max_depth As Integer = 6, checkVisibility As Boolean = True)
  overload: Global.Helpers.RecursiveListFieldsOfType*
  nameWithType.vb: Helpers.RecursiveListFieldsOfType(Of T)(List(Of Helpers.FieldObjectInfo), Object, Integer, Boolean)
  fullName.vb: Helpers.RecursiveListFieldsOfType(Of T)(System.Collections.Generic.List(Of Helpers.FieldObjectInfo), Object, Integer, Boolean)
  name.vb: RecursiveListFieldsOfType(Of T)(List(Of FieldObjectInfo), Object, Integer, Boolean)
- uid: Global.Helpers.IsFieldVisible(System.Reflection.FieldInfo,System.Object)
  commentId: M:Global.Helpers.IsFieldVisible(System.Reflection.FieldInfo,System.Object)
  id: IsFieldVisible(System.Reflection.FieldInfo,System.Object)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: IsFieldVisible(FieldInfo, object)
  nameWithType: Helpers.IsFieldVisible(FieldInfo, object)
  fullName: Helpers.IsFieldVisible(System.Reflection.FieldInfo, object)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: IsFieldVisible
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 401
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static bool IsFieldVisible(FieldInfo field, object obj)
    parameters:
    - id: field
      type: System.Reflection.FieldInfo
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsFieldVisible(field As FieldInfo, obj As Object) As Boolean
  overload: Global.Helpers.IsFieldVisible*
  nameWithType.vb: Helpers.IsFieldVisible(FieldInfo, Object)
  fullName.vb: Helpers.IsFieldVisible(System.Reflection.FieldInfo, Object)
  name.vb: IsFieldVisible(FieldInfo, Object)
- uid: Global.Helpers.InsetRect(UnityEngine.Rect,System.Single)
  commentId: M:Global.Helpers.InsetRect(UnityEngine.Rect,System.Single)
  id: InsetRect(UnityEngine.Rect,System.Single)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: InsetRect(Rect, float)
  nameWithType: Helpers.InsetRect(Rect, float)
  fullName: Helpers.InsetRect(UnityEngine.Rect, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: InsetRect
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 424
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Rect InsetRect(Rect rect, float padding)
    parameters:
    - id: rect
      type: UnityEngine.Rect
    - id: padding
      type: System.Single
    return:
      type: UnityEngine.Rect
    content.vb: Public Shared Function InsetRect(rect As Rect, padding As Single) As Rect
  overload: Global.Helpers.InsetRect*
  nameWithType.vb: Helpers.InsetRect(Rect, Single)
  fullName.vb: Helpers.InsetRect(UnityEngine.Rect, Single)
  name.vb: InsetRect(Rect, Single)
- uid: Global.Helpers.InsetRect(UnityEngine.Rect,System.Single,System.Single)
  commentId: M:Global.Helpers.InsetRect(UnityEngine.Rect,System.Single,System.Single)
  id: InsetRect(UnityEngine.Rect,System.Single,System.Single)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: InsetRect(Rect, float, float)
  nameWithType: Helpers.InsetRect(Rect, float, float)
  fullName: Helpers.InsetRect(UnityEngine.Rect, float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: InsetRect
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 429
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Rect InsetRect(Rect rect, float paddingY, float paddingX)
    parameters:
    - id: rect
      type: UnityEngine.Rect
    - id: paddingY
      type: System.Single
    - id: paddingX
      type: System.Single
    return:
      type: UnityEngine.Rect
    content.vb: Public Shared Function InsetRect(rect As Rect, paddingY As Single, paddingX As Single) As Rect
  overload: Global.Helpers.InsetRect*
  nameWithType.vb: Helpers.InsetRect(Rect, Single, Single)
  fullName.vb: Helpers.InsetRect(UnityEngine.Rect, Single, Single)
  name.vb: InsetRect(Rect, Single, Single)
- uid: Global.Helpers.InsetRect(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)
  commentId: M:Global.Helpers.InsetRect(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)
  id: InsetRect(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)
  parent: Global.Helpers
  langs:
  - csharp
  - vb
  name: InsetRect(Rect, float, float, float, float)
  nameWithType: Helpers.InsetRect(Rect, float, float, float, float)
  fullName: Helpers.InsetRect(UnityEngine.Rect, float, float, float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Helpers.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: InsetRect
    path: ../Assets/Framework/Util/Helpers.cs
    startLine: 434
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Rect InsetRect(Rect rect, float paddingLeft, float paddingRight, float paddingTop, float paddingBottom)
    parameters:
    - id: rect
      type: UnityEngine.Rect
    - id: paddingLeft
      type: System.Single
    - id: paddingRight
      type: System.Single
    - id: paddingTop
      type: System.Single
    - id: paddingBottom
      type: System.Single
    return:
      type: UnityEngine.Rect
    content.vb: Public Shared Function InsetRect(rect As Rect, paddingLeft As Single, paddingRight As Single, paddingTop As Single, paddingBottom As Single) As Rect
  overload: Global.Helpers.InsetRect*
  nameWithType.vb: Helpers.InsetRect(Rect, Single, Single, Single, Single)
  fullName.vb: Helpers.InsetRect(UnityEngine.Rect, Single, Single, Single, Single)
  name.vb: InsetRect(Rect, Single, Single, Single, Single)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Helpers.ListToString*
  commentId: Overload:Global.Helpers.ListToString
  name: ListToString
  nameWithType: Helpers.ListToString
  fullName: Helpers.ListToString
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: Global.Helpers.ArrayToString*
  commentId: Overload:Global.Helpers.ArrayToString
  name: ArrayToString
  nameWithType: Helpers.ArrayToString
  fullName: Helpers.ArrayToString
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: Global.Helpers.Shuffle*
  commentId: Overload:Global.Helpers.Shuffle
  name: Shuffle
  nameWithType: Helpers.Shuffle
  fullName: Helpers.Shuffle
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.Helpers.RandomEnum*
  commentId: Overload:Global.Helpers.RandomEnum
  name: RandomEnum
  nameWithType: Helpers.RandomEnum
  fullName: Helpers.RandomEnum
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Global.Helpers.WeightedRandomSelect*
  commentId: Overload:Global.Helpers.WeightedRandomSelect
  name: WeightedRandomSelect
  nameWithType: Helpers.WeightedRandomSelect
  fullName: Helpers.WeightedRandomSelect
- uid: System.Func{{T},System.Single}
  commentId: T:System.Func{``0,System.Single}
  parent: System
  definition: System.Func`2
  name: Func<T, float>
  nameWithType: Func<T, float>
  fullName: System.Func<T, float>
  nameWithType.vb: Func(Of T, Single)
  fullName.vb: System.Func(Of T, Single)
  name.vb: Func(Of T, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: Global.Helpers.ComputeEffectiveProbabilities*
  commentId: Overload:Global.Helpers.ComputeEffectiveProbabilities
  name: ComputeEffectiveProbabilities
  nameWithType: Helpers.ComputeEffectiveProbabilities
  fullName: Helpers.ComputeEffectiveProbabilities
- uid: System.Action{{T},System.Single}
  commentId: T:System.Action{``0,System.Single}
  parent: System
  definition: System.Action`2
  name: Action<T, float>
  nameWithType: Action<T, float>
  fullName: System.Action<T, float>
  nameWithType.vb: Action(Of T, Single)
  fullName.vb: System.Action(Of T, Single)
  name.vb: Action(Of T, Single)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: Global.Helpers.GetGameObjectPath*
  commentId: Overload:Global.Helpers.GetGameObjectPath
  name: GetGameObjectPath
  nameWithType: Helpers.GetGameObjectPath
  fullName: Helpers.GetGameObjectPath
- uid: UnityEngine.GameObject
  commentId: T:UnityEngine.GameObject
  parent: UnityEngine
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: UnityEngine.GameObject
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.Helpers.FindComponentWithInterface*
  commentId: Overload:Global.Helpers.FindComponentWithInterface
  name: FindComponentWithInterface
  nameWithType: Helpers.FindComponentWithInterface
  fullName: Helpers.FindComponentWithInterface
- uid: Global.Helpers.FindComponentInParents*
  commentId: Overload:Global.Helpers.FindComponentInParents
  name: FindComponentInParents
  nameWithType: Helpers.FindComponentInParents
  fullName: Helpers.FindComponentInParents
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.Helpers.GetAllChildrenRecursive*
  commentId: Overload:Global.Helpers.GetAllChildrenRecursive
  name: GetAllChildrenRecursive
  nameWithType: Helpers.GetAllChildrenRecursive
  fullName: Helpers.GetAllChildrenRecursive
- uid: UnityEngine.Transform
  commentId: T:UnityEngine.Transform
  parent: UnityEngine
  isExternal: true
  name: Transform
  nameWithType: Transform
  fullName: UnityEngine.Transform
- uid: System.Collections.Generic.List{UnityEngine.Transform}
  commentId: T:System.Collections.Generic.List{UnityEngine.Transform}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Transform>
  nameWithType: List<Transform>
  fullName: System.Collections.Generic.List<UnityEngine.Transform>
  nameWithType.vb: List(Of Transform)
  fullName.vb: System.Collections.Generic.List(Of UnityEngine.Transform)
  name.vb: List(Of Transform)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: UnityEngine.Transform
    name: Transform
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: UnityEngine.Transform
    name: Transform
    isExternal: true
  - name: )
- uid: Global.Helpers.GenericCastTo*
  commentId: Overload:Global.Helpers.GenericCastTo
  name: GenericCastTo
  nameWithType: Helpers.GenericCastTo
  fullName: Helpers.GenericCastTo
- uid: Global.Helpers.GetContainingSection*
  commentId: Overload:Global.Helpers.GetContainingSection
  name: GetContainingSection
  nameWithType: Helpers.GetContainingSection
  fullName: Helpers.GetContainingSection
- uid: Global.Section
  commentId: T:Global.Section
  name: Section
  nameWithType: Section
  fullName: Section
- uid: Global.Helpers.GetFirstOverlappingSection*
  commentId: Overload:Global.Helpers.GetFirstOverlappingSection
  name: GetFirstOverlappingSection
  nameWithType: Helpers.GetFirstOverlappingSection
  fullName: Helpers.GetFirstOverlappingSection
- uid: Global.SetPiece
  commentId: T:Global.SetPiece
  name: SetPiece
  nameWithType: SetPiece
  fullName: SetPiece
- uid: Global.Helpers.GetWorldPosFromSectionPos*
  commentId: Overload:Global.Helpers.GetWorldPosFromSectionPos
  name: GetWorldPosFromSectionPos
  nameWithType: Helpers.GetWorldPosFromSectionPos
  fullName: Helpers.GetWorldPosFromSectionPos
- uid: UnityEngine.Vector2Int
  commentId: T:UnityEngine.Vector2Int
  parent: UnityEngine
  isExternal: true
  name: Vector2Int
  nameWithType: Vector2Int
  fullName: UnityEngine.Vector2Int
- uid: Global.Helpers.GetSectionPosFromWorldPos*
  commentId: Overload:Global.Helpers.GetSectionPosFromWorldPos
  name: GetSectionPosFromWorldPos
  nameWithType: Helpers.GetSectionPosFromWorldPos
  fullName: Helpers.GetSectionPosFromWorldPos
- uid: Global.Helpers.ObjectToDebugString*
  commentId: Overload:Global.Helpers.ObjectToDebugString
  name: ObjectToDebugString
  nameWithType: Helpers.ObjectToDebugString
  fullName: Helpers.ObjectToDebugString
- uid: Global.Helpers.RecursiveListFieldsOfType*
  commentId: Overload:Global.Helpers.RecursiveListFieldsOfType
  name: RecursiveListFieldsOfType
  nameWithType: Helpers.RecursiveListFieldsOfType
  fullName: Helpers.RecursiveListFieldsOfType
- uid: System.Collections.Generic.List{Helpers.FieldObjectInfo}
  commentId: T:System.Collections.Generic.List{Helpers.FieldObjectInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Helpers.FieldObjectInfo>
  nameWithType: List<Helpers.FieldObjectInfo>
  fullName: System.Collections.Generic.List<Helpers.FieldObjectInfo>
  nameWithType.vb: List(Of Helpers.FieldObjectInfo)
  fullName.vb: System.Collections.Generic.List(Of Helpers.FieldObjectInfo)
  name.vb: List(Of Helpers.FieldObjectInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.Helpers
    name: Helpers
  - name: .
  - uid: Global.Helpers.FieldObjectInfo
    name: FieldObjectInfo
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Helpers
    name: Helpers
  - name: .
  - uid: Global.Helpers.FieldObjectInfo
    name: FieldObjectInfo
  - name: )
- uid: Global.Helpers.IsFieldVisible*
  commentId: Overload:Global.Helpers.IsFieldVisible
  name: IsFieldVisible
  nameWithType: Helpers.IsFieldVisible
  fullName: Helpers.IsFieldVisible
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
- uid: Global.Helpers.InsetRect*
  commentId: Overload:Global.Helpers.InsetRect
  name: InsetRect
  nameWithType: Helpers.InsetRect
  fullName: Helpers.InsetRect
- uid: UnityEngine.Rect
  commentId: T:UnityEngine.Rect
  parent: UnityEngine
  isExternal: true
  name: Rect
  nameWithType: Rect
  fullName: UnityEngine.Rect
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
