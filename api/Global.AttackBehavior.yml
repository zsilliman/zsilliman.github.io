### YamlMime:ManagedReference
items:
- uid: Global.AttackBehavior
  commentId: T:Global.AttackBehavior
  id: AttackBehavior
  parent: Global
  children:
  - Global.AttackBehavior.AttackType
  - Global.AttackBehavior.Beacon
  - Global.AttackBehavior.Charge
  - Global.AttackBehavior.Detonate
  - Global.AttackBehavior.Dip
  - Global.AttackBehavior.RegisterBehaviors(ModularEnemy)
  - Global.AttackBehavior.SetInitialBehavior(ModularEnemy)
  - Global.AttackBehavior.ShootProjectile
  - Global.AttackBehavior.Spawn
  langs:
  - csharp
  - vb
  name: AttackBehavior
  nameWithType: AttackBehavior
  fullName: AttackBehavior
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AttackBehavior
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
    startLine: 9
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Serializable]

      public class AttackBehavior : ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>
    content.vb: >-
      <Serializable>

      Public Class AttackBehavior Inherits ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType)
  inheritance:
  - System.Object
  - Global.ModularEnemy.EnemyBehaviorInterface
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  inheritedMembers:
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.CurrentBehavior
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisteredBehaviors
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisteredAlwaysRun
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehavior(AttackBehaviorType,ModularEnemy.EnemyBehaviorInterface)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.Start(ModularEnemy)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.Update
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.DrawGizmos(ModularEnemy)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnRestart
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.HasStarted(AttackBehaviorType)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnKill(ModularEnemy,System.Boolean)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnResetObject(ModularEnemy)
  - Global.ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  - Global.ModularEnemy.EnemyBehaviorInterface.self
  - Global.ModularEnemy.EnemyBehaviorInterface.Started
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
- uid: Global.AttackBehavior.AttackType
  commentId: F:Global.AttackBehavior.AttackType
  id: AttackType
  parent: Global.AttackBehavior
  langs:
  - csharp
  - vb
  name: AttackType
  nameWithType: AttackBehavior.AttackType
  fullName: AttackBehavior.AttackType
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AttackType
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
    startLine: 13
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public AttackBehaviorType AttackType
    return:
      type: Global.AttackBehaviorType
    content.vb: Public AttackType As AttackBehaviorType
- uid: Global.AttackBehavior.Charge
  commentId: F:Global.AttackBehavior.Charge
  id: Charge
  parent: Global.AttackBehavior
  langs:
  - csharp
  - vb
  name: Charge
  nameWithType: AttackBehavior.Charge
  fullName: AttackBehavior.Charge
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Charge
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
    startLine: 17
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [ConditionalShow("AttackType", 1)]

      public ChargeBehavior Charge
    return:
      type: Global.ChargeBehavior
    content.vb: >-
      <ConditionalShow("AttackType", 1)>

      Public Charge As ChargeBehavior
  attributes:
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: AttackType
    - type: System.Int32
      value: 1
- uid: Global.AttackBehavior.ShootProjectile
  commentId: F:Global.AttackBehavior.ShootProjectile
  id: ShootProjectile
  parent: Global.AttackBehavior
  langs:
  - csharp
  - vb
  name: ShootProjectile
  nameWithType: AttackBehavior.ShootProjectile
  fullName: AttackBehavior.ShootProjectile
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ShootProjectile
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
    startLine: 19
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [ConditionalShow("AttackType", 2)]

      public ShootProjectiveBehavior ShootProjectile
    return:
      type: Global.ShootProjectiveBehavior
    content.vb: >-
      <ConditionalShow("AttackType", 2)>

      Public ShootProjectile As ShootProjectiveBehavior
  attributes:
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: AttackType
    - type: System.Int32
      value: 2
- uid: Global.AttackBehavior.Detonate
  commentId: F:Global.AttackBehavior.Detonate
  id: Detonate
  parent: Global.AttackBehavior
  langs:
  - csharp
  - vb
  name: Detonate
  nameWithType: AttackBehavior.Detonate
  fullName: AttackBehavior.Detonate
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Detonate
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
    startLine: 21
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [ConditionalShow("AttackType", 3)]

      public DetonateBehavior Detonate
    return:
      type: Global.DetonateBehavior
    content.vb: >-
      <ConditionalShow("AttackType", 3)>

      Public Detonate As DetonateBehavior
  attributes:
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: AttackType
    - type: System.Int32
      value: 3
- uid: Global.AttackBehavior.Beacon
  commentId: F:Global.AttackBehavior.Beacon
  id: Beacon
  parent: Global.AttackBehavior
  langs:
  - csharp
  - vb
  name: Beacon
  nameWithType: AttackBehavior.Beacon
  fullName: AttackBehavior.Beacon
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Beacon
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
    startLine: 23
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [ConditionalShow("AttackType", 4)]

      public BeaconBehavior Beacon
    return:
      type: Global.BeaconBehavior
    content.vb: >-
      <ConditionalShow("AttackType", 4)>

      Public Beacon As BeaconBehavior
  attributes:
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: AttackType
    - type: System.Int32
      value: 4
- uid: Global.AttackBehavior.Spawn
  commentId: F:Global.AttackBehavior.Spawn
  id: Spawn
  parent: Global.AttackBehavior
  langs:
  - csharp
  - vb
  name: Spawn
  nameWithType: AttackBehavior.Spawn
  fullName: AttackBehavior.Spawn
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Spawn
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
    startLine: 25
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [ConditionalShow("AttackType", 5)]

      public SpawnBehavior Spawn
    return:
      type: Global.SpawnBehavior
    content.vb: >-
      <ConditionalShow("AttackType", 5)>

      Public Spawn As SpawnBehavior
  attributes:
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: AttackType
    - type: System.Int32
      value: 5
- uid: Global.AttackBehavior.Dip
  commentId: F:Global.AttackBehavior.Dip
  id: Dip
  parent: Global.AttackBehavior
  langs:
  - csharp
  - vb
  name: Dip
  nameWithType: AttackBehavior.Dip
  fullName: AttackBehavior.Dip
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Dip
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
    startLine: 27
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [ConditionalShow("AttackType", 6)]

      public DipBehavior Dip
    return:
      type: Global.DipBehavior
    content.vb: >-
      <ConditionalShow("AttackType", 6)>

      Public Dip As DipBehavior
  attributes:
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: AttackType
    - type: System.Int32
      value: 6
- uid: Global.AttackBehavior.RegisterBehaviors(ModularEnemy)
  commentId: M:Global.AttackBehavior.RegisterBehaviors(ModularEnemy)
  id: RegisterBehaviors(ModularEnemy)
  parent: Global.AttackBehavior
  langs:
  - csharp
  - vb
  name: RegisterBehaviors(ModularEnemy)
  nameWithType: AttackBehavior.RegisterBehaviors(ModularEnemy)
  fullName: AttackBehavior.RegisterBehaviors(ModularEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RegisterBehaviors
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
    startLine: 31
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void RegisterBehaviors(ModularEnemy enemy)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    content.vb: Public Overrides Sub RegisterBehaviors(enemy As ModularEnemy)
  overridden: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehaviors(ModularEnemy)
  overload: Global.AttackBehavior.RegisterBehaviors*
- uid: Global.AttackBehavior.SetInitialBehavior(ModularEnemy)
  commentId: M:Global.AttackBehavior.SetInitialBehavior(ModularEnemy)
  id: SetInitialBehavior(ModularEnemy)
  parent: Global.AttackBehavior
  langs:
  - csharp
  - vb
  name: SetInitialBehavior(ModularEnemy)
  nameWithType: AttackBehavior.SetInitialBehavior(ModularEnemy)
  fullName: AttackBehavior.SetInitialBehavior(ModularEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SetInitialBehavior
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Attack/AttackBehavior.cs
    startLine: 42
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void SetInitialBehavior(ModularEnemy enemy)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    content.vb: Public Overrides Sub SetInitialBehavior(enemy As ModularEnemy)
  overridden: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.SetInitialBehavior(ModularEnemy)
  overload: Global.AttackBehavior.SetInitialBehavior*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.ModularEnemy.EnemyBehaviorInterface
  commentId: T:Global.ModularEnemy.EnemyBehaviorInterface
  name: ModularEnemy.EnemyBehaviorInterface
  nameWithType: ModularEnemy.EnemyBehaviorInterface
  fullName: ModularEnemy.EnemyBehaviorInterface
  spec.csharp:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  spec.vb:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  commentId: T:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  name: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType)
  name.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType)
  spec.csharp:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
    name: EnemyBehaviorInterfaceManager
  - name: <
  - uid: Global.AttackBehaviorType
    name: AttackBehaviorType
  - name: '>'
  spec.vb:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
    name: EnemyBehaviorInterfaceManager
  - name: (
  - name: Of
  - name: " "
  - uid: Global.AttackBehaviorType
    name: AttackBehaviorType
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.CurrentBehavior
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.CurrentBehavior
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.CurrentBehavior
  name: CurrentBehavior
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.CurrentBehavior
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.CurrentBehavior
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).CurrentBehavior
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).CurrentBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisteredBehaviors
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisteredBehaviors
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredBehaviors
  name: RegisteredBehaviors
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.RegisteredBehaviors
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.RegisteredBehaviors
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).RegisteredBehaviors
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).RegisteredBehaviors
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisteredAlwaysRun
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisteredAlwaysRun
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredAlwaysRun
  name: RegisteredAlwaysRun
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.RegisteredAlwaysRun
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.RegisteredAlwaysRun
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).RegisteredAlwaysRun
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).RegisteredAlwaysRun
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehavior(AttackBehaviorType,ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehavior(AttackBehaviorType,ModularEnemy.EnemyBehaviorInterface)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
  name: RegisterBehavior(AttackBehaviorType, EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.RegisterBehavior(AttackBehaviorType, ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.RegisterBehavior(AttackBehaviorType, ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).RegisterBehavior(AttackBehaviorType, ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).RegisterBehavior(AttackBehaviorType, ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehavior(AttackBehaviorType,ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehavior
  - name: (
  - uid: Global.AttackBehaviorType
    name: AttackBehaviorType
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehavior(AttackBehaviorType,ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehavior
  - name: (
  - uid: Global.AttackBehaviorType
    name: AttackBehaviorType
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  name: RegisterBehaviorAlwaysRun(EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehaviorAlwaysRun
  - name: (
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehaviorAlwaysRun
  - name: (
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.Start(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.Start(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
  name: Start(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.Start(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.Start(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).Start(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).Start(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.Update
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.Update
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
  name: Update()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.Update()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.Update()
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).Update()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).Update()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.Update
    name: Update
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.Update
    name: Update
  - name: (
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.DrawGizmos(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.DrawGizmos(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
  name: DrawGizmos(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.DrawGizmos(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.DrawGizmos(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).DrawGizmos(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).DrawGizmos(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnRestart
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnRestart
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
  name: OnRestart()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.OnRestart()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.OnRestart()
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).OnRestart()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).OnRestart()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnRestart
    name: OnRestart
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnRestart
    name: OnRestart
  - name: (
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.HasStarted(AttackBehaviorType)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.HasStarted(AttackBehaviorType)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
  name: HasStarted(AttackBehaviorType)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.HasStarted(AttackBehaviorType)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.HasStarted(AttackBehaviorType)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).HasStarted(AttackBehaviorType)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).HasStarted(AttackBehaviorType)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.HasStarted(AttackBehaviorType)
    name: HasStarted
  - name: (
  - uid: Global.AttackBehaviorType
    name: AttackBehaviorType
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.HasStarted(AttackBehaviorType)
    name: HasStarted
  - name: (
  - uid: Global.AttackBehaviorType
    name: AttackBehaviorType
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnKill(ModularEnemy,System.Boolean)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnKill(ModularEnemy,System.Boolean)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
  name: OnKill(ModularEnemy, bool)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.OnKill(ModularEnemy, bool)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.OnKill(ModularEnemy, bool)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).OnKill(ModularEnemy, Boolean)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).OnKill(ModularEnemy, Boolean)
  name.vb: OnKill(ModularEnemy, Boolean)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnResetObject(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnResetObject(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
  name: OnResetObject(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.OnResetObject(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.OnResetObject(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).OnResetObject(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).OnResetObject(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: ShowGizmos
  nameWithType: ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  fullName: ModularEnemy.EnemyBehaviorInterface.ShowGizmos
- uid: Global.ModularEnemy.EnemyBehaviorInterface.self
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterface.self
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: self
  nameWithType: ModularEnemy.EnemyBehaviorInterface.self
  fullName: ModularEnemy.EnemyBehaviorInterface.self
- uid: Global.ModularEnemy.EnemyBehaviorInterface.Started
  commentId: P:Global.ModularEnemy.EnemyBehaviorInterface.Started
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: Started
  nameWithType: ModularEnemy.EnemyBehaviorInterface.Started
  fullName: ModularEnemy.EnemyBehaviorInterface.Started
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  commentId: T:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  name: ModularEnemy.EnemyBehaviorInterfaceManager<T>
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T)
  name.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T)
  spec.csharp:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
    name: EnemyBehaviorInterfaceManager
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
    name: EnemyBehaviorInterfaceManager
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.CurrentBehavior
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.CurrentBehavior
  name: CurrentBehavior
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.CurrentBehavior
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.CurrentBehavior
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).CurrentBehavior
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).CurrentBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredBehaviors
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredBehaviors
  name: RegisteredBehaviors
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredBehaviors
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredBehaviors
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredBehaviors
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredBehaviors
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredAlwaysRun
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredAlwaysRun
  name: RegisteredAlwaysRun
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredAlwaysRun
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredAlwaysRun
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredAlwaysRun
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredAlwaysRun
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
  name: RegisterBehavior(T, EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehavior
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehavior
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  name: RegisterBehaviorAlwaysRun(EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehaviorAlwaysRun
  - name: (
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehaviorAlwaysRun
  - name: (
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
  name: Start(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Start(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Start(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Start(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Start(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
  name: Update()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Update()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Update()
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Update()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Update()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
    name: Update
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
    name: Update
  - name: (
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
  name: DrawGizmos(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.DrawGizmos(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.DrawGizmos(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).DrawGizmos(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).DrawGizmos(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
  name: OnRestart()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnRestart()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnRestart()
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnRestart()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnRestart()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
    name: OnRestart
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
    name: OnRestart
  - name: (
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
  name: HasStarted(T)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.HasStarted(T)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.HasStarted(T)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).HasStarted(T)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).HasStarted(T)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
    name: HasStarted
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
    name: HasStarted
  - name: (
  - name: T
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
  isExternal: true
  name: OnKill(ModularEnemy, bool)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnKill(ModularEnemy, bool)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnKill(ModularEnemy, bool)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnKill(ModularEnemy, Boolean)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnKill(ModularEnemy, Boolean)
  name.vb: OnKill(ModularEnemy, Boolean)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
  name: OnResetObject(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnResetObject(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnResetObject(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnResetObject(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnResetObject(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.AttackBehaviorType
  commentId: T:Global.AttackBehaviorType
  name: AttackBehaviorType
  nameWithType: AttackBehaviorType
  fullName: AttackBehaviorType
- uid: Global.ChargeBehavior
  commentId: T:Global.ChargeBehavior
  name: ChargeBehavior
  nameWithType: ChargeBehavior
  fullName: ChargeBehavior
- uid: Global.ShootProjectiveBehavior
  commentId: T:Global.ShootProjectiveBehavior
  name: ShootProjectiveBehavior
  nameWithType: ShootProjectiveBehavior
  fullName: ShootProjectiveBehavior
- uid: Global.DetonateBehavior
  commentId: T:Global.DetonateBehavior
  name: DetonateBehavior
  nameWithType: DetonateBehavior
  fullName: DetonateBehavior
- uid: Global.BeaconBehavior
  commentId: T:Global.BeaconBehavior
  name: BeaconBehavior
  nameWithType: BeaconBehavior
  fullName: BeaconBehavior
- uid: Global.SpawnBehavior
  commentId: T:Global.SpawnBehavior
  name: SpawnBehavior
  nameWithType: SpawnBehavior
  fullName: SpawnBehavior
- uid: Global.DipBehavior
  commentId: T:Global.DipBehavior
  name: DipBehavior
  nameWithType: DipBehavior
  fullName: DipBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehaviors(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehaviors(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
  name: RegisterBehaviors(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.RegisterBehaviors(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.RegisterBehaviors(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).RegisterBehaviors(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).RegisterBehaviors(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehaviors(ModularEnemy)
    name: RegisterBehaviors
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.RegisterBehaviors(ModularEnemy)
    name: RegisterBehaviors
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.AttackBehavior.RegisterBehaviors*
  commentId: Overload:Global.AttackBehavior.RegisterBehaviors
  name: RegisterBehaviors
  nameWithType: AttackBehavior.RegisterBehaviors
  fullName: AttackBehavior.RegisterBehaviors
- uid: Global.ModularEnemy
  commentId: T:Global.ModularEnemy
  name: ModularEnemy
  nameWithType: ModularEnemy
  fullName: ModularEnemy
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
  name: RegisterBehaviors(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviors(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviors(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviors(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviors(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
    name: RegisterBehaviors
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
    name: RegisterBehaviors
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.SetInitialBehavior(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.SetInitialBehavior(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
  name: SetInitialBehavior(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.SetInitialBehavior(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<AttackBehaviorType>.SetInitialBehavior(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).SetInitialBehavior(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of AttackBehaviorType).SetInitialBehavior(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.SetInitialBehavior(ModularEnemy)
    name: SetInitialBehavior
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{AttackBehaviorType}.SetInitialBehavior(ModularEnemy)
    name: SetInitialBehavior
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.AttackBehavior.SetInitialBehavior*
  commentId: Overload:Global.AttackBehavior.SetInitialBehavior
  name: SetInitialBehavior
  nameWithType: AttackBehavior.SetInitialBehavior
  fullName: AttackBehavior.SetInitialBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
  name: SetInitialBehavior(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.SetInitialBehavior(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.SetInitialBehavior(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).SetInitialBehavior(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).SetInitialBehavior(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
    name: SetInitialBehavior
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
    name: SetInitialBehavior
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
