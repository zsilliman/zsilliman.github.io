### YamlMime:ManagedReference
items:
- uid: Global.Triangulator
  commentId: T:Global.Triangulator
  id: Triangulator
  parent: Global
  children:
  - Global.Triangulator.#ctor(UnityEngine.Vector3[])
  - Global.Triangulator.Triangulate
  langs:
  - csharp
  - vb
  name: Triangulator
  nameWithType: Triangulator
  fullName: Triangulator
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/World/Weather/Water/Triangulator.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Triangulator
    path: ../Assets/Objects & Components/World/Weather/Water/Triangulator.cs
    startLine: 3
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public class Triangulator
    content.vb: Public Class Triangulator
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
- uid: Global.Triangulator.#ctor(UnityEngine.Vector3[])
  commentId: M:Global.Triangulator.#ctor(UnityEngine.Vector3[])
  id: '#ctor(UnityEngine.Vector3[])'
  parent: Global.Triangulator
  langs:
  - csharp
  - vb
  name: Triangulator(Vector3[])
  nameWithType: Triangulator.Triangulator(Vector3[])
  fullName: Triangulator.Triangulator(UnityEngine.Vector3[])
  type: Constructor
  source:
    remote:
      path: Assets/Objects & Components/World/Weather/Water/Triangulator.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: .ctor
    path: ../Assets/Objects & Components/World/Weather/Water/Triangulator.cs
    startLine: 7
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public Triangulator(Vector3[] points)
    parameters:
    - id: points
      type: UnityEngine.Vector3[]
    content.vb: Public Sub New(points As Vector3())
  overload: Global.Triangulator.#ctor*
  nameWithType.vb: Triangulator.New(Vector3())
  fullName.vb: Triangulator.New(UnityEngine.Vector3())
  name.vb: New(Vector3())
- uid: Global.Triangulator.Triangulate
  commentId: M:Global.Triangulator.Triangulate
  id: Triangulate
  parent: Global.Triangulator
  langs:
  - csharp
  - vb
  name: Triangulate()
  nameWithType: Triangulator.Triangulate()
  fullName: Triangulator.Triangulate()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/World/Weather/Water/Triangulator.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Triangulate
    path: ../Assets/Objects & Components/World/Weather/Water/Triangulator.cs
    startLine: 12
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public int[] Triangulate()
    return:
      type: System.Int32[]
    content.vb: Public Function Triangulate() As Integer()
  overload: Global.Triangulator.Triangulate*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.Triangulator.#ctor*
  commentId: Overload:Global.Triangulator.#ctor
  name: Triangulator
  nameWithType: Triangulator.Triangulator
  fullName: Triangulator.Triangulator
  nameWithType.vb: Triangulator.New
  fullName.vb: Triangulator.New
  name.vb: New
- uid: UnityEngine.Vector3[]
  isExternal: true
  name: Vector3[]
  nameWithType: Vector3[]
  fullName: UnityEngine.Vector3[]
  nameWithType.vb: Vector3()
  fullName.vb: UnityEngine.Vector3()
  name.vb: Vector3()
  spec.csharp:
  - uid: UnityEngine.Vector3
    name: Vector3
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: UnityEngine.Vector3
    name: Vector3
    isExternal: true
  - name: (
  - name: )
- uid: Global.Triangulator.Triangulate*
  commentId: Overload:Global.Triangulator.Triangulate
  name: Triangulate
  nameWithType: Triangulator.Triangulate
  fullName: Triangulator.Triangulate
- uid: System.Int32[]
  isExternal: true
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: (
  - name: )
