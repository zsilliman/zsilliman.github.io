### YamlMime:ManagedReference
items:
- uid: Global.EnemySpawnLocation
  commentId: T:Global.EnemySpawnLocation
  id: EnemySpawnLocation
  parent: Global
  children:
  - Global.EnemySpawnLocation.ColorMapping
  - Global.EnemySpawnLocation.SpawnBoundsVis
  - Global.EnemySpawnLocation.SpawnTypes
  langs:
  - csharp
  - vb
  name: EnemySpawnLocation
  nameWithType: EnemySpawnLocation
  fullName: EnemySpawnLocation
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/World/Section/Spawning/EnemySpawnLocation.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: EnemySpawnLocation
    path: ../Assets/Objects & Components/World/Section/Spawning/EnemySpawnLocation.cs
    startLine: 42
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: 'public class EnemySpawnLocation : MonoBehaviour'
    content.vb: Public Class EnemySpawnLocation Inherits MonoBehaviour
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.Component
  - UnityEngine.Behaviour
  - UnityEngine.MonoBehaviour
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
- uid: Global.EnemySpawnLocation.SpawnTypes
  commentId: F:Global.EnemySpawnLocation.SpawnTypes
  id: SpawnTypes
  parent: Global.EnemySpawnLocation
  langs:
  - csharp
  - vb
  name: SpawnTypes
  nameWithType: EnemySpawnLocation.SpawnTypes
  fullName: EnemySpawnLocation.SpawnTypes
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/World/Section/Spawning/EnemySpawnLocation.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SpawnTypes
    path: ../Assets/Objects & Components/World/Section/Spawning/EnemySpawnLocation.cs
    startLine: 44
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public HashSet<ProceduralSpawner.EnemySpawnType> SpawnTypes
    return:
      type: System.Collections.Generic.HashSet{ProceduralSpawner.EnemySpawnType}
    content.vb: Public SpawnTypes As HashSet(Of ProceduralSpawner.EnemySpawnType)
- uid: Global.EnemySpawnLocation.SpawnBoundsVis
  commentId: F:Global.EnemySpawnLocation.SpawnBoundsVis
  id: SpawnBoundsVis
  parent: Global.EnemySpawnLocation
  langs:
  - csharp
  - vb
  name: SpawnBoundsVis
  nameWithType: EnemySpawnLocation.SpawnBoundsVis
  fullName: EnemySpawnLocation.SpawnBoundsVis
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/World/Section/Spawning/EnemySpawnLocation.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SpawnBoundsVis
    path: ../Assets/Objects & Components/World/Section/Spawning/EnemySpawnLocation.cs
    startLine: 45
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public BoundsInt SpawnBoundsVis
    return:
      type: UnityEngine.BoundsInt
    content.vb: Public SpawnBoundsVis As BoundsInt
- uid: Global.EnemySpawnLocation.ColorMapping
  commentId: F:Global.EnemySpawnLocation.ColorMapping
  id: ColorMapping
  parent: Global.EnemySpawnLocation
  langs:
  - csharp
  - vb
  name: ColorMapping
  nameWithType: EnemySpawnLocation.ColorMapping
  fullName: EnemySpawnLocation.ColorMapping
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/World/Section/Spawning/EnemySpawnLocation.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ColorMapping
    path: ../Assets/Objects & Components/World/Section/Spawning/EnemySpawnLocation.cs
    startLine: 47
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Dictionary<ProceduralSpawner.EnemySpawnType, Color> ColorMapping
    return:
      type: System.Collections.Generic.Dictionary{ProceduralSpawner.EnemySpawnType,UnityEngine.Color}
    content.vb: Public Shared ColorMapping As Dictionary(Of ProceduralSpawner.EnemySpawnType, Color)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.Component
  commentId: T:UnityEngine.Component
  parent: UnityEngine
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: UnityEngine.Component
- uid: UnityEngine.Behaviour
  commentId: T:UnityEngine.Behaviour
  parent: UnityEngine
  isExternal: true
  name: Behaviour
  nameWithType: Behaviour
  fullName: UnityEngine.Behaviour
- uid: UnityEngine.MonoBehaviour
  commentId: T:UnityEngine.MonoBehaviour
  parent: UnityEngine
  isExternal: true
  name: MonoBehaviour
  nameWithType: MonoBehaviour
  fullName: UnityEngine.MonoBehaviour
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: System.Collections.Generic.HashSet{ProceduralSpawner.EnemySpawnType}
  commentId: T:System.Collections.Generic.HashSet{ProceduralSpawner.EnemySpawnType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<ProceduralSpawner.EnemySpawnType>
  nameWithType: HashSet<ProceduralSpawner.EnemySpawnType>
  fullName: System.Collections.Generic.HashSet<ProceduralSpawner.EnemySpawnType>
  nameWithType.vb: HashSet(Of ProceduralSpawner.EnemySpawnType)
  fullName.vb: System.Collections.Generic.HashSet(Of ProceduralSpawner.EnemySpawnType)
  name.vb: HashSet(Of ProceduralSpawner.EnemySpawnType)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
  - name: <
  - uid: Global.ProceduralSpawner
    name: ProceduralSpawner
  - name: .
  - uid: Global.ProceduralSpawner.EnemySpawnType
    name: EnemySpawnType
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.ProceduralSpawner
    name: ProceduralSpawner
  - name: .
  - uid: Global.ProceduralSpawner.EnemySpawnType
    name: EnemySpawnType
  - name: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: UnityEngine.BoundsInt
  commentId: T:UnityEngine.BoundsInt
  parent: UnityEngine
  isExternal: true
  name: BoundsInt
  nameWithType: BoundsInt
  fullName: UnityEngine.BoundsInt
- uid: System.Collections.Generic.Dictionary{ProceduralSpawner.EnemySpawnType,UnityEngine.Color}
  commentId: T:System.Collections.Generic.Dictionary{ProceduralSpawner.EnemySpawnType,UnityEngine.Color}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<ProceduralSpawner.EnemySpawnType, Color>
  nameWithType: Dictionary<ProceduralSpawner.EnemySpawnType, Color>
  fullName: System.Collections.Generic.Dictionary<ProceduralSpawner.EnemySpawnType, UnityEngine.Color>
  nameWithType.vb: Dictionary(Of ProceduralSpawner.EnemySpawnType, Color)
  fullName.vb: System.Collections.Generic.Dictionary(Of ProceduralSpawner.EnemySpawnType, UnityEngine.Color)
  name.vb: Dictionary(Of ProceduralSpawner.EnemySpawnType, Color)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - uid: Global.ProceduralSpawner
    name: ProceduralSpawner
  - name: .
  - uid: Global.ProceduralSpawner.EnemySpawnType
    name: EnemySpawnType
  - name: ','
  - name: " "
  - uid: UnityEngine.Color
    name: Color
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.ProceduralSpawner
    name: ProceduralSpawner
  - name: .
  - uid: Global.ProceduralSpawner.EnemySpawnType
    name: EnemySpawnType
  - name: ','
  - name: " "
  - uid: UnityEngine.Color
    name: Color
    isExternal: true
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
