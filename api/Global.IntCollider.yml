### YamlMime:ManagedReference
items:
- uid: Global.IntCollider
  commentId: T:Global.IntCollider
  id: IntCollider
  parent: Global
  children:
  - Global.IntCollider.AlwaysDrawGizmos
  - Global.IntCollider.ContainsPoint(UnityEngine.Vector2Int)
  - Global.IntCollider.DisableGizmos
  - Global.IntCollider.DrawGizmos(UnityEngine.Color)
  - Global.IntCollider.GetBounds
  - Global.IntCollider.GetPosition
  - Global.IntCollider.GetRayIntersection(IntRay)
  - Global.IntCollider.GetRidingTangent(AABBIntCollider,UnityEngine.Vector2Int)
  - Global.IntCollider.Intersects(IntRay)
  - Global.IntCollider.IsCollidable
  - Global.IntCollider.OneWayInteraction
  - Global.IntCollider.Overlaps(IntCollider,UnityEngine.Vector2Int)
  - Global.IntCollider.Overlaps(IntCollider)
  - Global.IntCollider.OverlapsAABB(AABBIntCollider,UnityEngine.Vector2Int)
  - Global.IntCollider.OverlapsBounds(UnityEngine.BoundsInt,UnityEngine.Vector2Int)
  - Global.IntCollider.OverlapsBounds(UnityEngine.BoundsInt)
  - Global.IntCollider.OverlapsCircle(CircleIntCollider,UnityEngine.Vector2Int)
  - Global.IntCollider.OverlapsComposite(CompositeIntCollider,UnityEngine.Vector2Int)
  - Global.IntCollider.OverlapsDummyCollider(DummyIntCollider,UnityEngine.Vector2Int)
  - Global.IntCollider.OverlapsEdge(EdgeIntCollider,UnityEngine.Vector2Int)
  - Global.IntCollider.OverlapsTilemap(TilemapIntCollider,UnityEngine.Vector2Int)
  - Global.IntCollider.Position
  - Global.IntCollider.SetPosition(UnityEngine.Vector2Int)
  langs:
  - csharp
  - vb
  name: IntCollider
  nameWithType: IntCollider
  fullName: IntCollider
  type: Class
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: IntCollider
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 12
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\n<code>IntCollider</code> is an abstract class for all colliders.\nIntColliders do not use floating points, only integers.\nIt extends MonoBehavior, meaning it can be added as a component\n"
  example: []
  syntax:
    content: 'public abstract class IntCollider : MonoBehaviour'
    content.vb: Public MustInherit Class IntCollider Inherits MonoBehaviour
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.Component
  - UnityEngine.Behaviour
  - UnityEngine.MonoBehaviour
  derivedClasses:
  - Global.AABBIntCollider
  - Global.CircleIntCollider
  - Global.CompositeIntCollider
  - Global.DummyIntCollider
  - Global.EdgeIntCollider
  - Global.TilemapIntCollider
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
- uid: Global.IntCollider.DisableGizmos
  commentId: F:Global.IntCollider.DisableGizmos
  id: DisableGizmos
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: DisableGizmos
  nameWithType: IntCollider.DisableGizmos
  fullName: IntCollider.DisableGizmos
  type: Field
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: DisableGizmos
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 30
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nDisable the gizmos drawing in the Unity Editor\n"
  example: []
  syntax:
    content: public bool DisableGizmos
    return:
      type: System.Boolean
    content.vb: Public DisableGizmos As Boolean
- uid: Global.IntCollider.AlwaysDrawGizmos
  commentId: F:Global.IntCollider.AlwaysDrawGizmos
  id: AlwaysDrawGizmos
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: AlwaysDrawGizmos
  nameWithType: IntCollider.AlwaysDrawGizmos
  fullName: IntCollider.AlwaysDrawGizmos
  type: Field
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AlwaysDrawGizmos
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 35
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nAlways draw gizmos in editor if set to true\n"
  example: []
  syntax:
    content: public bool AlwaysDrawGizmos
    return:
      type: System.Boolean
    content.vb: Public AlwaysDrawGizmos As Boolean
- uid: Global.IntCollider.OneWayInteraction
  commentId: F:Global.IntCollider.OneWayInteraction
  id: OneWayInteraction
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: OneWayInteraction
  nameWithType: IntCollider.OneWayInteraction
  fullName: IntCollider.OneWayInteraction
  type: Field
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OneWayInteraction
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 40
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nhow a collider should interact with a one-way tile\n"
  example: []
  syntax:
    content: public IntCollider.OneWayInteractionType OneWayInteraction
    return:
      type: Global.IntCollider.OneWayInteractionType
    content.vb: Public OneWayInteraction As IntCollider.OneWayInteractionType
- uid: Global.IntCollider.Position
  commentId: P:Global.IntCollider.Position
  id: Position
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: IntCollider.Position
  fullName: IntCollider.Position
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Position
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 46
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nGet: The game object&apos;s position rounded to the nearest integer\nSet: Sets the game object&apos;s position to the specified integer argument value\n"
  example: []
  syntax:
    content: protected Vector2Int Position { get; }
    parameters: []
    return:
      type: UnityEngine.Vector2Int
    content.vb: Protected Property Position As Vector2Int
  overload: Global.IntCollider.Position*
- uid: Global.IntCollider.GetPosition
  commentId: M:Global.IntCollider.GetPosition
  id: GetPosition
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: GetPosition()
  nameWithType: IntCollider.GetPosition()
  fullName: IntCollider.GetPosition()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetPosition
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 52
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nSemantically the same as the getter of Position\n"
  example: []
  syntax:
    content: public Vector2Int GetPosition()
    return:
      type: UnityEngine.Vector2Int
      description: returns the location of the game object rounded to the nearest integer
    content.vb: Public Function GetPosition() As Vector2Int
  overload: Global.IntCollider.GetPosition*
- uid: Global.IntCollider.SetPosition(UnityEngine.Vector2Int)
  commentId: M:Global.IntCollider.SetPosition(UnityEngine.Vector2Int)
  id: SetPosition(UnityEngine.Vector2Int)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: SetPosition(Vector2Int)
  nameWithType: IntCollider.SetPosition(Vector2Int)
  fullName: IntCollider.SetPosition(UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SetPosition
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 60
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nSemantically the same as the setter of Position\n"
  example: []
  syntax:
    content: public void SetPosition(Vector2Int pos)
    parameters:
    - id: pos
      type: UnityEngine.Vector2Int
    content.vb: Public Sub SetPosition(pos As Vector2Int)
  overload: Global.IntCollider.SetPosition*
- uid: Global.IntCollider.IsCollidable
  commentId: F:Global.IntCollider.IsCollidable
  id: IsCollidable
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: IsCollidable
  nameWithType: IntCollider.IsCollidable
  fullName: IntCollider.IsCollidable
  type: Field
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: IsCollidable
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 68
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nDetermines whether collisions are enabled for this collider\n"
  example: []
  syntax:
    content: public bool IsCollidable
    return:
      type: System.Boolean
    content.vb: Public IsCollidable As Boolean
- uid: Global.IntCollider.Overlaps(IntCollider)
  commentId: M:Global.IntCollider.Overlaps(IntCollider)
  id: Overlaps(IntCollider)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: Overlaps(IntCollider)
  nameWithType: IntCollider.Overlaps(IntCollider)
  fullName: IntCollider.Overlaps(IntCollider)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Overlaps
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 75
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nChecks for an overlap between two colliders\n"
  example: []
  syntax:
    content: public bool Overlaps(IntCollider collider)
    parameters:
    - id: collider
      type: Global.IntCollider
      description: Other collider
    return:
      type: System.Boolean
      description: Returns true if two colliders overlap
    content.vb: Public Function Overlaps(collider As IntCollider) As Boolean
  overload: Global.IntCollider.Overlaps*
- uid: Global.IntCollider.Overlaps(IntCollider,UnityEngine.Vector2Int)
  commentId: M:Global.IntCollider.Overlaps(IntCollider,UnityEngine.Vector2Int)
  id: Overlaps(IntCollider,UnityEngine.Vector2Int)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: Overlaps(IntCollider, Vector2Int)
  nameWithType: IntCollider.Overlaps(IntCollider, Vector2Int)
  fullName: IntCollider.Overlaps(IntCollider, UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Overlaps
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 87
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nChecks for an overlap between two colliders in which one collider\nhas a position offset (used to check for future collisions)\n"
  example: []
  syntax:
    content: public bool Overlaps(IntCollider collider, Vector2Int dPos)
    parameters:
    - id: collider
      type: Global.IntCollider
      description: Other collider
    - id: dPos
      type: UnityEngine.Vector2Int
      description: Offset of this collider
    return:
      type: System.Boolean
      description: Returns true if two colliders overlap
    content.vb: Public Function Overlaps(collider As IntCollider, dPos As Vector2Int) As Boolean
  overload: Global.IntCollider.Overlaps*
- uid: Global.IntCollider.ContainsPoint(UnityEngine.Vector2Int)
  commentId: M:Global.IntCollider.ContainsPoint(UnityEngine.Vector2Int)
  id: ContainsPoint(UnityEngine.Vector2Int)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: ContainsPoint(Vector2Int)
  nameWithType: IntCollider.ContainsPoint(Vector2Int)
  fullName: IntCollider.ContainsPoint(UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ContainsPoint
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 109
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nChecks whether the collider overlaps a point in world space. A point on the line is not considered &quot;within&quot; the collider.\n"
  example: []
  syntax:
    content: public abstract bool ContainsPoint(Vector2Int point)
    parameters:
    - id: point
      type: UnityEngine.Vector2Int
      description: worldspace point
    return:
      type: System.Boolean
      description: true if the point is contained by the collider. False otherwise.
    content.vb: Public MustOverride Function ContainsPoint(point As Vector2Int) As Boolean
  overload: Global.IntCollider.ContainsPoint*
- uid: Global.IntCollider.DrawGizmos(UnityEngine.Color)
  commentId: M:Global.IntCollider.DrawGizmos(UnityEngine.Color)
  id: DrawGizmos(UnityEngine.Color)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: DrawGizmos(Color)
  nameWithType: IntCollider.DrawGizmos(Color)
  fullName: IntCollider.DrawGizmos(UnityEngine.Color)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: DrawGizmos
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 142
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nAbstract function for drawing debug lines of the collider\n"
  example: []
  syntax:
    content: public abstract void DrawGizmos(Color color)
    parameters:
    - id: color
      type: UnityEngine.Color
    content.vb: Public MustOverride Sub DrawGizmos(color As Color)
  overload: Global.IntCollider.DrawGizmos*
- uid: Global.IntCollider.OverlapsAABB(AABBIntCollider,UnityEngine.Vector2Int)
  commentId: M:Global.IntCollider.OverlapsAABB(AABBIntCollider,UnityEngine.Vector2Int)
  id: OverlapsAABB(AABBIntCollider,UnityEngine.Vector2Int)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: OverlapsAABB(AABBIntCollider, Vector2Int)
  nameWithType: IntCollider.OverlapsAABB(AABBIntCollider, Vector2Int)
  fullName: IntCollider.OverlapsAABB(AABBIntCollider, UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OverlapsAABB
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 150
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nDetermine if this collider overlaps an Axis Aligned Bounding Box collider (AABB)\n"
  example: []
  syntax:
    content: protected abstract bool OverlapsAABB(AABBIntCollider collider, Vector2Int dPos)
    parameters:
    - id: collider
      type: Global.AABBIntCollider
      description: AABB collider
    - id: dPos
      type: UnityEngine.Vector2Int
      description: Position offset of this collider
    return:
      type: System.Boolean
      description: returns true if the colliders overlap
    content.vb: Protected MustOverride Function OverlapsAABB(collider As AABBIntCollider, dPos As Vector2Int) As Boolean
  overload: Global.IntCollider.OverlapsAABB*
- uid: Global.IntCollider.OverlapsTilemap(TilemapIntCollider,UnityEngine.Vector2Int)
  commentId: M:Global.IntCollider.OverlapsTilemap(TilemapIntCollider,UnityEngine.Vector2Int)
  id: OverlapsTilemap(TilemapIntCollider,UnityEngine.Vector2Int)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: OverlapsTilemap(TilemapIntCollider, Vector2Int)
  nameWithType: IntCollider.OverlapsTilemap(TilemapIntCollider, Vector2Int)
  fullName: IntCollider.OverlapsTilemap(TilemapIntCollider, UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OverlapsTilemap
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 158
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nDetermine if this collider overlaps a Tilemap collider\n"
  example: []
  syntax:
    content: protected abstract bool OverlapsTilemap(TilemapIntCollider collider, Vector2Int dPos)
    parameters:
    - id: collider
      type: Global.TilemapIntCollider
      description: Tilemap collider
    - id: dPos
      type: UnityEngine.Vector2Int
      description: Position offset of this collider
    return:
      type: System.Boolean
      description: returns true if the colliders overlap
    content.vb: Protected MustOverride Function OverlapsTilemap(collider As TilemapIntCollider, dPos As Vector2Int) As Boolean
  overload: Global.IntCollider.OverlapsTilemap*
- uid: Global.IntCollider.OverlapsEdge(EdgeIntCollider,UnityEngine.Vector2Int)
  commentId: M:Global.IntCollider.OverlapsEdge(EdgeIntCollider,UnityEngine.Vector2Int)
  id: OverlapsEdge(EdgeIntCollider,UnityEngine.Vector2Int)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: OverlapsEdge(EdgeIntCollider, Vector2Int)
  nameWithType: IntCollider.OverlapsEdge(EdgeIntCollider, Vector2Int)
  fullName: IntCollider.OverlapsEdge(EdgeIntCollider, UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OverlapsEdge
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 166
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nDetermine if this collider overlaps an Edge Collider\n"
  example: []
  syntax:
    content: protected abstract bool OverlapsEdge(EdgeIntCollider collider, Vector2Int dPos)
    parameters:
    - id: collider
      type: Global.EdgeIntCollider
      description: Edge collider
    - id: dPos
      type: UnityEngine.Vector2Int
      description: Position offset of this collider
    return:
      type: System.Boolean
      description: returns true if the colliders overlap
    content.vb: Protected MustOverride Function OverlapsEdge(collider As EdgeIntCollider, dPos As Vector2Int) As Boolean
  overload: Global.IntCollider.OverlapsEdge*
- uid: Global.IntCollider.OverlapsCircle(CircleIntCollider,UnityEngine.Vector2Int)
  commentId: M:Global.IntCollider.OverlapsCircle(CircleIntCollider,UnityEngine.Vector2Int)
  id: OverlapsCircle(CircleIntCollider,UnityEngine.Vector2Int)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: OverlapsCircle(CircleIntCollider, Vector2Int)
  nameWithType: IntCollider.OverlapsCircle(CircleIntCollider, Vector2Int)
  fullName: IntCollider.OverlapsCircle(CircleIntCollider, UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OverlapsCircle
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 174
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nDetermine if this collider overlaps a Circle Collider\n"
  example: []
  syntax:
    content: protected abstract bool OverlapsCircle(CircleIntCollider collider, Vector2Int dPos)
    parameters:
    - id: collider
      type: Global.CircleIntCollider
      description: Circle collider
    - id: dPos
      type: UnityEngine.Vector2Int
      description: Position offset of this collider
    return:
      type: System.Boolean
      description: returns true if the colliders overlap
    content.vb: Protected MustOverride Function OverlapsCircle(collider As CircleIntCollider, dPos As Vector2Int) As Boolean
  overload: Global.IntCollider.OverlapsCircle*
- uid: Global.IntCollider.OverlapsDummyCollider(DummyIntCollider,UnityEngine.Vector2Int)
  commentId: M:Global.IntCollider.OverlapsDummyCollider(DummyIntCollider,UnityEngine.Vector2Int)
  id: OverlapsDummyCollider(DummyIntCollider,UnityEngine.Vector2Int)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: OverlapsDummyCollider(DummyIntCollider, Vector2Int)
  nameWithType: IntCollider.OverlapsDummyCollider(DummyIntCollider, Vector2Int)
  fullName: IntCollider.OverlapsDummyCollider(DummyIntCollider, UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OverlapsDummyCollider
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 182
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nDetermine if this collider overlaps a Dummy Collider. (Should always be false)\n"
  example: []
  syntax:
    content: protected virtual bool OverlapsDummyCollider(DummyIntCollider collider, Vector2Int dPos)
    parameters:
    - id: collider
      type: Global.DummyIntCollider
      description: Dummy collider
    - id: dPos
      type: UnityEngine.Vector2Int
      description: Position offset of this collider
    return:
      type: System.Boolean
      description: Always returns false
    content.vb: Protected Overridable Function OverlapsDummyCollider(collider As DummyIntCollider, dPos As Vector2Int) As Boolean
  overload: Global.IntCollider.OverlapsDummyCollider*
- uid: Global.IntCollider.OverlapsBounds(UnityEngine.BoundsInt)
  commentId: M:Global.IntCollider.OverlapsBounds(UnityEngine.BoundsInt)
  id: OverlapsBounds(UnityEngine.BoundsInt)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: OverlapsBounds(BoundsInt)
  nameWithType: IntCollider.OverlapsBounds(BoundsInt)
  fullName: IntCollider.OverlapsBounds(UnityEngine.BoundsInt)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OverlapsBounds
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 189
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nDetermine if this collider overlaps a BoundsInt (identical to AABB collider without monobehavior overhead)\n"
  example: []
  syntax:
    content: public bool OverlapsBounds(BoundsInt collider)
    parameters:
    - id: collider
      type: UnityEngine.BoundsInt
      description: BoundsInt collider
    return:
      type: System.Boolean
      description: returns true if the colliders overlap
    content.vb: Public Function OverlapsBounds(collider As BoundsInt) As Boolean
  overload: Global.IntCollider.OverlapsBounds*
- uid: Global.IntCollider.OverlapsBounds(UnityEngine.BoundsInt,UnityEngine.Vector2Int)
  commentId: M:Global.IntCollider.OverlapsBounds(UnityEngine.BoundsInt,UnityEngine.Vector2Int)
  id: OverlapsBounds(UnityEngine.BoundsInt,UnityEngine.Vector2Int)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: OverlapsBounds(BoundsInt, Vector2Int)
  nameWithType: IntCollider.OverlapsBounds(BoundsInt, Vector2Int)
  fullName: IntCollider.OverlapsBounds(UnityEngine.BoundsInt, UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OverlapsBounds
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 200
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nDetermine if this collider overlaps a BoundsInt (identical to AABB collider without monobehavior overhead)\n"
  example: []
  syntax:
    content: public abstract bool OverlapsBounds(BoundsInt collider, Vector2Int dPos)
    parameters:
    - id: collider
      type: UnityEngine.BoundsInt
      description: BoundsInt collider
    - id: dPos
      type: UnityEngine.Vector2Int
      description: Position offset of this collider
    return:
      type: System.Boolean
      description: returns true if the colliders overlap
    content.vb: Public MustOverride Function OverlapsBounds(collider As BoundsInt, dPos As Vector2Int) As Boolean
  overload: Global.IntCollider.OverlapsBounds*
- uid: Global.IntCollider.GetBounds
  commentId: M:Global.IntCollider.GetBounds
  id: GetBounds
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: GetBounds()
  nameWithType: IntCollider.GetBounds()
  fullName: IntCollider.GetBounds()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetBounds
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 206
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nGets the bounds of the collider using the extrema in the x and y axes.\n"
  example: []
  syntax:
    content: public abstract BoundsInt GetBounds()
    return:
      type: UnityEngine.BoundsInt
      description: Bounds int defining the extreme points
    content.vb: Public MustOverride Function GetBounds() As BoundsInt
  overload: Global.IntCollider.GetBounds*
- uid: Global.IntCollider.OverlapsComposite(CompositeIntCollider,UnityEngine.Vector2Int)
  commentId: M:Global.IntCollider.OverlapsComposite(CompositeIntCollider,UnityEngine.Vector2Int)
  id: OverlapsComposite(CompositeIntCollider,UnityEngine.Vector2Int)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: OverlapsComposite(CompositeIntCollider, Vector2Int)
  nameWithType: IntCollider.OverlapsComposite(CompositeIntCollider, Vector2Int)
  fullName: IntCollider.OverlapsComposite(CompositeIntCollider, UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OverlapsComposite
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 214
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nDetermine if this collider overlaps a composite collider. A composite collider is composed of multiple AABB colliders\n"
  example: []
  syntax:
    content: protected virtual bool OverlapsComposite(CompositeIntCollider collider, Vector2Int dPos)
    parameters:
    - id: collider
      type: Global.CompositeIntCollider
      description: Composite collider
    - id: dPos
      type: UnityEngine.Vector2Int
      description: Position offset of this collider
    return:
      type: System.Boolean
      description: returns true if the colliders overlap
    content.vb: Protected Overridable Function OverlapsComposite(collider As CompositeIntCollider, dPos As Vector2Int) As Boolean
  overload: Global.IntCollider.OverlapsComposite*
- uid: Global.IntCollider.Intersects(IntRay)
  commentId: M:Global.IntCollider.Intersects(IntRay)
  id: Intersects(IntRay)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: Intersects(IntRay)
  nameWithType: IntCollider.Intersects(IntRay)
  fullName: IntCollider.Intersects(IntRay)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Intersects
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 226
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nDetermine if this collider intersects a ray. Relies on GetRayIntersection function.\n"
  example: []
  syntax:
    content: public bool Intersects(IntRay ray)
    parameters:
    - id: ray
      type: Global.IntRay
      description: ray
    return:
      type: System.Boolean
      description: returns true if the colliders overlap
    content.vb: Public Function Intersects(ray As IntRay) As Boolean
  overload: Global.IntCollider.Intersects*
- uid: Global.IntCollider.GetRayIntersection(IntRay)
  commentId: M:Global.IntCollider.GetRayIntersection(IntRay)
  id: GetRayIntersection(IntRay)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: GetRayIntersection(IntRay)
  nameWithType: IntCollider.GetRayIntersection(IntRay)
  fullName: IntCollider.GetRayIntersection(IntRay)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetRayIntersection
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 236
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nDetermine if this collider intersects a ray and returns the position of the intersection\n"
  example: []
  syntax:
    content: public abstract Intersection GetRayIntersection(IntRay ray)
    parameters:
    - id: ray
      type: Global.IntRay
      description: ray
    return:
      type: Global.Intersection
      description: Populates the Intersection struct passed as an argument
    content.vb: Public MustOverride Function GetRayIntersection(ray As IntRay) As Intersection
  overload: Global.IntCollider.GetRayIntersection*
- uid: Global.IntCollider.GetRidingTangent(AABBIntCollider,UnityEngine.Vector2Int)
  commentId: M:Global.IntCollider.GetRidingTangent(AABBIntCollider,UnityEngine.Vector2Int)
  id: GetRidingTangent(AABBIntCollider,UnityEngine.Vector2Int)
  parent: Global.IntCollider
  langs:
  - csharp
  - vb
  name: GetRidingTangent(AABBIntCollider, Vector2Int)
  nameWithType: IntCollider.GetRidingTangent(AABBIntCollider, Vector2Int)
  fullName: IntCollider.GetRidingTangent(AABBIntCollider, UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Colliders/IntCollider.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetRidingTangent
    path: ../Assets/Framework/Physics/Colliders/IntCollider.cs
    startLine: 245
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nIf aabb collider is overlapping this collider, return the tangent of the &quot;ground&quot; it is standing on\nIf the colliders do not intersect after applying the dPos, simply return Vector2.Right\n"
  example: []
  syntax:
    content: public abstract Vector2 GetRidingTangent(AABBIntCollider aabb, Vector2Int dPos)
    parameters:
    - id: aabb
      type: Global.AABBIntCollider
      description: aabb collider that is supposedly riding this collider
    - id: dPos
      type: UnityEngine.Vector2Int
      description: offset position of the aabb collider
    return:
      type: UnityEngine.Vector2
      description: ''
    content.vb: Public MustOverride Function GetRidingTangent(aabb As AABBIntCollider, dPos As Vector2Int) As Vector2
  overload: Global.IntCollider.GetRidingTangent*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.Component
  commentId: T:UnityEngine.Component
  parent: UnityEngine
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: UnityEngine.Component
- uid: UnityEngine.Behaviour
  commentId: T:UnityEngine.Behaviour
  parent: UnityEngine
  isExternal: true
  name: Behaviour
  nameWithType: Behaviour
  fullName: UnityEngine.Behaviour
- uid: UnityEngine.MonoBehaviour
  commentId: T:UnityEngine.MonoBehaviour
  parent: UnityEngine
  isExternal: true
  name: MonoBehaviour
  nameWithType: MonoBehaviour
  fullName: UnityEngine.MonoBehaviour
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.IntCollider.OneWayInteractionType
  commentId: T:Global.IntCollider.OneWayInteractionType
  name: IntCollider.OneWayInteractionType
  nameWithType: IntCollider.OneWayInteractionType
  fullName: IntCollider.OneWayInteractionType
  spec.csharp:
  - uid: Global.IntCollider
    name: IntCollider
  - name: .
  - uid: Global.IntCollider.OneWayInteractionType
    name: OneWayInteractionType
  spec.vb:
  - uid: Global.IntCollider
    name: IntCollider
  - name: .
  - uid: Global.IntCollider.OneWayInteractionType
    name: OneWayInteractionType
- uid: Global.IntCollider.Position*
  commentId: Overload:Global.IntCollider.Position
  name: Position
  nameWithType: IntCollider.Position
  fullName: IntCollider.Position
- uid: UnityEngine.Vector2Int
  commentId: T:UnityEngine.Vector2Int
  parent: UnityEngine
  isExternal: true
  name: Vector2Int
  nameWithType: Vector2Int
  fullName: UnityEngine.Vector2Int
- uid: Global.IntCollider.GetPosition*
  commentId: Overload:Global.IntCollider.GetPosition
  name: GetPosition
  nameWithType: IntCollider.GetPosition
  fullName: IntCollider.GetPosition
- uid: Global.IntCollider.SetPosition*
  commentId: Overload:Global.IntCollider.SetPosition
  name: SetPosition
  nameWithType: IntCollider.SetPosition
  fullName: IntCollider.SetPosition
- uid: Global.IntCollider.Overlaps*
  commentId: Overload:Global.IntCollider.Overlaps
  name: Overlaps
  nameWithType: IntCollider.Overlaps
  fullName: IntCollider.Overlaps
- uid: Global.IntCollider
  commentId: T:Global.IntCollider
  name: IntCollider
  nameWithType: IntCollider
  fullName: IntCollider
- uid: Global.IntCollider.ContainsPoint*
  commentId: Overload:Global.IntCollider.ContainsPoint
  name: ContainsPoint
  nameWithType: IntCollider.ContainsPoint
  fullName: IntCollider.ContainsPoint
- uid: Global.IntCollider.DrawGizmos*
  commentId: Overload:Global.IntCollider.DrawGizmos
  name: DrawGizmos
  nameWithType: IntCollider.DrawGizmos
  fullName: IntCollider.DrawGizmos
- uid: UnityEngine.Color
  commentId: T:UnityEngine.Color
  parent: UnityEngine
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: UnityEngine.Color
- uid: Global.IntCollider.OverlapsAABB*
  commentId: Overload:Global.IntCollider.OverlapsAABB
  name: OverlapsAABB
  nameWithType: IntCollider.OverlapsAABB
  fullName: IntCollider.OverlapsAABB
- uid: Global.AABBIntCollider
  commentId: T:Global.AABBIntCollider
  name: AABBIntCollider
  nameWithType: AABBIntCollider
  fullName: AABBIntCollider
- uid: Global.IntCollider.OverlapsTilemap*
  commentId: Overload:Global.IntCollider.OverlapsTilemap
  name: OverlapsTilemap
  nameWithType: IntCollider.OverlapsTilemap
  fullName: IntCollider.OverlapsTilemap
- uid: Global.TilemapIntCollider
  commentId: T:Global.TilemapIntCollider
  name: TilemapIntCollider
  nameWithType: TilemapIntCollider
  fullName: TilemapIntCollider
- uid: Global.IntCollider.OverlapsEdge*
  commentId: Overload:Global.IntCollider.OverlapsEdge
  name: OverlapsEdge
  nameWithType: IntCollider.OverlapsEdge
  fullName: IntCollider.OverlapsEdge
- uid: Global.EdgeIntCollider
  commentId: T:Global.EdgeIntCollider
  name: EdgeIntCollider
  nameWithType: EdgeIntCollider
  fullName: EdgeIntCollider
- uid: Global.IntCollider.OverlapsCircle*
  commentId: Overload:Global.IntCollider.OverlapsCircle
  name: OverlapsCircle
  nameWithType: IntCollider.OverlapsCircle
  fullName: IntCollider.OverlapsCircle
- uid: Global.CircleIntCollider
  commentId: T:Global.CircleIntCollider
  name: CircleIntCollider
  nameWithType: CircleIntCollider
  fullName: CircleIntCollider
- uid: Global.IntCollider.OverlapsDummyCollider*
  commentId: Overload:Global.IntCollider.OverlapsDummyCollider
  name: OverlapsDummyCollider
  nameWithType: IntCollider.OverlapsDummyCollider
  fullName: IntCollider.OverlapsDummyCollider
- uid: Global.DummyIntCollider
  commentId: T:Global.DummyIntCollider
  name: DummyIntCollider
  nameWithType: DummyIntCollider
  fullName: DummyIntCollider
- uid: Global.IntCollider.OverlapsBounds*
  commentId: Overload:Global.IntCollider.OverlapsBounds
  name: OverlapsBounds
  nameWithType: IntCollider.OverlapsBounds
  fullName: IntCollider.OverlapsBounds
- uid: UnityEngine.BoundsInt
  commentId: T:UnityEngine.BoundsInt
  parent: UnityEngine
  isExternal: true
  name: BoundsInt
  nameWithType: BoundsInt
  fullName: UnityEngine.BoundsInt
- uid: Global.IntCollider.GetBounds*
  commentId: Overload:Global.IntCollider.GetBounds
  name: GetBounds
  nameWithType: IntCollider.GetBounds
  fullName: IntCollider.GetBounds
- uid: Global.IntCollider.OverlapsComposite*
  commentId: Overload:Global.IntCollider.OverlapsComposite
  name: OverlapsComposite
  nameWithType: IntCollider.OverlapsComposite
  fullName: IntCollider.OverlapsComposite
- uid: Global.CompositeIntCollider
  commentId: T:Global.CompositeIntCollider
  name: CompositeIntCollider
  nameWithType: CompositeIntCollider
  fullName: CompositeIntCollider
- uid: Global.IntCollider.Intersects*
  commentId: Overload:Global.IntCollider.Intersects
  name: Intersects
  nameWithType: IntCollider.Intersects
  fullName: IntCollider.Intersects
- uid: Global.IntRay
  commentId: T:Global.IntRay
  name: IntRay
  nameWithType: IntRay
  fullName: IntRay
- uid: Global.IntCollider.GetRayIntersection*
  commentId: Overload:Global.IntCollider.GetRayIntersection
  name: GetRayIntersection
  nameWithType: IntCollider.GetRayIntersection
  fullName: IntCollider.GetRayIntersection
- uid: Global.Intersection
  commentId: T:Global.Intersection
  name: Intersection
  nameWithType: Intersection
  fullName: Intersection
- uid: Global.IntCollider.GetRidingTangent*
  commentId: Overload:Global.IntCollider.GetRidingTangent
  name: GetRidingTangent
  nameWithType: IntCollider.GetRidingTangent
  fullName: IntCollider.GetRidingTangent
- uid: UnityEngine.Vector2
  commentId: T:UnityEngine.Vector2
  parent: UnityEngine
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
