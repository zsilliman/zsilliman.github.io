### YamlMime:ManagedReference
items:
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  commentId: T:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  id: ModularEnemy.EnemyBehaviorInterfaceManager`1
  parent: Global
  children:
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.CurrentBehavior
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredAlwaysRun
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredBehaviors
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
  langs:
  - csharp
  - vb
  name: ModularEnemy.EnemyBehaviorInterfaceManager<T>
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: EnemyBehaviorInterfaceManager
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 336
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: 'public abstract class ModularEnemy.EnemyBehaviorInterfaceManager<T> : ModularEnemy.EnemyBehaviorInterface'
    typeParameters:
    - id: T
    content.vb: Public MustInherit Class ModularEnemy.EnemyBehaviorInterfaceManager(Of T) Inherits ModularEnemy.EnemyBehaviorInterface
  inheritance:
  - System.Object
  - Global.ModularEnemy.EnemyBehaviorInterface
  derivedClasses:
  - Global.AttackBehavior
  - Global.CooldownBehavior
  - Global.IdleBehavior
  - Global.ModularEnemy.MEBehaviorManager
  - Global.PrepBehavior
  inheritedMembers:
  - Global.ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  - Global.ModularEnemy.EnemyBehaviorInterface.self
  - Global.ModularEnemy.EnemyBehaviorInterface.Started
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T)
  name.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T)
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.CurrentBehavior
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.CurrentBehavior
  id: CurrentBehavior
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: CurrentBehavior
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.CurrentBehavior
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.CurrentBehavior
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: CurrentBehavior
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 339
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [HideInInspector]

      public T CurrentBehavior
    return:
      type: '{T}'
    content.vb: >-
      <HideInInspector>

      Public CurrentBehavior As T
  attributes:
  - type: UnityEngine.HideInInspector
    ctor: UnityEngine.HideInInspector.#ctor
    arguments: []
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).CurrentBehavior
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).CurrentBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredBehaviors
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredBehaviors
  id: RegisteredBehaviors
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: RegisteredBehaviors
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredBehaviors
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredBehaviors
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RegisteredBehaviors
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 341
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected Dictionary<T, ModularEnemy.EnemyBehaviorInterface> RegisteredBehaviors
    return:
      type: System.Collections.Generic.Dictionary{{T},ModularEnemy.EnemyBehaviorInterface}
    content.vb: Protected RegisteredBehaviors As Dictionary(Of T, ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredBehaviors
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredBehaviors
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredAlwaysRun
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredAlwaysRun
  id: RegisteredAlwaysRun
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: RegisteredAlwaysRun
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredAlwaysRun
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredAlwaysRun
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RegisteredAlwaysRun
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 342
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected List<ModularEnemy.EnemyBehaviorInterface> RegisteredAlwaysRun
    return:
      type: System.Collections.Generic.List{ModularEnemy.EnemyBehaviorInterface}
    content.vb: Protected RegisteredAlwaysRun As List(Of ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredAlwaysRun
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredAlwaysRun
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
  id: SetInitialBehavior(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: SetInitialBehavior(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.SetInitialBehavior(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.SetInitialBehavior(ModularEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SetInitialBehavior
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 352
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public abstract void SetInitialBehavior(ModularEnemy enemy)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    content.vb: Public MustOverride Sub SetInitialBehavior(enemy As ModularEnemy)
  overload: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior*
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).SetInitialBehavior(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).SetInitialBehavior(ModularEnemy)
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
  id: RegisterBehaviors(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: RegisterBehaviors(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviors(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviors(ModularEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RegisterBehaviors
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 353
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public abstract void RegisterBehaviors(ModularEnemy enemy)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    content.vb: Public MustOverride Sub RegisterBehaviors(enemy As ModularEnemy)
  overload: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors*
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviors(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviors(ModularEnemy)
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
  id: RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: RegisterBehavior(T, EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RegisterBehavior
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 355
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void RegisterBehavior(T enumKey, ModularEnemy.EnemyBehaviorInterface behavior)
    parameters:
    - id: enumKey
      type: '{T}'
    - id: behavior
      type: Global.ModularEnemy.EnemyBehaviorInterface
    content.vb: Public Sub RegisterBehavior(enumKey As T, behavior As ModularEnemy.EnemyBehaviorInterface)
  overload: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior*
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  id: RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: RegisterBehaviorAlwaysRun(EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RegisterBehaviorAlwaysRun
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 361
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface behavior)
    parameters:
    - id: behavior
      type: Global.ModularEnemy.EnemyBehaviorInterface
    content.vb: Public Sub RegisterBehaviorAlwaysRun(behavior As ModularEnemy.EnemyBehaviorInterface)
  overload: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun*
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
  id: Start(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: Start(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Start(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Start(ModularEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Start
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 367
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void Start(ModularEnemy enemy)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    content.vb: Public Overrides Sub Start(enemy As ModularEnemy)
  overridden: Global.ModularEnemy.EnemyBehaviorInterface.Start(ModularEnemy)
  overload: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start*
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Start(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Start(ModularEnemy)
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
  id: Update
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Update()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Update()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Update
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 379
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void Update()
    content.vb: Public Overrides Sub Update()
  overridden: Global.ModularEnemy.EnemyBehaviorInterface.Update
  overload: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update*
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Update()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Update()
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
  id: DrawGizmos(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: DrawGizmos(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.DrawGizmos(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.DrawGizmos(ModularEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: DrawGizmos
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 389
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void DrawGizmos(ModularEnemy enemy)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    content.vb: Public Overrides Sub DrawGizmos(enemy As ModularEnemy)
  overridden: Global.ModularEnemy.EnemyBehaviorInterface.DrawGizmos(ModularEnemy)
  overload: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos*
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).DrawGizmos(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).DrawGizmos(ModularEnemy)
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
  id: OnRestart
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: OnRestart()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnRestart()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnRestart()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnRestart
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 403
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void OnRestart()
    content.vb: Public Overrides Sub OnRestart()
  overridden: Global.ModularEnemy.EnemyBehaviorInterface.OnRestart
  overload: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart*
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnRestart()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnRestart()
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
  id: HasStarted(`0)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: HasStarted(T)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.HasStarted(T)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.HasStarted(T)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: HasStarted
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 413
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public virtual bool HasStarted(T key)
    parameters:
    - id: key
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Overridable Function HasStarted(key As T) As Boolean
  overload: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted*
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).HasStarted(T)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).HasStarted(T)
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
  id: OnKill(ModularEnemy,System.Boolean)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: OnKill(ModularEnemy, bool)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnKill(ModularEnemy, bool)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnKill(ModularEnemy, bool)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnKill
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 422
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void OnKill(ModularEnemy enemy, bool IsAnimated)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    - id: IsAnimated
      type: System.Boolean
    content.vb: Public Overrides Sub OnKill(enemy As ModularEnemy, IsAnimated As Boolean)
  overridden: Global.ModularEnemy.EnemyBehaviorInterface.OnKill(ModularEnemy,System.Boolean)
  overload: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill*
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnKill(ModularEnemy, Boolean)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnKill(ModularEnemy, Boolean)
  name.vb: OnKill(ModularEnemy, Boolean)
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
  id: OnResetObject(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  langs:
  - csharp
  - vb
  name: OnResetObject(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnResetObject(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnResetObject(ModularEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnResetObject
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/ModularEnemy.cs
    startLine: 435
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void OnResetObject(ModularEnemy enemy)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    content.vb: Public Overrides Sub OnResetObject(enemy As ModularEnemy)
  overridden: Global.ModularEnemy.EnemyBehaviorInterface.OnResetObject(ModularEnemy)
  overload: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject*
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnResetObject(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnResetObject(ModularEnemy)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.ModularEnemy.EnemyBehaviorInterface
  commentId: T:Global.ModularEnemy.EnemyBehaviorInterface
  name: ModularEnemy.EnemyBehaviorInterface
  nameWithType: ModularEnemy.EnemyBehaviorInterface
  fullName: ModularEnemy.EnemyBehaviorInterface
  spec.csharp:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  spec.vb:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
- uid: Global.ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: ShowGizmos
  nameWithType: ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  fullName: ModularEnemy.EnemyBehaviorInterface.ShowGizmos
- uid: Global.ModularEnemy.EnemyBehaviorInterface.self
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterface.self
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: self
  nameWithType: ModularEnemy.EnemyBehaviorInterface.self
  fullName: ModularEnemy.EnemyBehaviorInterface.self
- uid: Global.ModularEnemy.EnemyBehaviorInterface.Started
  commentId: P:Global.ModularEnemy.EnemyBehaviorInterface.Started
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: Started
  nameWithType: ModularEnemy.EnemyBehaviorInterface.Started
  fullName: ModularEnemy.EnemyBehaviorInterface.Started
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.Dictionary{{T},ModularEnemy.EnemyBehaviorInterface}
  commentId: T:System.Collections.Generic.Dictionary{`0,ModularEnemy.EnemyBehaviorInterface}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<T, ModularEnemy.EnemyBehaviorInterface>
  nameWithType: Dictionary<T, ModularEnemy.EnemyBehaviorInterface>
  fullName: System.Collections.Generic.Dictionary<T, ModularEnemy.EnemyBehaviorInterface>
  nameWithType.vb: Dictionary(Of T, ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: System.Collections.Generic.Dictionary(Of T, ModularEnemy.EnemyBehaviorInterface)
  name.vb: Dictionary(Of T, ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Collections.Generic.List{ModularEnemy.EnemyBehaviorInterface}
  commentId: T:System.Collections.Generic.List{ModularEnemy.EnemyBehaviorInterface}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ModularEnemy.EnemyBehaviorInterface>
  nameWithType: List<ModularEnemy.EnemyBehaviorInterface>
  fullName: System.Collections.Generic.List<ModularEnemy.EnemyBehaviorInterface>
  nameWithType.vb: List(Of ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: System.Collections.Generic.List(Of ModularEnemy.EnemyBehaviorInterface)
  name.vb: List(Of ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior*
  commentId: Overload:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior
  name: SetInitialBehavior
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.SetInitialBehavior
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.SetInitialBehavior
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).SetInitialBehavior
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).SetInitialBehavior
- uid: Global.ModularEnemy
  commentId: T:Global.ModularEnemy
  name: ModularEnemy
  nameWithType: ModularEnemy
  fullName: ModularEnemy
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors*
  commentId: Overload:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors
  name: RegisterBehaviors
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviors
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviors
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviors
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviors
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior*
  commentId: Overload:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior
  name: RegisterBehavior
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehavior
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehavior
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehavior
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun*
  commentId: Overload:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun
  name: RegisterBehaviorAlwaysRun
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviorAlwaysRun
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviorAlwaysRun
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviorAlwaysRun
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviorAlwaysRun
- uid: Global.ModularEnemy.EnemyBehaviorInterface.Start(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterface.Start(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: Start(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterface.Start(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterface.Start(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterface.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterface.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start*
  commentId: Overload:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start
  name: Start
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Start
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Start
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Start
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Start
- uid: Global.ModularEnemy.EnemyBehaviorInterface.Update
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterface.Update
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: Update()
  nameWithType: ModularEnemy.EnemyBehaviorInterface.Update()
  fullName: ModularEnemy.EnemyBehaviorInterface.Update()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterface.Update
    name: Update
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterface.Update
    name: Update
  - name: (
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update*
  commentId: Overload:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
  name: Update
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Update
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Update
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Update
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Update
- uid: Global.ModularEnemy.EnemyBehaviorInterface.DrawGizmos(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterface.DrawGizmos(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: DrawGizmos(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterface.DrawGizmos(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterface.DrawGizmos(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterface.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterface.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos*
  commentId: Overload:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos
  name: DrawGizmos
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.DrawGizmos
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.DrawGizmos
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).DrawGizmos
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).DrawGizmos
- uid: Global.ModularEnemy.EnemyBehaviorInterface.OnRestart
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterface.OnRestart
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: OnRestart()
  nameWithType: ModularEnemy.EnemyBehaviorInterface.OnRestart()
  fullName: ModularEnemy.EnemyBehaviorInterface.OnRestart()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterface.OnRestart
    name: OnRestart
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterface.OnRestart
    name: OnRestart
  - name: (
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart*
  commentId: Overload:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
  name: OnRestart
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnRestart
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnRestart
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnRestart
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnRestart
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted*
  commentId: Overload:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted
  name: HasStarted
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.HasStarted
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.HasStarted
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).HasStarted
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).HasStarted
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.ModularEnemy.EnemyBehaviorInterface.OnKill(ModularEnemy,System.Boolean)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterface.OnKill(ModularEnemy,System.Boolean)
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  isExternal: true
  name: OnKill(ModularEnemy, bool)
  nameWithType: ModularEnemy.EnemyBehaviorInterface.OnKill(ModularEnemy, bool)
  fullName: ModularEnemy.EnemyBehaviorInterface.OnKill(ModularEnemy, bool)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterface.OnKill(ModularEnemy, Boolean)
  fullName.vb: ModularEnemy.EnemyBehaviorInterface.OnKill(ModularEnemy, Boolean)
  name.vb: OnKill(ModularEnemy, Boolean)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterface.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterface.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill*
  commentId: Overload:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill
  name: OnKill
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnKill
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnKill
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnKill
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnKill
- uid: Global.ModularEnemy.EnemyBehaviorInterface.OnResetObject(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterface.OnResetObject(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: OnResetObject(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterface.OnResetObject(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterface.OnResetObject(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterface.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterface.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject*
  commentId: Overload:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject
  name: OnResetObject
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnResetObject
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnResetObject
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnResetObject
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnResetObject
