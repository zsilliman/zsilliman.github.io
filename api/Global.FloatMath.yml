### YamlMime:ManagedReference
items:
- uid: Global.FloatMath
  commentId: T:Global.FloatMath
  id: FloatMath
  parent: Global
  children:
  - Global.FloatMath.Abs(UnityEngine.Vector2)
  - Global.FloatMath.Abs(UnityEngine.Vector3)
  - Global.FloatMath.Approximately(UnityEngine.Vector2,UnityEngine.Vector2)
  - Global.FloatMath.Approximately(UnityEngine.Vector3,UnityEngine.Vector3)
  - Global.FloatMath.Clamp(UnityEngine.Vector2,System.Single,System.Single)
  - Global.FloatMath.Clamp(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  - Global.FloatMath.FlipAngleAboutX(System.Single)
  - Global.FloatMath.Get2DNoise(System.Single)
  - Global.FloatMath.GetHillNoise(System.Single,System.Single)
  - Global.FloatMath.InBounds(System.Single,System.Single,System.Single,System.Boolean)
  - Global.FloatMath.InBounds(System.Single,UnityEngine.Vector2,System.Boolean)
  - Global.FloatMath.Modulo(System.Single,System.Int32)
  - Global.FloatMath.Modulo(System.Single,System.Single)
  - Global.FloatMath.NewtonRaphson(FloatMath.F,FloatMath.F2,UnityEngine.Vector2,System.Single,System.Int32)
  - Global.FloatMath.PolarToCartesian(System.Single,System.Single)
  - Global.FloatMath.Rotate90Degrees(UnityEngine.Vector2)
  - Global.FloatMath.RotateAbout(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  - Global.FloatMath.RotateAboutOrigin(UnityEngine.Vector2,System.Single)
  - Global.FloatMath.SafeNormalize(UnityEngine.Vector2,UnityEngine.Vector2)
  - Global.FloatMath.SafeNormalize(UnityEngine.Vector2)
  - Global.FloatMath.SignNonzero(System.Single,System.Int32)
  - Global.FloatMath.StepUpAndDown(System.Single,System.Single,System.Single,System.Single)
  - Global.FloatMath.StepUpAndDown01(System.Single,System.Single,System.Single)
  - Global.FloatMath.SumIfNotSameSign(System.Single,System.Single)
  - Global.FloatMath.SumIfSameSign(System.Single,System.Single)
  - Global.FloatMath.ToVector2(UnityEngine.Vector2Int)
  - Global.FloatMath.ToVector2(UnityEngine.Vector3)
  - Global.FloatMath.ToVector3(UnityEngine.Vector2,System.Single)
  - Global.FloatMath.ToVector3(UnityEngine.Vector2)
  - Global.FloatMath.ToVector4(UnityEngine.Vector2,System.Single,System.Single)
  - Global.FloatMath.UnclampedInverseLerp(System.Single,System.Single,System.Single)
  langs:
  - csharp
  - vb
  name: FloatMath
  nameWithType: FloatMath
  fullName: FloatMath
  type: Class
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: FloatMath
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 4
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static class FloatMath
    content.vb: Public Module FloatMath
  inheritance:
  - System.Object
- uid: Global.FloatMath.InBounds(System.Single,System.Single,System.Single,System.Boolean)
  commentId: M:Global.FloatMath.InBounds(System.Single,System.Single,System.Single,System.Boolean)
  id: InBounds(System.Single,System.Single,System.Single,System.Boolean)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: InBounds(float, float, float, bool)
  nameWithType: FloatMath.InBounds(float, float, float, bool)
  fullName: FloatMath.InBounds(float, float, float, bool)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: InBounds
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 6
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static bool InBounds(float a, float min, float max, bool inclusive = true)
    parameters:
    - id: a
      type: System.Single
    - id: min
      type: System.Single
    - id: max
      type: System.Single
    - id: inclusive
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Public Shared Function InBounds(a As Single, min As Single, max As Single, inclusive As Boolean = True) As Boolean
  overload: Global.FloatMath.InBounds*
  nameWithType.vb: FloatMath.InBounds(Single, Single, Single, Boolean)
  fullName.vb: FloatMath.InBounds(Single, Single, Single, Boolean)
  name.vb: InBounds(Single, Single, Single, Boolean)
- uid: Global.FloatMath.InBounds(System.Single,UnityEngine.Vector2,System.Boolean)
  commentId: M:Global.FloatMath.InBounds(System.Single,UnityEngine.Vector2,System.Boolean)
  id: InBounds(System.Single,UnityEngine.Vector2,System.Boolean)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: InBounds(float, Vector2, bool)
  nameWithType: FloatMath.InBounds(float, Vector2, bool)
  fullName: FloatMath.InBounds(float, UnityEngine.Vector2, bool)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: InBounds
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 13
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static bool InBounds(float a, Vector2 bounds, bool inclusive = true)
    parameters:
    - id: a
      type: System.Single
    - id: bounds
      type: UnityEngine.Vector2
    - id: inclusive
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Public Shared Function InBounds(a As Single, bounds As Vector2, inclusive As Boolean = True) As Boolean
  overload: Global.FloatMath.InBounds*
  nameWithType.vb: FloatMath.InBounds(Single, Vector2, Boolean)
  fullName.vb: FloatMath.InBounds(Single, UnityEngine.Vector2, Boolean)
  name.vb: InBounds(Single, Vector2, Boolean)
- uid: Global.FloatMath.Approximately(UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:Global.FloatMath.Approximately(UnityEngine.Vector2,UnityEngine.Vector2)
  id: Approximately(UnityEngine.Vector2,UnityEngine.Vector2)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: Approximately(Vector2, Vector2)
  nameWithType: FloatMath.Approximately(Vector2, Vector2)
  fullName: FloatMath.Approximately(UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Approximately
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 18
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static bool Approximately(Vector2 A, Vector2 B)
    parameters:
    - id: A
      type: UnityEngine.Vector2
    - id: B
      type: UnityEngine.Vector2
    return:
      type: System.Boolean
    content.vb: Public Shared Function Approximately(A As Vector2, B As Vector2) As Boolean
  overload: Global.FloatMath.Approximately*
- uid: Global.FloatMath.Approximately(UnityEngine.Vector3,UnityEngine.Vector3)
  commentId: M:Global.FloatMath.Approximately(UnityEngine.Vector3,UnityEngine.Vector3)
  id: Approximately(UnityEngine.Vector3,UnityEngine.Vector3)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: Approximately(Vector3, Vector3)
  nameWithType: FloatMath.Approximately(Vector3, Vector3)
  fullName: FloatMath.Approximately(UnityEngine.Vector3, UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Approximately
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 23
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static bool Approximately(Vector3 A, Vector3 B)
    parameters:
    - id: A
      type: UnityEngine.Vector3
    - id: B
      type: UnityEngine.Vector3
    return:
      type: System.Boolean
    content.vb: Public Shared Function Approximately(A As Vector3, B As Vector3) As Boolean
  overload: Global.FloatMath.Approximately*
- uid: Global.FloatMath.Clamp(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:Global.FloatMath.Clamp(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  id: Clamp(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: Clamp(Vector2, Vector2, Vector2)
  nameWithType: FloatMath.Clamp(Vector2, Vector2, Vector2)
  fullName: FloatMath.Clamp(UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Clamp
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 28
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector2 Clamp(Vector2 V, Vector2 A, Vector2 B)
    parameters:
    - id: V
      type: UnityEngine.Vector2
    - id: A
      type: UnityEngine.Vector2
    - id: B
      type: UnityEngine.Vector2
    return:
      type: UnityEngine.Vector2
    content.vb: Public Shared Function Clamp(V As Vector2, A As Vector2, B As Vector2) As Vector2
  overload: Global.FloatMath.Clamp*
- uid: Global.FloatMath.Clamp(UnityEngine.Vector2,System.Single,System.Single)
  commentId: M:Global.FloatMath.Clamp(UnityEngine.Vector2,System.Single,System.Single)
  id: Clamp(UnityEngine.Vector2,System.Single,System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: Clamp(Vector2, float, float)
  nameWithType: FloatMath.Clamp(Vector2, float, float)
  fullName: FloatMath.Clamp(UnityEngine.Vector2, float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Clamp
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 33
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector2 Clamp(Vector2 V, float a, float b)
    parameters:
    - id: V
      type: UnityEngine.Vector2
    - id: a
      type: System.Single
    - id: b
      type: System.Single
    return:
      type: UnityEngine.Vector2
    content.vb: Public Shared Function Clamp(V As Vector2, a As Single, b As Single) As Vector2
  overload: Global.FloatMath.Clamp*
  nameWithType.vb: FloatMath.Clamp(Vector2, Single, Single)
  fullName.vb: FloatMath.Clamp(UnityEngine.Vector2, Single, Single)
  name.vb: Clamp(Vector2, Single, Single)
- uid: Global.FloatMath.UnclampedInverseLerp(System.Single,System.Single,System.Single)
  commentId: M:Global.FloatMath.UnclampedInverseLerp(System.Single,System.Single,System.Single)
  id: UnclampedInverseLerp(System.Single,System.Single,System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: UnclampedInverseLerp(float, float, float)
  nameWithType: FloatMath.UnclampedInverseLerp(float, float, float)
  fullName: FloatMath.UnclampedInverseLerp(float, float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: UnclampedInverseLerp
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 38
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static float UnclampedInverseLerp(float a, float b, float value)
    parameters:
    - id: a
      type: System.Single
    - id: b
      type: System.Single
    - id: value
      type: System.Single
    return:
      type: System.Single
    content.vb: Public Shared Function UnclampedInverseLerp(a As Single, b As Single, value As Single) As Single
  overload: Global.FloatMath.UnclampedInverseLerp*
  nameWithType.vb: FloatMath.UnclampedInverseLerp(Single, Single, Single)
  fullName.vb: FloatMath.UnclampedInverseLerp(Single, Single, Single)
  name.vb: UnclampedInverseLerp(Single, Single, Single)
- uid: Global.FloatMath.RotateAboutOrigin(UnityEngine.Vector2,System.Single)
  commentId: M:Global.FloatMath.RotateAboutOrigin(UnityEngine.Vector2,System.Single)
  id: RotateAboutOrigin(UnityEngine.Vector2,System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: RotateAboutOrigin(Vector2, float)
  nameWithType: FloatMath.RotateAboutOrigin(Vector2, float)
  fullName: FloatMath.RotateAboutOrigin(UnityEngine.Vector2, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RotateAboutOrigin
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 51
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nRotate vector about origin in degrees\n"
  example: []
  syntax:
    content: public static Vector2 RotateAboutOrigin(Vector2 vector, float amount)
    parameters:
    - id: vector
      type: UnityEngine.Vector2
      description: ''
    - id: amount
      type: System.Single
      description: Degrees
    return:
      type: UnityEngine.Vector2
      description: ''
    content.vb: Public Shared Function RotateAboutOrigin(vector As Vector2, amount As Single) As Vector2
  overload: Global.FloatMath.RotateAboutOrigin*
  nameWithType.vb: FloatMath.RotateAboutOrigin(Vector2, Single)
  fullName.vb: FloatMath.RotateAboutOrigin(UnityEngine.Vector2, Single)
  name.vb: RotateAboutOrigin(Vector2, Single)
- uid: Global.FloatMath.RotateAbout(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  commentId: M:Global.FloatMath.RotateAbout(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  id: RotateAbout(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: RotateAbout(Vector2, Vector2, float)
  nameWithType: FloatMath.RotateAbout(Vector2, Vector2, float)
  fullName: FloatMath.RotateAbout(UnityEngine.Vector2, UnityEngine.Vector2, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RotateAbout
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 65
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nRotate vector about origin in degrees\n"
  example: []
  syntax:
    content: public static Vector2 RotateAbout(Vector2 point, Vector2 origin, float amount)
    parameters:
    - id: point
      type: UnityEngine.Vector2
    - id: origin
      type: UnityEngine.Vector2
    - id: amount
      type: System.Single
      description: ''
    return:
      type: UnityEngine.Vector2
      description: ''
    content.vb: Public Shared Function RotateAbout(point As Vector2, origin As Vector2, amount As Single) As Vector2
  overload: Global.FloatMath.RotateAbout*
  nameWithType.vb: FloatMath.RotateAbout(Vector2, Vector2, Single)
  fullName.vb: FloatMath.RotateAbout(UnityEngine.Vector2, UnityEngine.Vector2, Single)
  name.vb: RotateAbout(Vector2, Vector2, Single)
- uid: Global.FloatMath.Rotate90Degrees(UnityEngine.Vector2)
  commentId: M:Global.FloatMath.Rotate90Degrees(UnityEngine.Vector2)
  id: Rotate90Degrees(UnityEngine.Vector2)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: Rotate90Degrees(Vector2)
  nameWithType: FloatMath.Rotate90Degrees(Vector2)
  fullName: FloatMath.Rotate90Degrees(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Rotate90Degrees
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 77
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nRotate vector about origin by 90 degrees. No trig functions used\n"
  example: []
  syntax:
    content: public static Vector2 Rotate90Degrees(Vector2 vector)
    parameters:
    - id: vector
      type: UnityEngine.Vector2
      description: ''
    return:
      type: UnityEngine.Vector2
      description: ''
    content.vb: Public Shared Function Rotate90Degrees(vector As Vector2) As Vector2
  overload: Global.FloatMath.Rotate90Degrees*
- uid: Global.FloatMath.FlipAngleAboutX(System.Single)
  commentId: M:Global.FloatMath.FlipAngleAboutX(System.Single)
  id: FlipAngleAboutX(System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: FlipAngleAboutX(float)
  nameWithType: FloatMath.FlipAngleAboutX(float)
  fullName: FloatMath.FlipAngleAboutX(float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: FlipAngleAboutX
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 87
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nFlip an angle about the x-axis\n"
  example: []
  syntax:
    content: public static float FlipAngleAboutX(float angle)
    parameters:
    - id: angle
      type: System.Single
      description: angle in degrees
    return:
      type: System.Single
      description: new angle flipped across x-axis
    content.vb: Public Shared Function FlipAngleAboutX(angle As Single) As Single
  overload: Global.FloatMath.FlipAngleAboutX*
  nameWithType.vb: FloatMath.FlipAngleAboutX(Single)
  fullName.vb: FloatMath.FlipAngleAboutX(Single)
  name.vb: FlipAngleAboutX(Single)
- uid: Global.FloatMath.SafeNormalize(UnityEngine.Vector2)
  commentId: M:Global.FloatMath.SafeNormalize(UnityEngine.Vector2)
  id: SafeNormalize(UnityEngine.Vector2)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: SafeNormalize(Vector2)
  nameWithType: FloatMath.SafeNormalize(Vector2)
  fullName: FloatMath.SafeNormalize(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SafeNormalize
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 93
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector2 SafeNormalize(Vector2 vector)
    parameters:
    - id: vector
      type: UnityEngine.Vector2
    return:
      type: UnityEngine.Vector2
    content.vb: Public Shared Function SafeNormalize(vector As Vector2) As Vector2
  overload: Global.FloatMath.SafeNormalize*
- uid: Global.FloatMath.SafeNormalize(UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:Global.FloatMath.SafeNormalize(UnityEngine.Vector2,UnityEngine.Vector2)
  id: SafeNormalize(UnityEngine.Vector2,UnityEngine.Vector2)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: SafeNormalize(Vector2, Vector2)
  nameWithType: FloatMath.SafeNormalize(Vector2, Vector2)
  fullName: FloatMath.SafeNormalize(UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SafeNormalize
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 98
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector2 SafeNormalize(Vector2 vector, Vector2 defaultValue)
    parameters:
    - id: vector
      type: UnityEngine.Vector2
    - id: defaultValue
      type: UnityEngine.Vector2
    return:
      type: UnityEngine.Vector2
    content.vb: Public Shared Function SafeNormalize(vector As Vector2, defaultValue As Vector2) As Vector2
  overload: Global.FloatMath.SafeNormalize*
- uid: Global.FloatMath.SignNonzero(System.Single,System.Int32)
  commentId: M:Global.FloatMath.SignNonzero(System.Single,System.Int32)
  id: SignNonzero(System.Single,System.Int32)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: SignNonzero(float, int)
  nameWithType: FloatMath.SignNonzero(float, int)
  fullName: FloatMath.SignNonzero(float, int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SignNonzero
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 105
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static int SignNonzero(float value, int ValIfZero = 1)
    parameters:
    - id: value
      type: System.Single
    - id: ValIfZero
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Shared Function SignNonzero(value As Single, ValIfZero As Integer = 1) As Integer
  overload: Global.FloatMath.SignNonzero*
  nameWithType.vb: FloatMath.SignNonzero(Single, Integer)
  fullName.vb: FloatMath.SignNonzero(Single, Integer)
  name.vb: SignNonzero(Single, Integer)
- uid: Global.FloatMath.SumIfSameSign(System.Single,System.Single)
  commentId: M:Global.FloatMath.SumIfSameSign(System.Single,System.Single)
  id: SumIfSameSign(System.Single,System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: SumIfSameSign(float, float)
  nameWithType: FloatMath.SumIfSameSign(float, float)
  fullName: FloatMath.SumIfSameSign(float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SumIfSameSign
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 114
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static float SumIfSameSign(float a, float b)
    parameters:
    - id: a
      type: System.Single
    - id: b
      type: System.Single
    return:
      type: System.Single
    content.vb: Public Shared Function SumIfSameSign(a As Single, b As Single) As Single
  overload: Global.FloatMath.SumIfSameSign*
  nameWithType.vb: FloatMath.SumIfSameSign(Single, Single)
  fullName.vb: FloatMath.SumIfSameSign(Single, Single)
  name.vb: SumIfSameSign(Single, Single)
- uid: Global.FloatMath.SumIfNotSameSign(System.Single,System.Single)
  commentId: M:Global.FloatMath.SumIfNotSameSign(System.Single,System.Single)
  id: SumIfNotSameSign(System.Single,System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: SumIfNotSameSign(float, float)
  nameWithType: FloatMath.SumIfNotSameSign(float, float)
  fullName: FloatMath.SumIfNotSameSign(float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SumIfNotSameSign
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 121
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static float SumIfNotSameSign(float a, float b)
    parameters:
    - id: a
      type: System.Single
    - id: b
      type: System.Single
    return:
      type: System.Single
    content.vb: Public Shared Function SumIfNotSameSign(a As Single, b As Single) As Single
  overload: Global.FloatMath.SumIfNotSameSign*
  nameWithType.vb: FloatMath.SumIfNotSameSign(Single, Single)
  fullName.vb: FloatMath.SumIfNotSameSign(Single, Single)
  name.vb: SumIfNotSameSign(Single, Single)
- uid: Global.FloatMath.Abs(UnityEngine.Vector2)
  commentId: M:Global.FloatMath.Abs(UnityEngine.Vector2)
  id: Abs(UnityEngine.Vector2)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: Abs(Vector2)
  nameWithType: FloatMath.Abs(Vector2)
  fullName: FloatMath.Abs(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Abs
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 128
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector3 Abs(Vector2 A)
    parameters:
    - id: A
      type: UnityEngine.Vector2
    return:
      type: UnityEngine.Vector3
    content.vb: Public Shared Function Abs(A As Vector2) As Vector3
  overload: Global.FloatMath.Abs*
- uid: Global.FloatMath.Abs(UnityEngine.Vector3)
  commentId: M:Global.FloatMath.Abs(UnityEngine.Vector3)
  id: Abs(UnityEngine.Vector3)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: Abs(Vector3)
  nameWithType: FloatMath.Abs(Vector3)
  fullName: FloatMath.Abs(UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Abs
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 133
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector3 Abs(Vector3 A)
    parameters:
    - id: A
      type: UnityEngine.Vector3
    return:
      type: UnityEngine.Vector3
    content.vb: Public Shared Function Abs(A As Vector3) As Vector3
  overload: Global.FloatMath.Abs*
- uid: Global.FloatMath.ToVector2(UnityEngine.Vector2Int)
  commentId: M:Global.FloatMath.ToVector2(UnityEngine.Vector2Int)
  id: ToVector2(UnityEngine.Vector2Int)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: ToVector2(Vector2Int)
  nameWithType: FloatMath.ToVector2(Vector2Int)
  fullName: FloatMath.ToVector2(UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ToVector2
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 138
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector2 ToVector2(Vector2Int v)
    parameters:
    - id: v
      type: UnityEngine.Vector2Int
    return:
      type: UnityEngine.Vector2
    content.vb: Public Shared Function ToVector2(v As Vector2Int) As Vector2
  overload: Global.FloatMath.ToVector2*
- uid: Global.FloatMath.ToVector2(UnityEngine.Vector3)
  commentId: M:Global.FloatMath.ToVector2(UnityEngine.Vector3)
  id: ToVector2(UnityEngine.Vector3)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: ToVector2(Vector3)
  nameWithType: FloatMath.ToVector2(Vector3)
  fullName: FloatMath.ToVector2(UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ToVector2
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 143
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector2 ToVector2(Vector3 v)
    parameters:
    - id: v
      type: UnityEngine.Vector3
    return:
      type: UnityEngine.Vector2
    content.vb: Public Shared Function ToVector2(v As Vector3) As Vector2
  overload: Global.FloatMath.ToVector2*
- uid: Global.FloatMath.ToVector3(UnityEngine.Vector2)
  commentId: M:Global.FloatMath.ToVector3(UnityEngine.Vector2)
  id: ToVector3(UnityEngine.Vector2)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: ToVector3(Vector2)
  nameWithType: FloatMath.ToVector3(Vector2)
  fullName: FloatMath.ToVector3(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ToVector3
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 148
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector3 ToVector3(Vector2 v)
    parameters:
    - id: v
      type: UnityEngine.Vector2
    return:
      type: UnityEngine.Vector3
    content.vb: Public Shared Function ToVector3(v As Vector2) As Vector3
  overload: Global.FloatMath.ToVector3*
- uid: Global.FloatMath.ToVector3(UnityEngine.Vector2,System.Single)
  commentId: M:Global.FloatMath.ToVector3(UnityEngine.Vector2,System.Single)
  id: ToVector3(UnityEngine.Vector2,System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: ToVector3(Vector2, float)
  nameWithType: FloatMath.ToVector3(Vector2, float)
  fullName: FloatMath.ToVector3(UnityEngine.Vector2, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ToVector3
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 153
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector3 ToVector3(Vector2 v, float z)
    parameters:
    - id: v
      type: UnityEngine.Vector2
    - id: z
      type: System.Single
    return:
      type: UnityEngine.Vector3
    content.vb: Public Shared Function ToVector3(v As Vector2, z As Single) As Vector3
  overload: Global.FloatMath.ToVector3*
  nameWithType.vb: FloatMath.ToVector3(Vector2, Single)
  fullName.vb: FloatMath.ToVector3(UnityEngine.Vector2, Single)
  name.vb: ToVector3(Vector2, Single)
- uid: Global.FloatMath.ToVector4(UnityEngine.Vector2,System.Single,System.Single)
  commentId: M:Global.FloatMath.ToVector4(UnityEngine.Vector2,System.Single,System.Single)
  id: ToVector4(UnityEngine.Vector2,System.Single,System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: ToVector4(Vector2, float, float)
  nameWithType: FloatMath.ToVector4(Vector2, float, float)
  fullName: FloatMath.ToVector4(UnityEngine.Vector2, float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ToVector4
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 158
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector4 ToVector4(Vector2 v, float z = 0, float w = 0)
    parameters:
    - id: v
      type: UnityEngine.Vector2
    - id: z
      type: System.Single
    - id: w
      type: System.Single
    return:
      type: UnityEngine.Vector4
    content.vb: Public Shared Function ToVector4(v As Vector2, z As Single = 0, w As Single = 0) As Vector4
  overload: Global.FloatMath.ToVector4*
  nameWithType.vb: FloatMath.ToVector4(Vector2, Single, Single)
  fullName.vb: FloatMath.ToVector4(UnityEngine.Vector2, Single, Single)
  name.vb: ToVector4(Vector2, Single, Single)
- uid: Global.FloatMath.Modulo(System.Single,System.Int32)
  commentId: M:Global.FloatMath.Modulo(System.Single,System.Int32)
  id: Modulo(System.Single,System.Int32)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: Modulo(float, int)
  nameWithType: FloatMath.Modulo(float, int)
  fullName: FloatMath.Modulo(float, int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Modulo
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 163
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static float Modulo(float a, int b)
    parameters:
    - id: a
      type: System.Single
    - id: b
      type: System.Int32
    return:
      type: System.Single
    content.vb: Public Shared Function Modulo(a As Single, b As Integer) As Single
  overload: Global.FloatMath.Modulo*
  nameWithType.vb: FloatMath.Modulo(Single, Integer)
  fullName.vb: FloatMath.Modulo(Single, Integer)
  name.vb: Modulo(Single, Integer)
- uid: Global.FloatMath.Modulo(System.Single,System.Single)
  commentId: M:Global.FloatMath.Modulo(System.Single,System.Single)
  id: Modulo(System.Single,System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: Modulo(float, float)
  nameWithType: FloatMath.Modulo(float, float)
  fullName: FloatMath.Modulo(float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Modulo
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 168
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static float Modulo(float a, float b)
    parameters:
    - id: a
      type: System.Single
    - id: b
      type: System.Single
    return:
      type: System.Single
    content.vb: Public Shared Function Modulo(a As Single, b As Single) As Single
  overload: Global.FloatMath.Modulo*
  nameWithType.vb: FloatMath.Modulo(Single, Single)
  fullName.vb: FloatMath.Modulo(Single, Single)
  name.vb: Modulo(Single, Single)
- uid: Global.FloatMath.PolarToCartesian(System.Single,System.Single)
  commentId: M:Global.FloatMath.PolarToCartesian(System.Single,System.Single)
  id: PolarToCartesian(System.Single,System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: PolarToCartesian(float, float)
  nameWithType: FloatMath.PolarToCartesian(float, float)
  fullName: FloatMath.PolarToCartesian(float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: PolarToCartesian
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 173
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector2 PolarToCartesian(float r, float theta)
    parameters:
    - id: r
      type: System.Single
    - id: theta
      type: System.Single
    return:
      type: UnityEngine.Vector2
    content.vb: Public Shared Function PolarToCartesian(r As Single, theta As Single) As Vector2
  overload: Global.FloatMath.PolarToCartesian*
  nameWithType.vb: FloatMath.PolarToCartesian(Single, Single)
  fullName.vb: FloatMath.PolarToCartesian(Single, Single)
  name.vb: PolarToCartesian(Single, Single)
- uid: Global.FloatMath.NewtonRaphson(FloatMath.F,FloatMath.F2,UnityEngine.Vector2,System.Single,System.Int32)
  commentId: M:Global.FloatMath.NewtonRaphson(FloatMath.F,FloatMath.F2,UnityEngine.Vector2,System.Single,System.Int32)
  id: NewtonRaphson(FloatMath.F,FloatMath.F2,UnityEngine.Vector2,System.Single,System.Int32)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: NewtonRaphson(F, F2, Vector2, float, int)
  nameWithType: FloatMath.NewtonRaphson(FloatMath.F, FloatMath.F2, Vector2, float, int)
  fullName: FloatMath.NewtonRaphson(FloatMath.F, FloatMath.F2, UnityEngine.Vector2, float, int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: NewtonRaphson
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 184
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector2 NewtonRaphson(FloatMath.F f, FloatMath.F2 df, Vector2 X, float epsilon, int maxIterations)
    parameters:
    - id: f
      type: Global.FloatMath.F
    - id: df
      type: Global.FloatMath.F2
    - id: X
      type: UnityEngine.Vector2
    - id: epsilon
      type: System.Single
    - id: maxIterations
      type: System.Int32
    return:
      type: UnityEngine.Vector2
    content.vb: Public Shared Function NewtonRaphson(f As FloatMath.F, df As FloatMath.F2, X As Vector2, epsilon As Single, maxIterations As Integer) As Vector2
  overload: Global.FloatMath.NewtonRaphson*
  nameWithType.vb: FloatMath.NewtonRaphson(FloatMath.F, FloatMath.F2, Vector2, Single, Integer)
  fullName.vb: FloatMath.NewtonRaphson(FloatMath.F, FloatMath.F2, UnityEngine.Vector2, Single, Integer)
  name.vb: NewtonRaphson(F, F2, Vector2, Single, Integer)
- uid: Global.FloatMath.Get2DNoise(System.Single)
  commentId: M:Global.FloatMath.Get2DNoise(System.Single)
  id: Get2DNoise(System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: Get2DNoise(float)
  nameWithType: FloatMath.Get2DNoise(float)
  fullName: FloatMath.Get2DNoise(float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Get2DNoise
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 202
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static Vector2 Get2DNoise(float t)
    parameters:
    - id: t
      type: System.Single
    return:
      type: UnityEngine.Vector2
    content.vb: Public Shared Function Get2DNoise(t As Single) As Vector2
  overload: Global.FloatMath.Get2DNoise*
  nameWithType.vb: FloatMath.Get2DNoise(Single)
  fullName.vb: FloatMath.Get2DNoise(Single)
  name.vb: Get2DNoise(Single)
- uid: Global.FloatMath.StepUpAndDown01(System.Single,System.Single,System.Single)
  commentId: M:Global.FloatMath.StepUpAndDown01(System.Single,System.Single,System.Single)
  id: StepUpAndDown01(System.Single,System.Single,System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: StepUpAndDown01(float, float, float)
  nameWithType: FloatMath.StepUpAndDown01(float, float, float)
  fullName: FloatMath.StepUpAndDown01(float, float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: StepUpAndDown01
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 212
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static float StepUpAndDown01(float flatdist, float lerpdist, float x)
    parameters:
    - id: flatdist
      type: System.Single
    - id: lerpdist
      type: System.Single
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: Public Shared Function StepUpAndDown01(flatdist As Single, lerpdist As Single, x As Single) As Single
  overload: Global.FloatMath.StepUpAndDown01*
  nameWithType.vb: FloatMath.StepUpAndDown01(Single, Single, Single)
  fullName.vb: FloatMath.StepUpAndDown01(Single, Single, Single)
  name.vb: StepUpAndDown01(Single, Single, Single)
- uid: Global.FloatMath.StepUpAndDown(System.Single,System.Single,System.Single,System.Single)
  commentId: M:Global.FloatMath.StepUpAndDown(System.Single,System.Single,System.Single,System.Single)
  id: StepUpAndDown(System.Single,System.Single,System.Single,System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: StepUpAndDown(float, float, float, float)
  nameWithType: FloatMath.StepUpAndDown(float, float, float, float)
  fullName: FloatMath.StepUpAndDown(float, float, float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: StepUpAndDown
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 217
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static float StepUpAndDown(float width, float flatdist, float lerpdist, float x)
    parameters:
    - id: width
      type: System.Single
    - id: flatdist
      type: System.Single
    - id: lerpdist
      type: System.Single
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: Public Shared Function StepUpAndDown(width As Single, flatdist As Single, lerpdist As Single, x As Single) As Single
  overload: Global.FloatMath.StepUpAndDown*
  nameWithType.vb: FloatMath.StepUpAndDown(Single, Single, Single, Single)
  fullName.vb: FloatMath.StepUpAndDown(Single, Single, Single, Single)
  name.vb: StepUpAndDown(Single, Single, Single, Single)
- uid: Global.FloatMath.GetHillNoise(System.Single,System.Single)
  commentId: M:Global.FloatMath.GetHillNoise(System.Single,System.Single)
  id: GetHillNoise(System.Single,System.Single)
  parent: Global.FloatMath
  langs:
  - csharp
  - vb
  name: GetHillNoise(float, float)
  nameWithType: FloatMath.GetHillNoise(float, float)
  fullName: FloatMath.GetHillNoise(float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/Math/FloatMath.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetHillNoise
    path: ../Assets/Framework/Util/Math/FloatMath.cs
    startLine: 251
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nGet noise used to generate a procedural hill\n"
  example: []
  syntax:
    content: public static float GetHillNoise(float x, float seed = 0)
    parameters:
    - id: x
      type: System.Single
    - id: seed
      type: System.Single
    return:
      type: System.Single
      description: Hill intensity in range [0,1]
    content.vb: Public Shared Function GetHillNoise(x As Single, seed As Single = 0) As Single
  overload: Global.FloatMath.GetHillNoise*
  nameWithType.vb: FloatMath.GetHillNoise(Single, Single)
  fullName.vb: FloatMath.GetHillNoise(Single, Single)
  name.vb: GetHillNoise(Single, Single)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.FloatMath.InBounds*
  commentId: Overload:Global.FloatMath.InBounds
  name: InBounds
  nameWithType: FloatMath.InBounds
  fullName: FloatMath.InBounds
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: UnityEngine.Vector2
  commentId: T:UnityEngine.Vector2
  parent: UnityEngine
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.FloatMath.Approximately*
  commentId: Overload:Global.FloatMath.Approximately
  name: Approximately
  nameWithType: FloatMath.Approximately
  fullName: FloatMath.Approximately
- uid: UnityEngine.Vector3
  commentId: T:UnityEngine.Vector3
  parent: UnityEngine
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: UnityEngine.Vector3
- uid: Global.FloatMath.Clamp*
  commentId: Overload:Global.FloatMath.Clamp
  name: Clamp
  nameWithType: FloatMath.Clamp
  fullName: FloatMath.Clamp
- uid: Global.FloatMath.UnclampedInverseLerp*
  commentId: Overload:Global.FloatMath.UnclampedInverseLerp
  name: UnclampedInverseLerp
  nameWithType: FloatMath.UnclampedInverseLerp
  fullName: FloatMath.UnclampedInverseLerp
- uid: Global.FloatMath.RotateAboutOrigin*
  commentId: Overload:Global.FloatMath.RotateAboutOrigin
  name: RotateAboutOrigin
  nameWithType: FloatMath.RotateAboutOrigin
  fullName: FloatMath.RotateAboutOrigin
- uid: Global.FloatMath.RotateAbout*
  commentId: Overload:Global.FloatMath.RotateAbout
  name: RotateAbout
  nameWithType: FloatMath.RotateAbout
  fullName: FloatMath.RotateAbout
- uid: Global.FloatMath.Rotate90Degrees*
  commentId: Overload:Global.FloatMath.Rotate90Degrees
  name: Rotate90Degrees
  nameWithType: FloatMath.Rotate90Degrees
  fullName: FloatMath.Rotate90Degrees
- uid: Global.FloatMath.FlipAngleAboutX*
  commentId: Overload:Global.FloatMath.FlipAngleAboutX
  name: FlipAngleAboutX
  nameWithType: FloatMath.FlipAngleAboutX
  fullName: FloatMath.FlipAngleAboutX
- uid: Global.FloatMath.SafeNormalize*
  commentId: Overload:Global.FloatMath.SafeNormalize
  name: SafeNormalize
  nameWithType: FloatMath.SafeNormalize
  fullName: FloatMath.SafeNormalize
- uid: Global.FloatMath.SignNonzero*
  commentId: Overload:Global.FloatMath.SignNonzero
  name: SignNonzero
  nameWithType: FloatMath.SignNonzero
  fullName: FloatMath.SignNonzero
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.FloatMath.SumIfSameSign*
  commentId: Overload:Global.FloatMath.SumIfSameSign
  name: SumIfSameSign
  nameWithType: FloatMath.SumIfSameSign
  fullName: FloatMath.SumIfSameSign
- uid: Global.FloatMath.SumIfNotSameSign*
  commentId: Overload:Global.FloatMath.SumIfNotSameSign
  name: SumIfNotSameSign
  nameWithType: FloatMath.SumIfNotSameSign
  fullName: FloatMath.SumIfNotSameSign
- uid: Global.FloatMath.Abs*
  commentId: Overload:Global.FloatMath.Abs
  name: Abs
  nameWithType: FloatMath.Abs
  fullName: FloatMath.Abs
- uid: Global.FloatMath.ToVector2*
  commentId: Overload:Global.FloatMath.ToVector2
  name: ToVector2
  nameWithType: FloatMath.ToVector2
  fullName: FloatMath.ToVector2
- uid: UnityEngine.Vector2Int
  commentId: T:UnityEngine.Vector2Int
  parent: UnityEngine
  isExternal: true
  name: Vector2Int
  nameWithType: Vector2Int
  fullName: UnityEngine.Vector2Int
- uid: Global.FloatMath.ToVector3*
  commentId: Overload:Global.FloatMath.ToVector3
  name: ToVector3
  nameWithType: FloatMath.ToVector3
  fullName: FloatMath.ToVector3
- uid: Global.FloatMath.ToVector4*
  commentId: Overload:Global.FloatMath.ToVector4
  name: ToVector4
  nameWithType: FloatMath.ToVector4
  fullName: FloatMath.ToVector4
- uid: UnityEngine.Vector4
  commentId: T:UnityEngine.Vector4
  parent: UnityEngine
  isExternal: true
  name: Vector4
  nameWithType: Vector4
  fullName: UnityEngine.Vector4
- uid: Global.FloatMath.Modulo*
  commentId: Overload:Global.FloatMath.Modulo
  name: Modulo
  nameWithType: FloatMath.Modulo
  fullName: FloatMath.Modulo
- uid: Global.FloatMath.PolarToCartesian*
  commentId: Overload:Global.FloatMath.PolarToCartesian
  name: PolarToCartesian
  nameWithType: FloatMath.PolarToCartesian
  fullName: FloatMath.PolarToCartesian
- uid: Global.FloatMath.NewtonRaphson*
  commentId: Overload:Global.FloatMath.NewtonRaphson
  name: NewtonRaphson
  nameWithType: FloatMath.NewtonRaphson
  fullName: FloatMath.NewtonRaphson
- uid: Global.FloatMath.F
  commentId: T:Global.FloatMath.F
  name: FloatMath.F
  nameWithType: FloatMath.F
  fullName: FloatMath.F
  spec.csharp:
  - uid: Global.FloatMath
    name: FloatMath
  - name: .
  - uid: Global.FloatMath.F
    name: F
  spec.vb:
  - uid: Global.FloatMath
    name: FloatMath
  - name: .
  - uid: Global.FloatMath.F
    name: F
- uid: Global.FloatMath.F2
  commentId: T:Global.FloatMath.F2
  name: FloatMath.F2
  nameWithType: FloatMath.F2
  fullName: FloatMath.F2
  spec.csharp:
  - uid: Global.FloatMath
    name: FloatMath
  - name: .
  - uid: Global.FloatMath.F2
    name: F2
  spec.vb:
  - uid: Global.FloatMath
    name: FloatMath
  - name: .
  - uid: Global.FloatMath.F2
    name: F2
- uid: Global.FloatMath.Get2DNoise*
  commentId: Overload:Global.FloatMath.Get2DNoise
  name: Get2DNoise
  nameWithType: FloatMath.Get2DNoise
  fullName: FloatMath.Get2DNoise
- uid: Global.FloatMath.StepUpAndDown01*
  commentId: Overload:Global.FloatMath.StepUpAndDown01
  name: StepUpAndDown01
  nameWithType: FloatMath.StepUpAndDown01
  fullName: FloatMath.StepUpAndDown01
- uid: Global.FloatMath.StepUpAndDown*
  commentId: Overload:Global.FloatMath.StepUpAndDown
  name: StepUpAndDown
  nameWithType: FloatMath.StepUpAndDown
  fullName: FloatMath.StepUpAndDown
- uid: Global.FloatMath.GetHillNoise*
  commentId: Overload:Global.FloatMath.GetHillNoise
  name: GetHillNoise
  nameWithType: FloatMath.GetHillNoise
  fullName: FloatMath.GetHillNoise
