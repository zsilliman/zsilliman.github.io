### YamlMime:ManagedReference
items:
- uid: Global.PlainsGenerator.PlainsProperties
  commentId: T:Global.PlainsGenerator.PlainsProperties
  id: PlainsGenerator.PlainsProperties
  parent: Global
  children:
  - Global.PlainsGenerator.PlainsProperties.CameraOrthographicSize
  - Global.PlainsGenerator.PlainsProperties.FlyingEnemies
  - Global.PlainsGenerator.PlainsProperties.FlyingEnemyDensity
  - Global.PlainsGenerator.PlainsProperties.GroundEnemies
  - Global.PlainsGenerator.PlainsProperties.GroundEnemyDensity
  - Global.PlainsGenerator.PlainsProperties.ParallaxPrefab
  - Global.PlainsGenerator.PlainsProperties.SetPieceDensity
  - Global.PlainsGenerator.PlainsProperties.SetPieces
  - Global.PlainsGenerator.PlainsProperties.Tile
  langs:
  - csharp
  - vb
  name: PlainsGenerator.PlainsProperties
  nameWithType: PlainsGenerator.PlainsProperties
  fullName: PlainsGenerator.PlainsProperties
  type: Struct
  source:
    remote:
      path: Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: PlainsProperties
    path: ../Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
    startLine: 11
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nStructure used to specify the properties used to generate an island\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct PlainsGenerator.PlainsProperties
    content.vb: >-
      <Serializable>

      Public Structure PlainsGenerator.PlainsProperties
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
- uid: Global.PlainsGenerator.PlainsProperties.CameraOrthographicSize
  commentId: F:Global.PlainsGenerator.PlainsProperties.CameraOrthographicSize
  id: CameraOrthographicSize
  parent: Global.PlainsGenerator.PlainsProperties
  langs:
  - csharp
  - vb
  name: CameraOrthographicSize
  nameWithType: PlainsGenerator.PlainsProperties.CameraOrthographicSize
  fullName: PlainsGenerator.PlainsProperties.CameraOrthographicSize
  type: Field
  source:
    remote:
      path: Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: CameraOrthographicSize
    path: ../Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
    startLine: 15
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Tooltip("Camera zoom level")]

      public int CameraOrthographicSize
    return:
      type: System.Int32
    content.vb: >-
      <Tooltip("Camera zoom level")>

      Public CameraOrthographicSize As Integer
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Camera zoom level
- uid: Global.PlainsGenerator.PlainsProperties.Tile
  commentId: F:Global.PlainsGenerator.PlainsProperties.Tile
  id: Tile
  parent: Global.PlainsGenerator.PlainsProperties
  langs:
  - csharp
  - vb
  name: Tile
  nameWithType: PlainsGenerator.PlainsProperties.Tile
  fullName: PlainsGenerator.PlainsProperties.Tile
  type: Field
  source:
    remote:
      path: Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Tile
    path: ../Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
    startLine: 17
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Tooltip("Which tile to draw the plains with. (This will be replaced later)")]

      public TileBase Tile
    return:
      type: UnityEngine.Tilemaps.TileBase
    content.vb: >-
      <Tooltip("Which tile to draw the plains with. (This will be replaced later)")>

      Public Tile As TileBase
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Which tile to draw the plains with. (This will be replaced later)
- uid: Global.PlainsGenerator.PlainsProperties.GroundEnemies
  commentId: F:Global.PlainsGenerator.PlainsProperties.GroundEnemies
  id: GroundEnemies
  parent: Global.PlainsGenerator.PlainsProperties
  langs:
  - csharp
  - vb
  name: GroundEnemies
  nameWithType: PlainsGenerator.PlainsProperties.GroundEnemies
  fullName: PlainsGenerator.PlainsProperties.GroundEnemies
  type: Field
  source:
    remote:
      path: Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GroundEnemies
    path: ../Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
    startLine: 19
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Tooltip("Island Enemies to spawn")]

      public List<SpawnableListElement> GroundEnemies
    return:
      type: System.Collections.Generic.List{SpawnableListElement}
    content.vb: >-
      <Tooltip("Island Enemies to spawn")>

      Public GroundEnemies As List(Of SpawnableListElement)
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Island Enemies to spawn
- uid: Global.PlainsGenerator.PlainsProperties.GroundEnemyDensity
  commentId: F:Global.PlainsGenerator.PlainsProperties.GroundEnemyDensity
  id: GroundEnemyDensity
  parent: Global.PlainsGenerator.PlainsProperties
  langs:
  - csharp
  - vb
  name: GroundEnemyDensity
  nameWithType: PlainsGenerator.PlainsProperties.GroundEnemyDensity
  fullName: PlainsGenerator.PlainsProperties.GroundEnemyDensity
  type: Field
  source:
    remote:
      path: Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GroundEnemyDensity
    path: ../Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
    startLine: 21
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Tooltip("How much to fill the space with ground enemies")]

      [Range(0, 1)]

      public float GroundEnemyDensity
    return:
      type: System.Single
    content.vb: >-
      <Tooltip("How much to fill the space with ground enemies")>

      <Range(0, 1)>

      Public GroundEnemyDensity As Single
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: How much to fill the space with ground enemies
  - type: UnityEngine.RangeAttribute
    ctor: UnityEngine.RangeAttribute.#ctor(System.Single,System.Single)
    arguments:
    - type: System.Single
      value: 0
    - type: System.Single
      value: 1
- uid: Global.PlainsGenerator.PlainsProperties.FlyingEnemies
  commentId: F:Global.PlainsGenerator.PlainsProperties.FlyingEnemies
  id: FlyingEnemies
  parent: Global.PlainsGenerator.PlainsProperties
  langs:
  - csharp
  - vb
  name: FlyingEnemies
  nameWithType: PlainsGenerator.PlainsProperties.FlyingEnemies
  fullName: PlainsGenerator.PlainsProperties.FlyingEnemies
  type: Field
  source:
    remote:
      path: Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: FlyingEnemies
    path: ../Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
    startLine: 23
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Tooltip("Island Enemies to spawn")]

      public List<SpawnableListElement> FlyingEnemies
    return:
      type: System.Collections.Generic.List{SpawnableListElement}
    content.vb: >-
      <Tooltip("Island Enemies to spawn")>

      Public FlyingEnemies As List(Of SpawnableListElement)
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Island Enemies to spawn
- uid: Global.PlainsGenerator.PlainsProperties.FlyingEnemyDensity
  commentId: F:Global.PlainsGenerator.PlainsProperties.FlyingEnemyDensity
  id: FlyingEnemyDensity
  parent: Global.PlainsGenerator.PlainsProperties
  langs:
  - csharp
  - vb
  name: FlyingEnemyDensity
  nameWithType: PlainsGenerator.PlainsProperties.FlyingEnemyDensity
  fullName: PlainsGenerator.PlainsProperties.FlyingEnemyDensity
  type: Field
  source:
    remote:
      path: Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: FlyingEnemyDensity
    path: ../Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
    startLine: 25
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Tooltip("How much to fill the space with flying enemies")]

      [Range(0, 1)]

      public float FlyingEnemyDensity
    return:
      type: System.Single
    content.vb: >-
      <Tooltip("How much to fill the space with flying enemies")>

      <Range(0, 1)>

      Public FlyingEnemyDensity As Single
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: How much to fill the space with flying enemies
  - type: UnityEngine.RangeAttribute
    ctor: UnityEngine.RangeAttribute.#ctor(System.Single,System.Single)
    arguments:
    - type: System.Single
      value: 0
    - type: System.Single
      value: 1
- uid: Global.PlainsGenerator.PlainsProperties.SetPieces
  commentId: F:Global.PlainsGenerator.PlainsProperties.SetPieces
  id: SetPieces
  parent: Global.PlainsGenerator.PlainsProperties
  langs:
  - csharp
  - vb
  name: SetPieces
  nameWithType: PlainsGenerator.PlainsProperties.SetPieces
  fullName: PlainsGenerator.PlainsProperties.SetPieces
  type: Field
  source:
    remote:
      path: Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SetPieces
    path: ../Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
    startLine: 27
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Tooltip("List of set pieces for the island")]

      public List<SpawnableListElement> SetPieces
    return:
      type: System.Collections.Generic.List{SpawnableListElement}
    content.vb: >-
      <Tooltip("List of set pieces for the island")>

      Public SetPieces As List(Of SpawnableListElement)
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: List of set pieces for the island
- uid: Global.PlainsGenerator.PlainsProperties.SetPieceDensity
  commentId: F:Global.PlainsGenerator.PlainsProperties.SetPieceDensity
  id: SetPieceDensity
  parent: Global.PlainsGenerator.PlainsProperties
  langs:
  - csharp
  - vb
  name: SetPieceDensity
  nameWithType: PlainsGenerator.PlainsProperties.SetPieceDensity
  fullName: PlainsGenerator.PlainsProperties.SetPieceDensity
  type: Field
  source:
    remote:
      path: Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SetPieceDensity
    path: ../Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
    startLine: 29
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Tooltip("How much to fill the space with set pieces")]

      [Range(0, 1)]

      public float SetPieceDensity
    return:
      type: System.Single
    content.vb: >-
      <Tooltip("How much to fill the space with set pieces")>

      <Range(0, 1)>

      Public SetPieceDensity As Single
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: How much to fill the space with set pieces
  - type: UnityEngine.RangeAttribute
    ctor: UnityEngine.RangeAttribute.#ctor(System.Single,System.Single)
    arguments:
    - type: System.Single
      value: 0
    - type: System.Single
      value: 1
- uid: Global.PlainsGenerator.PlainsProperties.ParallaxPrefab
  commentId: F:Global.PlainsGenerator.PlainsProperties.ParallaxPrefab
  id: ParallaxPrefab
  parent: Global.PlainsGenerator.PlainsProperties
  langs:
  - csharp
  - vb
  name: ParallaxPrefab
  nameWithType: PlainsGenerator.PlainsProperties.ParallaxPrefab
  fullName: PlainsGenerator.PlainsProperties.ParallaxPrefab
  type: Field
  source:
    remote:
      path: Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ParallaxPrefab
    path: ../Assets/Framework/Procedural Generation/TerrainTypes/PlainsGenerator.cs
    startLine: 31
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Tooltip("Gameobject that contains parallax component and layer information")]

      public GameObject ParallaxPrefab
    return:
      type: UnityEngine.GameObject
    content.vb: >-
      <Tooltip("Gameobject that contains parallax component and layer information")>

      Public ParallaxPrefab As GameObject
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Gameobject that contains parallax component and layer information
references:
- uid: Global
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine.Tilemaps.TileBase
  commentId: T:UnityEngine.Tilemaps.TileBase
  parent: UnityEngine.Tilemaps
  isExternal: true
  name: TileBase
  nameWithType: TileBase
  fullName: UnityEngine.Tilemaps.TileBase
- uid: UnityEngine.Tilemaps
  commentId: N:UnityEngine.Tilemaps
  isExternal: true
  name: UnityEngine.Tilemaps
  nameWithType: UnityEngine.Tilemaps
  fullName: UnityEngine.Tilemaps
  spec.csharp:
  - uid: UnityEngine
    name: UnityEngine
    isExternal: true
  - name: .
  - uid: UnityEngine.Tilemaps
    name: Tilemaps
    isExternal: true
  spec.vb:
  - uid: UnityEngine
    name: UnityEngine
    isExternal: true
  - name: .
  - uid: UnityEngine.Tilemaps
    name: Tilemaps
    isExternal: true
- uid: System.Collections.Generic.List{SpawnableListElement}
  commentId: T:System.Collections.Generic.List{SpawnableListElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SpawnableListElement>
  nameWithType: List<SpawnableListElement>
  fullName: System.Collections.Generic.List<SpawnableListElement>
  nameWithType.vb: List(Of SpawnableListElement)
  fullName.vb: System.Collections.Generic.List(Of SpawnableListElement)
  name.vb: List(Of SpawnableListElement)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.SpawnableListElement
    name: SpawnableListElement
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.SpawnableListElement
    name: SpawnableListElement
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: UnityEngine.GameObject
  commentId: T:UnityEngine.GameObject
  parent: UnityEngine
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: UnityEngine.GameObject
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
