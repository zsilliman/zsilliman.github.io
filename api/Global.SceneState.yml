### YamlMime:ManagedReference
items:
- uid: Global.SceneState
  commentId: T:Global.SceneState
  id: SceneState
  parent: Global
  children:
  - Global.SceneState.AccessibleStatesContains(AscendState)
  - Global.SceneState.ActiveSceneState
  - Global.SceneState.gameState
  - Global.SceneState.GetAccessibleStateList
  - Global.SceneState.GetAccessibleStateListInternal
  - Global.SceneState.SetupStateHierarchyReferences
  langs:
  - csharp
  - vb
  name: SceneState
  nameWithType: SceneState
  fullName: SceneState
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/GameState/SceneState.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SceneState
    path: ../Assets/Objects & Components/GameState/SceneState.cs
    startLine: 4
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: 'public class SceneState : StateManager, ISavableObject<StateManager.StateManagerSaveData>'
    content.vb: Public Class SceneState Inherits StateManager Implements ISavableObject(Of StateManager.StateManagerSaveData)
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.Component
  - UnityEngine.Behaviour
  - UnityEngine.MonoBehaviour
  - Global.StateManager
  implements:
  - Global.ISavableObject{StateManager.StateManagerSaveData}
  inheritedMembers:
  - Global.StateManager.States
  - Global.StateManager.StateIDCount
  - Global.StateManager.VisitedStatesPreview
  - Global.StateManager.VisitedStates
  - Global.StateManager.Awake
  - Global.StateManager.OwnedStatesContains(AscendState)
  - Global.StateManager.GetOwnedStatesList
  - Global.StateManager.AddOwnedStatesToListInternal(System.Collections.Generic.List{StateManager.AscendStateInternal})
  - Global.StateManager.AddOwnedStatesToList(System.Collections.Generic.List{AscendState})
  - Global.StateManager.IsStateVisited(AscendState)
  - Global.StateManager.AreStatesVisited(AscendState[])
  - Global.StateManager.VisitStates(System.Collections.Generic.IEnumerable{AscendState})
  - Global.StateManager.VisitState(AscendState)
  - Global.StateManager.VisitStateGeneral(AscendState)
  - Global.StateManager.VisitStatesGeneral(System.Collections.Generic.IEnumerable{AscendState})
  - Global.StateManager.IsDependencyMetGeneral(AscendState)
  - Global.StateManager.AreStatesVisitedGeneral(System.Collections.Generic.IEnumerable{AscendState})
  - Global.StateManager.AreDependenciesMetGeneral(System.Collections.Generic.IEnumerable{AscendStateDependency})
  - Global.StateManager.RegisterConditionCallbackToOwner(AscendState,StateManager.StateManagerCallback)
  - Global.StateManager.UnregisterConditionCallbackToOwner(AscendState,StateManager.StateManagerCallback)
  - Global.StateManager.LoadVisitedStates(System.Collections.Generic.List{StateManager.AscendStateInternal})
  - Global.StateManager.PopulateWithVisitedStatesList(System.Collections.Generic.List{StateManager.AscendStateInternal})
  - Global.StateManager.OnValidate
  - Global.StateManager.ValidateStateIDs
  - Global.StateManager.LoadObjectSaveData(StateManager.StateManagerSaveData)
  - Global.StateManager.GetObjectSaveData
  - Global.StateManager.OnPostLoadSaveFile
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
- uid: Global.SceneState.ActiveSceneState
  commentId: P:Global.SceneState.ActiveSceneState
  id: ActiveSceneState
  parent: Global.SceneState
  langs:
  - csharp
  - vb
  name: ActiveSceneState
  nameWithType: SceneState.ActiveSceneState
  fullName: SceneState.ActiveSceneState
  type: Property
  source:
    remote:
      path: Assets/Objects & Components/GameState/SceneState.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ActiveSceneState
    path: ../Assets/Objects & Components/GameState/SceneState.cs
    startLine: 7
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static SceneState ActiveSceneState { get; }
    parameters: []
    return:
      type: Global.SceneState
    content.vb: Public Shared ReadOnly Property ActiveSceneState As SceneState
  overload: Global.SceneState.ActiveSceneState*
- uid: Global.SceneState.gameState
  commentId: F:Global.SceneState.gameState
  id: gameState
  parent: Global.SceneState
  langs:
  - csharp
  - vb
  name: gameState
  nameWithType: SceneState.gameState
  fullName: SceneState.gameState
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/GameState/SceneState.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: gameState
    path: ../Assets/Objects & Components/GameState/SceneState.cs
    startLine: 19
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected StateManager gameState
    return:
      type: Global.StateManager
    content.vb: Protected gameState As StateManager
- uid: Global.SceneState.AccessibleStatesContains(AscendState)
  commentId: M:Global.SceneState.AccessibleStatesContains(AscendState)
  id: AccessibleStatesContains(AscendState)
  parent: Global.SceneState
  langs:
  - csharp
  - vb
  name: AccessibleStatesContains(AscendState)
  nameWithType: SceneState.AccessibleStatesContains(AscendState)
  fullName: SceneState.AccessibleStatesContains(AscendState)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/GameState/SceneState.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AccessibleStatesContains
    path: ../Assets/Objects & Components/GameState/SceneState.cs
    startLine: 20
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override bool AccessibleStatesContains(AscendState state)
    parameters:
    - id: state
      type: Global.AscendState
    return:
      type: System.Boolean
    content.vb: Public Overrides Function AccessibleStatesContains(state As AscendState) As Boolean
  overridden: Global.StateManager.AccessibleStatesContains(AscendState)
  overload: Global.SceneState.AccessibleStatesContains*
- uid: Global.SceneState.GetAccessibleStateList
  commentId: M:Global.SceneState.GetAccessibleStateList
  id: GetAccessibleStateList
  parent: Global.SceneState
  langs:
  - csharp
  - vb
  name: GetAccessibleStateList()
  nameWithType: SceneState.GetAccessibleStateList()
  fullName: SceneState.GetAccessibleStateList()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/GameState/SceneState.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetAccessibleStateList
    path: ../Assets/Objects & Components/GameState/SceneState.cs
    startLine: 29
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override List<AscendState> GetAccessibleStateList()
    return:
      type: System.Collections.Generic.List{AscendState}
    content.vb: Public Overrides Function GetAccessibleStateList() As List(Of AscendState)
  overridden: Global.StateManager.GetAccessibleStateList
  overload: Global.SceneState.GetAccessibleStateList*
- uid: Global.SceneState.GetAccessibleStateListInternal
  commentId: M:Global.SceneState.GetAccessibleStateListInternal
  id: GetAccessibleStateListInternal
  parent: Global.SceneState
  langs:
  - csharp
  - vb
  name: GetAccessibleStateListInternal()
  nameWithType: SceneState.GetAccessibleStateListInternal()
  fullName: SceneState.GetAccessibleStateListInternal()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/GameState/SceneState.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetAccessibleStateListInternal
    path: ../Assets/Objects & Components/GameState/SceneState.cs
    startLine: 43
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override List<StateManager.AscendStateInternal> GetAccessibleStateListInternal()
    return:
      type: System.Collections.Generic.List{StateManager.AscendStateInternal}
    content.vb: Public Overrides Function GetAccessibleStateListInternal() As List(Of StateManager.AscendStateInternal)
  overridden: Global.StateManager.GetAccessibleStateListInternal
  overload: Global.SceneState.GetAccessibleStateListInternal*
- uid: Global.SceneState.SetupStateHierarchyReferences
  commentId: M:Global.SceneState.SetupStateHierarchyReferences
  id: SetupStateHierarchyReferences
  parent: Global.SceneState
  langs:
  - csharp
  - vb
  name: SetupStateHierarchyReferences()
  nameWithType: SceneState.SetupStateHierarchyReferences()
  fullName: SceneState.SetupStateHierarchyReferences()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/GameState/SceneState.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SetupStateHierarchyReferences
    path: ../Assets/Objects & Components/GameState/SceneState.cs
    startLine: 57
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void SetupStateHierarchyReferences()
    content.vb: Public Overrides Sub SetupStateHierarchyReferences()
  overridden: Global.StateManager.SetupStateHierarchyReferences
  overload: Global.SceneState.SetupStateHierarchyReferences*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.Component
  commentId: T:UnityEngine.Component
  parent: UnityEngine
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: UnityEngine.Component
- uid: UnityEngine.Behaviour
  commentId: T:UnityEngine.Behaviour
  parent: UnityEngine
  isExternal: true
  name: Behaviour
  nameWithType: Behaviour
  fullName: UnityEngine.Behaviour
- uid: UnityEngine.MonoBehaviour
  commentId: T:UnityEngine.MonoBehaviour
  parent: UnityEngine
  isExternal: true
  name: MonoBehaviour
  nameWithType: MonoBehaviour
  fullName: UnityEngine.MonoBehaviour
- uid: Global.StateManager
  commentId: T:Global.StateManager
  name: StateManager
  nameWithType: StateManager
  fullName: StateManager
- uid: Global.ISavableObject{StateManager.StateManagerSaveData}
  commentId: T:Global.ISavableObject{StateManager.StateManagerSaveData}
  definition: Global.ISavableObject`1
  name: ISavableObject<StateManager.StateManagerSaveData>
  nameWithType: ISavableObject<StateManager.StateManagerSaveData>
  fullName: ISavableObject<StateManager.StateManagerSaveData>
  nameWithType.vb: ISavableObject(Of StateManager.StateManagerSaveData)
  fullName.vb: ISavableObject(Of StateManager.StateManagerSaveData)
  name.vb: ISavableObject(Of StateManager.StateManagerSaveData)
  spec.csharp:
  - uid: Global.ISavableObject`1
    name: ISavableObject
  - name: <
  - uid: Global.StateManager
    name: StateManager
  - name: .
  - uid: Global.StateManager.StateManagerSaveData
    name: StateManagerSaveData
  - name: '>'
  spec.vb:
  - uid: Global.ISavableObject`1
    name: ISavableObject
  - name: (
  - name: Of
  - name: " "
  - uid: Global.StateManager
    name: StateManager
  - name: .
  - uid: Global.StateManager.StateManagerSaveData
    name: StateManagerSaveData
  - name: )
- uid: Global.StateManager.States
  commentId: F:Global.StateManager.States
  parent: Global.StateManager
  name: States
  nameWithType: StateManager.States
  fullName: StateManager.States
- uid: Global.StateManager.StateIDCount
  commentId: F:Global.StateManager.StateIDCount
  parent: Global.StateManager
  name: StateIDCount
  nameWithType: StateManager.StateIDCount
  fullName: StateManager.StateIDCount
- uid: Global.StateManager.VisitedStatesPreview
  commentId: F:Global.StateManager.VisitedStatesPreview
  parent: Global.StateManager
  name: VisitedStatesPreview
  nameWithType: StateManager.VisitedStatesPreview
  fullName: StateManager.VisitedStatesPreview
- uid: Global.StateManager.VisitedStates
  commentId: F:Global.StateManager.VisitedStates
  parent: Global.StateManager
  name: VisitedStates
  nameWithType: StateManager.VisitedStates
  fullName: StateManager.VisitedStates
- uid: Global.StateManager.Awake
  commentId: M:Global.StateManager.Awake
  parent: Global.StateManager
  name: Awake()
  nameWithType: StateManager.Awake()
  fullName: StateManager.Awake()
  spec.csharp:
  - uid: Global.StateManager.Awake
    name: Awake
  - name: (
  - name: )
  spec.vb:
  - uid: Global.StateManager.Awake
    name: Awake
  - name: (
  - name: )
- uid: Global.StateManager.OwnedStatesContains(AscendState)
  commentId: M:Global.StateManager.OwnedStatesContains(AscendState)
  parent: Global.StateManager
  name: OwnedStatesContains(AscendState)
  nameWithType: StateManager.OwnedStatesContains(AscendState)
  fullName: StateManager.OwnedStatesContains(AscendState)
  spec.csharp:
  - uid: Global.StateManager.OwnedStatesContains(AscendState)
    name: OwnedStatesContains
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: )
  spec.vb:
  - uid: Global.StateManager.OwnedStatesContains(AscendState)
    name: OwnedStatesContains
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: )
- uid: Global.StateManager.GetOwnedStatesList
  commentId: M:Global.StateManager.GetOwnedStatesList
  parent: Global.StateManager
  name: GetOwnedStatesList()
  nameWithType: StateManager.GetOwnedStatesList()
  fullName: StateManager.GetOwnedStatesList()
  spec.csharp:
  - uid: Global.StateManager.GetOwnedStatesList
    name: GetOwnedStatesList
  - name: (
  - name: )
  spec.vb:
  - uid: Global.StateManager.GetOwnedStatesList
    name: GetOwnedStatesList
  - name: (
  - name: )
- uid: Global.StateManager.AddOwnedStatesToListInternal(System.Collections.Generic.List{StateManager.AscendStateInternal})
  commentId: M:Global.StateManager.AddOwnedStatesToListInternal(System.Collections.Generic.List{StateManager.AscendStateInternal})
  parent: Global.StateManager
  isExternal: true
  name: AddOwnedStatesToListInternal(List<AscendStateInternal>)
  nameWithType: StateManager.AddOwnedStatesToListInternal(List<StateManager.AscendStateInternal>)
  fullName: StateManager.AddOwnedStatesToListInternal(System.Collections.Generic.List<StateManager.AscendStateInternal>)
  nameWithType.vb: StateManager.AddOwnedStatesToListInternal(List(Of StateManager.AscendStateInternal))
  fullName.vb: StateManager.AddOwnedStatesToListInternal(System.Collections.Generic.List(Of StateManager.AscendStateInternal))
  name.vb: AddOwnedStatesToListInternal(List(Of AscendStateInternal))
  spec.csharp:
  - uid: Global.StateManager.AddOwnedStatesToListInternal(System.Collections.Generic.List{StateManager.AscendStateInternal})
    name: AddOwnedStatesToListInternal
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.StateManager.AscendStateInternal
    name: AscendStateInternal
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.StateManager.AddOwnedStatesToListInternal(System.Collections.Generic.List{StateManager.AscendStateInternal})
    name: AddOwnedStatesToListInternal
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.StateManager.AscendStateInternal
    name: AscendStateInternal
  - name: )
  - name: )
- uid: Global.StateManager.AddOwnedStatesToList(System.Collections.Generic.List{AscendState})
  commentId: M:Global.StateManager.AddOwnedStatesToList(System.Collections.Generic.List{AscendState})
  parent: Global.StateManager
  isExternal: true
  name: AddOwnedStatesToList(List<AscendState>)
  nameWithType: StateManager.AddOwnedStatesToList(List<AscendState>)
  fullName: StateManager.AddOwnedStatesToList(System.Collections.Generic.List<AscendState>)
  nameWithType.vb: StateManager.AddOwnedStatesToList(List(Of AscendState))
  fullName.vb: StateManager.AddOwnedStatesToList(System.Collections.Generic.List(Of AscendState))
  name.vb: AddOwnedStatesToList(List(Of AscendState))
  spec.csharp:
  - uid: Global.StateManager.AddOwnedStatesToList(System.Collections.Generic.List{AscendState})
    name: AddOwnedStatesToList
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.AscendState
    name: AscendState
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.StateManager.AddOwnedStatesToList(System.Collections.Generic.List{AscendState})
    name: AddOwnedStatesToList
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.AscendState
    name: AscendState
  - name: )
  - name: )
- uid: Global.StateManager.IsStateVisited(AscendState)
  commentId: M:Global.StateManager.IsStateVisited(AscendState)
  parent: Global.StateManager
  name: IsStateVisited(AscendState)
  nameWithType: StateManager.IsStateVisited(AscendState)
  fullName: StateManager.IsStateVisited(AscendState)
  spec.csharp:
  - uid: Global.StateManager.IsStateVisited(AscendState)
    name: IsStateVisited
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: )
  spec.vb:
  - uid: Global.StateManager.IsStateVisited(AscendState)
    name: IsStateVisited
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: )
- uid: Global.StateManager.AreStatesVisited(AscendState[])
  commentId: M:Global.StateManager.AreStatesVisited(AscendState[])
  parent: Global.StateManager
  name: AreStatesVisited(AscendState[])
  nameWithType: StateManager.AreStatesVisited(AscendState[])
  fullName: StateManager.AreStatesVisited(AscendState[])
  nameWithType.vb: StateManager.AreStatesVisited(AscendState())
  fullName.vb: StateManager.AreStatesVisited(AscendState())
  name.vb: AreStatesVisited(AscendState())
  spec.csharp:
  - uid: Global.StateManager.AreStatesVisited(AscendState[])
    name: AreStatesVisited
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Global.StateManager.AreStatesVisited(AscendState[])
    name: AreStatesVisited
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: (
  - name: )
  - name: )
- uid: Global.StateManager.VisitStates(System.Collections.Generic.IEnumerable{AscendState})
  commentId: M:Global.StateManager.VisitStates(System.Collections.Generic.IEnumerable{AscendState})
  parent: Global.StateManager
  isExternal: true
  name: VisitStates(IEnumerable<AscendState>)
  nameWithType: StateManager.VisitStates(IEnumerable<AscendState>)
  fullName: StateManager.VisitStates(System.Collections.Generic.IEnumerable<AscendState>)
  nameWithType.vb: StateManager.VisitStates(IEnumerable(Of AscendState))
  fullName.vb: StateManager.VisitStates(System.Collections.Generic.IEnumerable(Of AscendState))
  name.vb: VisitStates(IEnumerable(Of AscendState))
  spec.csharp:
  - uid: Global.StateManager.VisitStates(System.Collections.Generic.IEnumerable{AscendState})
    name: VisitStates
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: Global.AscendState
    name: AscendState
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.StateManager.VisitStates(System.Collections.Generic.IEnumerable{AscendState})
    name: VisitStates
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.AscendState
    name: AscendState
  - name: )
  - name: )
- uid: Global.StateManager.VisitState(AscendState)
  commentId: M:Global.StateManager.VisitState(AscendState)
  parent: Global.StateManager
  name: VisitState(AscendState)
  nameWithType: StateManager.VisitState(AscendState)
  fullName: StateManager.VisitState(AscendState)
  spec.csharp:
  - uid: Global.StateManager.VisitState(AscendState)
    name: VisitState
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: )
  spec.vb:
  - uid: Global.StateManager.VisitState(AscendState)
    name: VisitState
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: )
- uid: Global.StateManager.VisitStateGeneral(AscendState)
  commentId: M:Global.StateManager.VisitStateGeneral(AscendState)
  parent: Global.StateManager
  name: VisitStateGeneral(AscendState)
  nameWithType: StateManager.VisitStateGeneral(AscendState)
  fullName: StateManager.VisitStateGeneral(AscendState)
  spec.csharp:
  - uid: Global.StateManager.VisitStateGeneral(AscendState)
    name: VisitStateGeneral
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: )
  spec.vb:
  - uid: Global.StateManager.VisitStateGeneral(AscendState)
    name: VisitStateGeneral
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: )
- uid: Global.StateManager.VisitStatesGeneral(System.Collections.Generic.IEnumerable{AscendState})
  commentId: M:Global.StateManager.VisitStatesGeneral(System.Collections.Generic.IEnumerable{AscendState})
  parent: Global.StateManager
  isExternal: true
  name: VisitStatesGeneral(IEnumerable<AscendState>)
  nameWithType: StateManager.VisitStatesGeneral(IEnumerable<AscendState>)
  fullName: StateManager.VisitStatesGeneral(System.Collections.Generic.IEnumerable<AscendState>)
  nameWithType.vb: StateManager.VisitStatesGeneral(IEnumerable(Of AscendState))
  fullName.vb: StateManager.VisitStatesGeneral(System.Collections.Generic.IEnumerable(Of AscendState))
  name.vb: VisitStatesGeneral(IEnumerable(Of AscendState))
  spec.csharp:
  - uid: Global.StateManager.VisitStatesGeneral(System.Collections.Generic.IEnumerable{AscendState})
    name: VisitStatesGeneral
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: Global.AscendState
    name: AscendState
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.StateManager.VisitStatesGeneral(System.Collections.Generic.IEnumerable{AscendState})
    name: VisitStatesGeneral
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.AscendState
    name: AscendState
  - name: )
  - name: )
- uid: Global.StateManager.IsDependencyMetGeneral(AscendState)
  commentId: M:Global.StateManager.IsDependencyMetGeneral(AscendState)
  parent: Global.StateManager
  name: IsDependencyMetGeneral(AscendState)
  nameWithType: StateManager.IsDependencyMetGeneral(AscendState)
  fullName: StateManager.IsDependencyMetGeneral(AscendState)
  spec.csharp:
  - uid: Global.StateManager.IsDependencyMetGeneral(AscendState)
    name: IsDependencyMetGeneral
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: )
  spec.vb:
  - uid: Global.StateManager.IsDependencyMetGeneral(AscendState)
    name: IsDependencyMetGeneral
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: )
- uid: Global.StateManager.AreStatesVisitedGeneral(System.Collections.Generic.IEnumerable{AscendState})
  commentId: M:Global.StateManager.AreStatesVisitedGeneral(System.Collections.Generic.IEnumerable{AscendState})
  parent: Global.StateManager
  isExternal: true
  name: AreStatesVisitedGeneral(IEnumerable<AscendState>)
  nameWithType: StateManager.AreStatesVisitedGeneral(IEnumerable<AscendState>)
  fullName: StateManager.AreStatesVisitedGeneral(System.Collections.Generic.IEnumerable<AscendState>)
  nameWithType.vb: StateManager.AreStatesVisitedGeneral(IEnumerable(Of AscendState))
  fullName.vb: StateManager.AreStatesVisitedGeneral(System.Collections.Generic.IEnumerable(Of AscendState))
  name.vb: AreStatesVisitedGeneral(IEnumerable(Of AscendState))
  spec.csharp:
  - uid: Global.StateManager.AreStatesVisitedGeneral(System.Collections.Generic.IEnumerable{AscendState})
    name: AreStatesVisitedGeneral
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: Global.AscendState
    name: AscendState
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.StateManager.AreStatesVisitedGeneral(System.Collections.Generic.IEnumerable{AscendState})
    name: AreStatesVisitedGeneral
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.AscendState
    name: AscendState
  - name: )
  - name: )
- uid: Global.StateManager.AreDependenciesMetGeneral(System.Collections.Generic.IEnumerable{AscendStateDependency})
  commentId: M:Global.StateManager.AreDependenciesMetGeneral(System.Collections.Generic.IEnumerable{AscendStateDependency})
  parent: Global.StateManager
  isExternal: true
  name: AreDependenciesMetGeneral(IEnumerable<AscendStateDependency>)
  nameWithType: StateManager.AreDependenciesMetGeneral(IEnumerable<AscendStateDependency>)
  fullName: StateManager.AreDependenciesMetGeneral(System.Collections.Generic.IEnumerable<AscendStateDependency>)
  nameWithType.vb: StateManager.AreDependenciesMetGeneral(IEnumerable(Of AscendStateDependency))
  fullName.vb: StateManager.AreDependenciesMetGeneral(System.Collections.Generic.IEnumerable(Of AscendStateDependency))
  name.vb: AreDependenciesMetGeneral(IEnumerable(Of AscendStateDependency))
  spec.csharp:
  - uid: Global.StateManager.AreDependenciesMetGeneral(System.Collections.Generic.IEnumerable{AscendStateDependency})
    name: AreDependenciesMetGeneral
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: Global.AscendStateDependency
    name: AscendStateDependency
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.StateManager.AreDependenciesMetGeneral(System.Collections.Generic.IEnumerable{AscendStateDependency})
    name: AreDependenciesMetGeneral
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.AscendStateDependency
    name: AscendStateDependency
  - name: )
  - name: )
- uid: Global.StateManager.RegisterConditionCallbackToOwner(AscendState,StateManager.StateManagerCallback)
  commentId: M:Global.StateManager.RegisterConditionCallbackToOwner(AscendState,StateManager.StateManagerCallback)
  parent: Global.StateManager
  name: RegisterConditionCallbackToOwner(AscendState, StateManagerCallback)
  nameWithType: StateManager.RegisterConditionCallbackToOwner(AscendState, StateManager.StateManagerCallback)
  fullName: StateManager.RegisterConditionCallbackToOwner(AscendState, StateManager.StateManagerCallback)
  spec.csharp:
  - uid: Global.StateManager.RegisterConditionCallbackToOwner(AscendState,StateManager.StateManagerCallback)
    name: RegisterConditionCallbackToOwner
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: ','
  - name: " "
  - uid: Global.StateManager.StateManagerCallback
    name: StateManagerCallback
  - name: )
  spec.vb:
  - uid: Global.StateManager.RegisterConditionCallbackToOwner(AscendState,StateManager.StateManagerCallback)
    name: RegisterConditionCallbackToOwner
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: ','
  - name: " "
  - uid: Global.StateManager.StateManagerCallback
    name: StateManagerCallback
  - name: )
- uid: Global.StateManager.UnregisterConditionCallbackToOwner(AscendState,StateManager.StateManagerCallback)
  commentId: M:Global.StateManager.UnregisterConditionCallbackToOwner(AscendState,StateManager.StateManagerCallback)
  parent: Global.StateManager
  name: UnregisterConditionCallbackToOwner(AscendState, StateManagerCallback)
  nameWithType: StateManager.UnregisterConditionCallbackToOwner(AscendState, StateManager.StateManagerCallback)
  fullName: StateManager.UnregisterConditionCallbackToOwner(AscendState, StateManager.StateManagerCallback)
  spec.csharp:
  - uid: Global.StateManager.UnregisterConditionCallbackToOwner(AscendState,StateManager.StateManagerCallback)
    name: UnregisterConditionCallbackToOwner
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: ','
  - name: " "
  - uid: Global.StateManager.StateManagerCallback
    name: StateManagerCallback
  - name: )
  spec.vb:
  - uid: Global.StateManager.UnregisterConditionCallbackToOwner(AscendState,StateManager.StateManagerCallback)
    name: UnregisterConditionCallbackToOwner
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: ','
  - name: " "
  - uid: Global.StateManager.StateManagerCallback
    name: StateManagerCallback
  - name: )
- uid: Global.StateManager.LoadVisitedStates(System.Collections.Generic.List{StateManager.AscendStateInternal})
  commentId: M:Global.StateManager.LoadVisitedStates(System.Collections.Generic.List{StateManager.AscendStateInternal})
  parent: Global.StateManager
  isExternal: true
  name: LoadVisitedStates(List<AscendStateInternal>)
  nameWithType: StateManager.LoadVisitedStates(List<StateManager.AscendStateInternal>)
  fullName: StateManager.LoadVisitedStates(System.Collections.Generic.List<StateManager.AscendStateInternal>)
  nameWithType.vb: StateManager.LoadVisitedStates(List(Of StateManager.AscendStateInternal))
  fullName.vb: StateManager.LoadVisitedStates(System.Collections.Generic.List(Of StateManager.AscendStateInternal))
  name.vb: LoadVisitedStates(List(Of AscendStateInternal))
  spec.csharp:
  - uid: Global.StateManager.LoadVisitedStates(System.Collections.Generic.List{StateManager.AscendStateInternal})
    name: LoadVisitedStates
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.StateManager.AscendStateInternal
    name: AscendStateInternal
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.StateManager.LoadVisitedStates(System.Collections.Generic.List{StateManager.AscendStateInternal})
    name: LoadVisitedStates
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.StateManager.AscendStateInternal
    name: AscendStateInternal
  - name: )
  - name: )
- uid: Global.StateManager.PopulateWithVisitedStatesList(System.Collections.Generic.List{StateManager.AscendStateInternal})
  commentId: M:Global.StateManager.PopulateWithVisitedStatesList(System.Collections.Generic.List{StateManager.AscendStateInternal})
  parent: Global.StateManager
  isExternal: true
  name: PopulateWithVisitedStatesList(List<AscendStateInternal>)
  nameWithType: StateManager.PopulateWithVisitedStatesList(List<StateManager.AscendStateInternal>)
  fullName: StateManager.PopulateWithVisitedStatesList(System.Collections.Generic.List<StateManager.AscendStateInternal>)
  nameWithType.vb: StateManager.PopulateWithVisitedStatesList(List(Of StateManager.AscendStateInternal))
  fullName.vb: StateManager.PopulateWithVisitedStatesList(System.Collections.Generic.List(Of StateManager.AscendStateInternal))
  name.vb: PopulateWithVisitedStatesList(List(Of AscendStateInternal))
  spec.csharp:
  - uid: Global.StateManager.PopulateWithVisitedStatesList(System.Collections.Generic.List{StateManager.AscendStateInternal})
    name: PopulateWithVisitedStatesList
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.StateManager.AscendStateInternal
    name: AscendStateInternal
  - name: '>'
  - name: )
  spec.vb:
  - uid: Global.StateManager.PopulateWithVisitedStatesList(System.Collections.Generic.List{StateManager.AscendStateInternal})
    name: PopulateWithVisitedStatesList
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.StateManager.AscendStateInternal
    name: AscendStateInternal
  - name: )
  - name: )
- uid: Global.StateManager.OnValidate
  commentId: M:Global.StateManager.OnValidate
  parent: Global.StateManager
  name: OnValidate()
  nameWithType: StateManager.OnValidate()
  fullName: StateManager.OnValidate()
  spec.csharp:
  - uid: Global.StateManager.OnValidate
    name: OnValidate
  - name: (
  - name: )
  spec.vb:
  - uid: Global.StateManager.OnValidate
    name: OnValidate
  - name: (
  - name: )
- uid: Global.StateManager.ValidateStateIDs
  commentId: M:Global.StateManager.ValidateStateIDs
  parent: Global.StateManager
  name: ValidateStateIDs()
  nameWithType: StateManager.ValidateStateIDs()
  fullName: StateManager.ValidateStateIDs()
  spec.csharp:
  - uid: Global.StateManager.ValidateStateIDs
    name: ValidateStateIDs
  - name: (
  - name: )
  spec.vb:
  - uid: Global.StateManager.ValidateStateIDs
    name: ValidateStateIDs
  - name: (
  - name: )
- uid: Global.StateManager.LoadObjectSaveData(StateManager.StateManagerSaveData)
  commentId: M:Global.StateManager.LoadObjectSaveData(StateManager.StateManagerSaveData)
  parent: Global.StateManager
  name: LoadObjectSaveData(StateManagerSaveData)
  nameWithType: StateManager.LoadObjectSaveData(StateManager.StateManagerSaveData)
  fullName: StateManager.LoadObjectSaveData(StateManager.StateManagerSaveData)
  spec.csharp:
  - uid: Global.StateManager.LoadObjectSaveData(StateManager.StateManagerSaveData)
    name: LoadObjectSaveData
  - name: (
  - uid: Global.StateManager.StateManagerSaveData
    name: StateManagerSaveData
  - name: )
  spec.vb:
  - uid: Global.StateManager.LoadObjectSaveData(StateManager.StateManagerSaveData)
    name: LoadObjectSaveData
  - name: (
  - uid: Global.StateManager.StateManagerSaveData
    name: StateManagerSaveData
  - name: )
- uid: Global.StateManager.GetObjectSaveData
  commentId: M:Global.StateManager.GetObjectSaveData
  parent: Global.StateManager
  name: GetObjectSaveData()
  nameWithType: StateManager.GetObjectSaveData()
  fullName: StateManager.GetObjectSaveData()
  spec.csharp:
  - uid: Global.StateManager.GetObjectSaveData
    name: GetObjectSaveData
  - name: (
  - name: )
  spec.vb:
  - uid: Global.StateManager.GetObjectSaveData
    name: GetObjectSaveData
  - name: (
  - name: )
- uid: Global.StateManager.OnPostLoadSaveFile
  commentId: M:Global.StateManager.OnPostLoadSaveFile
  parent: Global.StateManager
  name: OnPostLoadSaveFile()
  nameWithType: StateManager.OnPostLoadSaveFile()
  fullName: StateManager.OnPostLoadSaveFile()
  spec.csharp:
  - uid: Global.StateManager.OnPostLoadSaveFile
    name: OnPostLoadSaveFile
  - name: (
  - name: )
  spec.vb:
  - uid: Global.StateManager.OnPostLoadSaveFile
    name: OnPostLoadSaveFile
  - name: (
  - name: )
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.ISavableObject`1
  commentId: T:Global.ISavableObject`1
  name: ISavableObject<T>
  nameWithType: ISavableObject<T>
  fullName: ISavableObject<T>
  nameWithType.vb: ISavableObject(Of T)
  fullName.vb: ISavableObject(Of T)
  name.vb: ISavableObject(Of T)
  spec.csharp:
  - uid: Global.ISavableObject`1
    name: ISavableObject
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.ISavableObject`1
    name: ISavableObject
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.SceneState.ActiveSceneState*
  commentId: Overload:Global.SceneState.ActiveSceneState
  name: ActiveSceneState
  nameWithType: SceneState.ActiveSceneState
  fullName: SceneState.ActiveSceneState
- uid: Global.SceneState
  commentId: T:Global.SceneState
  name: SceneState
  nameWithType: SceneState
  fullName: SceneState
- uid: Global.StateManager.AccessibleStatesContains(AscendState)
  commentId: M:Global.StateManager.AccessibleStatesContains(AscendState)
  parent: Global.StateManager
  name: AccessibleStatesContains(AscendState)
  nameWithType: StateManager.AccessibleStatesContains(AscendState)
  fullName: StateManager.AccessibleStatesContains(AscendState)
  spec.csharp:
  - uid: Global.StateManager.AccessibleStatesContains(AscendState)
    name: AccessibleStatesContains
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: )
  spec.vb:
  - uid: Global.StateManager.AccessibleStatesContains(AscendState)
    name: AccessibleStatesContains
  - name: (
  - uid: Global.AscendState
    name: AscendState
  - name: )
- uid: Global.SceneState.AccessibleStatesContains*
  commentId: Overload:Global.SceneState.AccessibleStatesContains
  name: AccessibleStatesContains
  nameWithType: SceneState.AccessibleStatesContains
  fullName: SceneState.AccessibleStatesContains
- uid: Global.AscendState
  commentId: T:Global.AscendState
  name: AscendState
  nameWithType: AscendState
  fullName: AscendState
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.StateManager.GetAccessibleStateList
  commentId: M:Global.StateManager.GetAccessibleStateList
  parent: Global.StateManager
  name: GetAccessibleStateList()
  nameWithType: StateManager.GetAccessibleStateList()
  fullName: StateManager.GetAccessibleStateList()
  spec.csharp:
  - uid: Global.StateManager.GetAccessibleStateList
    name: GetAccessibleStateList
  - name: (
  - name: )
  spec.vb:
  - uid: Global.StateManager.GetAccessibleStateList
    name: GetAccessibleStateList
  - name: (
  - name: )
- uid: Global.SceneState.GetAccessibleStateList*
  commentId: Overload:Global.SceneState.GetAccessibleStateList
  name: GetAccessibleStateList
  nameWithType: SceneState.GetAccessibleStateList
  fullName: SceneState.GetAccessibleStateList
- uid: System.Collections.Generic.List{AscendState}
  commentId: T:System.Collections.Generic.List{AscendState}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<AscendState>
  nameWithType: List<AscendState>
  fullName: System.Collections.Generic.List<AscendState>
  nameWithType.vb: List(Of AscendState)
  fullName.vb: System.Collections.Generic.List(Of AscendState)
  name.vb: List(Of AscendState)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.AscendState
    name: AscendState
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.AscendState
    name: AscendState
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: Global.StateManager.GetAccessibleStateListInternal
  commentId: M:Global.StateManager.GetAccessibleStateListInternal
  parent: Global.StateManager
  name: GetAccessibleStateListInternal()
  nameWithType: StateManager.GetAccessibleStateListInternal()
  fullName: StateManager.GetAccessibleStateListInternal()
  spec.csharp:
  - uid: Global.StateManager.GetAccessibleStateListInternal
    name: GetAccessibleStateListInternal
  - name: (
  - name: )
  spec.vb:
  - uid: Global.StateManager.GetAccessibleStateListInternal
    name: GetAccessibleStateListInternal
  - name: (
  - name: )
- uid: Global.SceneState.GetAccessibleStateListInternal*
  commentId: Overload:Global.SceneState.GetAccessibleStateListInternal
  name: GetAccessibleStateListInternal
  nameWithType: SceneState.GetAccessibleStateListInternal
  fullName: SceneState.GetAccessibleStateListInternal
- uid: System.Collections.Generic.List{StateManager.AscendStateInternal}
  commentId: T:System.Collections.Generic.List{StateManager.AscendStateInternal}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<StateManager.AscendStateInternal>
  nameWithType: List<StateManager.AscendStateInternal>
  fullName: System.Collections.Generic.List<StateManager.AscendStateInternal>
  nameWithType.vb: List(Of StateManager.AscendStateInternal)
  fullName.vb: System.Collections.Generic.List(Of StateManager.AscendStateInternal)
  name.vb: List(Of StateManager.AscendStateInternal)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.StateManager
    name: StateManager
  - name: .
  - uid: Global.StateManager.AscendStateInternal
    name: AscendStateInternal
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.StateManager
    name: StateManager
  - name: .
  - uid: Global.StateManager.AscendStateInternal
    name: AscendStateInternal
  - name: )
- uid: Global.StateManager.SetupStateHierarchyReferences
  commentId: M:Global.StateManager.SetupStateHierarchyReferences
  parent: Global.StateManager
  name: SetupStateHierarchyReferences()
  nameWithType: StateManager.SetupStateHierarchyReferences()
  fullName: StateManager.SetupStateHierarchyReferences()
  spec.csharp:
  - uid: Global.StateManager.SetupStateHierarchyReferences
    name: SetupStateHierarchyReferences
  - name: (
  - name: )
  spec.vb:
  - uid: Global.StateManager.SetupStateHierarchyReferences
    name: SetupStateHierarchyReferences
  - name: (
  - name: )
- uid: Global.SceneState.SetupStateHierarchyReferences*
  commentId: Overload:Global.SceneState.SetupStateHierarchyReferences
  name: SetupStateHierarchyReferences
  nameWithType: SceneState.SetupStateHierarchyReferences
  fullName: SceneState.SetupStateHierarchyReferences
