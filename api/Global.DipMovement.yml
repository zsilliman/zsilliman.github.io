### YamlMime:ManagedReference
items:
- uid: Global.DipMovement
  commentId: T:Global.DipMovement
  id: DipMovement
  parent: Global
  children:
  - Global.DipMovement.StartMovement
  - Global.DipMovement.UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  langs:
  - csharp
  - vb
  name: DipMovement
  nameWithType: DipMovement
  fullName: DipMovement
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: DipMovement
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
    startLine: 182
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: 'public class DipMovement : CustomMovement<FlyingMovementController.DipChargeProps>'
    content.vb: Public Class DipMovement Inherits CustomMovement(Of FlyingMovementController.DipChargeProps)
  inheritance:
  - System.Object
  - Global.CustomMovement{FlyingMovementController.DipChargeProps}
  inheritedMembers:
  - Global.CustomMovement{FlyingMovementController.DipChargeProps}.IsActive
  - Global.CustomMovement{FlyingMovementController.DipChargeProps}.t
  - Global.CustomMovement{FlyingMovementController.DipChargeProps}.enemy
  - Global.CustomMovement{FlyingMovementController.DipChargeProps}.properties
  - Global.CustomMovement{FlyingMovementController.DipChargeProps}.SetEnemy(IntEnemy)
  - Global.CustomMovement{FlyingMovementController.DipChargeProps}.SetProperties(FlyingMovementController.DipChargeProps)
  - Global.CustomMovement{FlyingMovementController.DipChargeProps}.GetProperties
  - Global.CustomMovement{FlyingMovementController.DipChargeProps}.EndMovement
  - Global.CustomMovement{FlyingMovementController.DipChargeProps}.Reset
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
- uid: Global.DipMovement.StartMovement
  commentId: M:Global.DipMovement.StartMovement
  id: StartMovement
  parent: Global.DipMovement
  langs:
  - csharp
  - vb
  name: StartMovement()
  nameWithType: DipMovement.StartMovement()
  fullName: DipMovement.StartMovement()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: StartMovement
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
    startLine: 186
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected override void StartMovement()
    content.vb: Protected Overrides Sub StartMovement()
  overridden: Global.CustomMovement{FlyingMovementController.DipChargeProps}.StartMovement
  overload: Global.DipMovement.StartMovement*
- uid: Global.DipMovement.UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  commentId: M:Global.DipMovement.UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  id: UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  parent: Global.DipMovement
  langs:
  - csharp
  - vb
  name: UpdateMovement(float, Action, SolidAction, SolidAction, ActorAction, TriggerAction)
  nameWithType: DipMovement.UpdateMovement(float, IntObject.Action, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  fullName: DipMovement.UpdateMovement(float, IntObject.Action, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: UpdateMovement
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
    startLine: 193
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void UpdateMovement(float deltaTime, IntObject.Action OnMovementEnd, IntObject.SolidAction OnCollideX, IntObject.SolidAction OnCollideY, IntObject.ActorAction OnOverlapActor, IntObject.TriggerAction OnOverlapTrigger)
    parameters:
    - id: deltaTime
      type: System.Single
    - id: OnMovementEnd
      type: Global.IntObject.Action
    - id: OnCollideX
      type: Global.IntObject.SolidAction
    - id: OnCollideY
      type: Global.IntObject.SolidAction
    - id: OnOverlapActor
      type: Global.IntObject.ActorAction
    - id: OnOverlapTrigger
      type: Global.IntObject.TriggerAction
    content.vb: Public Overrides Sub UpdateMovement(deltaTime As Single, OnMovementEnd As IntObject.Action, OnCollideX As IntObject.SolidAction, OnCollideY As IntObject.SolidAction, OnOverlapActor As IntObject.ActorAction, OnOverlapTrigger As IntObject.TriggerAction)
  overridden: Global.CustomMovement{FlyingMovementController.DipChargeProps}.UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  overload: Global.DipMovement.UpdateMovement*
  nameWithType.vb: DipMovement.UpdateMovement(Single, IntObject.Action, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  fullName.vb: DipMovement.UpdateMovement(Single, IntObject.Action, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  name.vb: UpdateMovement(Single, Action, SolidAction, SolidAction, ActorAction, TriggerAction)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}
  commentId: T:Global.CustomMovement{FlyingMovementController.DipChargeProps}
  definition: Global.CustomMovement`1
  name: CustomMovement<FlyingMovementController.DipChargeProps>
  nameWithType: CustomMovement<FlyingMovementController.DipChargeProps>
  fullName: CustomMovement<FlyingMovementController.DipChargeProps>
  nameWithType.vb: CustomMovement(Of FlyingMovementController.DipChargeProps)
  fullName.vb: CustomMovement(Of FlyingMovementController.DipChargeProps)
  name.vb: CustomMovement(Of FlyingMovementController.DipChargeProps)
  spec.csharp:
  - uid: Global.CustomMovement`1
    name: CustomMovement
  - name: <
  - uid: Global.FlyingMovementController
    name: FlyingMovementController
  - name: .
  - uid: Global.FlyingMovementController.DipChargeProps
    name: DipChargeProps
  - name: '>'
  spec.vb:
  - uid: Global.CustomMovement`1
    name: CustomMovement
  - name: (
  - name: Of
  - name: " "
  - uid: Global.FlyingMovementController
    name: FlyingMovementController
  - name: .
  - uid: Global.FlyingMovementController.DipChargeProps
    name: DipChargeProps
  - name: )
- uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.IsActive
  commentId: P:Global.CustomMovement{FlyingMovementController.DipChargeProps}.IsActive
  parent: Global.CustomMovement{FlyingMovementController.DipChargeProps}
  definition: Global.CustomMovement`1.IsActive
  name: IsActive
  nameWithType: CustomMovement<FlyingMovementController.DipChargeProps>.IsActive
  fullName: CustomMovement<FlyingMovementController.DipChargeProps>.IsActive
  nameWithType.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).IsActive
  fullName.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).IsActive
- uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.t
  commentId: P:Global.CustomMovement{FlyingMovementController.DipChargeProps}.t
  parent: Global.CustomMovement{FlyingMovementController.DipChargeProps}
  definition: Global.CustomMovement`1.t
  name: t
  nameWithType: CustomMovement<FlyingMovementController.DipChargeProps>.t
  fullName: CustomMovement<FlyingMovementController.DipChargeProps>.t
  nameWithType.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).t
  fullName.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).t
- uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.enemy
  commentId: F:Global.CustomMovement{FlyingMovementController.DipChargeProps}.enemy
  parent: Global.CustomMovement{FlyingMovementController.DipChargeProps}
  definition: Global.CustomMovement`1.enemy
  name: enemy
  nameWithType: CustomMovement<FlyingMovementController.DipChargeProps>.enemy
  fullName: CustomMovement<FlyingMovementController.DipChargeProps>.enemy
  nameWithType.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).enemy
  fullName.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).enemy
- uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.properties
  commentId: F:Global.CustomMovement{FlyingMovementController.DipChargeProps}.properties
  parent: Global.CustomMovement{FlyingMovementController.DipChargeProps}
  definition: Global.CustomMovement`1.properties
  name: properties
  nameWithType: CustomMovement<FlyingMovementController.DipChargeProps>.properties
  fullName: CustomMovement<FlyingMovementController.DipChargeProps>.properties
  nameWithType.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).properties
  fullName.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).properties
- uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.SetEnemy(IntEnemy)
  commentId: M:Global.CustomMovement{FlyingMovementController.DipChargeProps}.SetEnemy(IntEnemy)
  parent: Global.CustomMovement{FlyingMovementController.DipChargeProps}
  definition: Global.CustomMovement`1.SetEnemy(IntEnemy)
  name: SetEnemy(IntEnemy)
  nameWithType: CustomMovement<FlyingMovementController.DipChargeProps>.SetEnemy(IntEnemy)
  fullName: CustomMovement<FlyingMovementController.DipChargeProps>.SetEnemy(IntEnemy)
  nameWithType.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).SetEnemy(IntEnemy)
  fullName.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).SetEnemy(IntEnemy)
  spec.csharp:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.SetEnemy(IntEnemy)
    name: SetEnemy
  - name: (
  - uid: Global.IntEnemy
    name: IntEnemy
  - name: )
  spec.vb:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.SetEnemy(IntEnemy)
    name: SetEnemy
  - name: (
  - uid: Global.IntEnemy
    name: IntEnemy
  - name: )
- uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.SetProperties(FlyingMovementController.DipChargeProps)
  commentId: M:Global.CustomMovement{FlyingMovementController.DipChargeProps}.SetProperties(FlyingMovementController.DipChargeProps)
  parent: Global.CustomMovement{FlyingMovementController.DipChargeProps}
  definition: Global.CustomMovement`1.SetProperties(`0)
  name: SetProperties(DipChargeProps)
  nameWithType: CustomMovement<FlyingMovementController.DipChargeProps>.SetProperties(FlyingMovementController.DipChargeProps)
  fullName: CustomMovement<FlyingMovementController.DipChargeProps>.SetProperties(FlyingMovementController.DipChargeProps)
  nameWithType.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).SetProperties(FlyingMovementController.DipChargeProps)
  fullName.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).SetProperties(FlyingMovementController.DipChargeProps)
  spec.csharp:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.SetProperties(FlyingMovementController.DipChargeProps)
    name: SetProperties
  - name: (
  - uid: Global.FlyingMovementController.DipChargeProps
    name: DipChargeProps
  - name: )
  spec.vb:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.SetProperties(FlyingMovementController.DipChargeProps)
    name: SetProperties
  - name: (
  - uid: Global.FlyingMovementController.DipChargeProps
    name: DipChargeProps
  - name: )
- uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.GetProperties
  commentId: M:Global.CustomMovement{FlyingMovementController.DipChargeProps}.GetProperties
  parent: Global.CustomMovement{FlyingMovementController.DipChargeProps}
  definition: Global.CustomMovement`1.GetProperties
  name: GetProperties()
  nameWithType: CustomMovement<FlyingMovementController.DipChargeProps>.GetProperties()
  fullName: CustomMovement<FlyingMovementController.DipChargeProps>.GetProperties()
  nameWithType.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).GetProperties()
  fullName.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).GetProperties()
  spec.csharp:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.GetProperties
    name: GetProperties
  - name: (
  - name: )
  spec.vb:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.GetProperties
    name: GetProperties
  - name: (
  - name: )
- uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.EndMovement
  commentId: M:Global.CustomMovement{FlyingMovementController.DipChargeProps}.EndMovement
  parent: Global.CustomMovement{FlyingMovementController.DipChargeProps}
  definition: Global.CustomMovement`1.EndMovement
  name: EndMovement()
  nameWithType: CustomMovement<FlyingMovementController.DipChargeProps>.EndMovement()
  fullName: CustomMovement<FlyingMovementController.DipChargeProps>.EndMovement()
  nameWithType.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).EndMovement()
  fullName.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).EndMovement()
  spec.csharp:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.EndMovement
    name: EndMovement
  - name: (
  - name: )
  spec.vb:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.EndMovement
    name: EndMovement
  - name: (
  - name: )
- uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.Reset
  commentId: M:Global.CustomMovement{FlyingMovementController.DipChargeProps}.Reset
  parent: Global.CustomMovement{FlyingMovementController.DipChargeProps}
  definition: Global.CustomMovement`1.Reset
  name: Reset()
  nameWithType: CustomMovement<FlyingMovementController.DipChargeProps>.Reset()
  fullName: CustomMovement<FlyingMovementController.DipChargeProps>.Reset()
  nameWithType.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).Reset()
  fullName.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).Reset()
  spec.csharp:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.Reset
    name: Reset
  - name: (
  - name: )
  spec.vb:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.Reset
    name: Reset
  - name: (
  - name: )
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.CustomMovement`1
  commentId: T:Global.CustomMovement`1
  name: CustomMovement<T>
  nameWithType: CustomMovement<T>
  fullName: CustomMovement<T>
  nameWithType.vb: CustomMovement(Of T)
  fullName.vb: CustomMovement(Of T)
  name.vb: CustomMovement(Of T)
  spec.csharp:
  - uid: Global.CustomMovement`1
    name: CustomMovement
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.CustomMovement`1
    name: CustomMovement
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.CustomMovement`1.IsActive
  commentId: P:Global.CustomMovement`1.IsActive
  name: IsActive
  nameWithType: CustomMovement<T>.IsActive
  fullName: CustomMovement<T>.IsActive
  nameWithType.vb: CustomMovement(Of T).IsActive
  fullName.vb: CustomMovement(Of T).IsActive
- uid: Global.CustomMovement`1.t
  commentId: P:Global.CustomMovement`1.t
  name: t
  nameWithType: CustomMovement<T>.t
  fullName: CustomMovement<T>.t
  nameWithType.vb: CustomMovement(Of T).t
  fullName.vb: CustomMovement(Of T).t
- uid: Global.CustomMovement`1.enemy
  commentId: F:Global.CustomMovement`1.enemy
  name: enemy
  nameWithType: CustomMovement<T>.enemy
  fullName: CustomMovement<T>.enemy
  nameWithType.vb: CustomMovement(Of T).enemy
  fullName.vb: CustomMovement(Of T).enemy
- uid: Global.CustomMovement`1.properties
  commentId: F:Global.CustomMovement`1.properties
  name: properties
  nameWithType: CustomMovement<T>.properties
  fullName: CustomMovement<T>.properties
  nameWithType.vb: CustomMovement(Of T).properties
  fullName.vb: CustomMovement(Of T).properties
- uid: Global.CustomMovement`1.SetEnemy(IntEnemy)
  commentId: M:Global.CustomMovement`1.SetEnemy(IntEnemy)
  name: SetEnemy(IntEnemy)
  nameWithType: CustomMovement<T>.SetEnemy(IntEnemy)
  fullName: CustomMovement<T>.SetEnemy(IntEnemy)
  nameWithType.vb: CustomMovement(Of T).SetEnemy(IntEnemy)
  fullName.vb: CustomMovement(Of T).SetEnemy(IntEnemy)
  spec.csharp:
  - uid: Global.CustomMovement`1.SetEnemy(IntEnemy)
    name: SetEnemy
  - name: (
  - uid: Global.IntEnemy
    name: IntEnemy
  - name: )
  spec.vb:
  - uid: Global.CustomMovement`1.SetEnemy(IntEnemy)
    name: SetEnemy
  - name: (
  - uid: Global.IntEnemy
    name: IntEnemy
  - name: )
- uid: Global.CustomMovement`1.SetProperties(`0)
  commentId: M:Global.CustomMovement`1.SetProperties(`0)
  name: SetProperties(T)
  nameWithType: CustomMovement<T>.SetProperties(T)
  fullName: CustomMovement<T>.SetProperties(T)
  nameWithType.vb: CustomMovement(Of T).SetProperties(T)
  fullName.vb: CustomMovement(Of T).SetProperties(T)
  spec.csharp:
  - uid: Global.CustomMovement`1.SetProperties(`0)
    name: SetProperties
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Global.CustomMovement`1.SetProperties(`0)
    name: SetProperties
  - name: (
  - name: T
  - name: )
- uid: Global.CustomMovement`1.GetProperties
  commentId: M:Global.CustomMovement`1.GetProperties
  name: GetProperties()
  nameWithType: CustomMovement<T>.GetProperties()
  fullName: CustomMovement<T>.GetProperties()
  nameWithType.vb: CustomMovement(Of T).GetProperties()
  fullName.vb: CustomMovement(Of T).GetProperties()
  spec.csharp:
  - uid: Global.CustomMovement`1.GetProperties
    name: GetProperties
  - name: (
  - name: )
  spec.vb:
  - uid: Global.CustomMovement`1.GetProperties
    name: GetProperties
  - name: (
  - name: )
- uid: Global.CustomMovement`1.EndMovement
  commentId: M:Global.CustomMovement`1.EndMovement
  name: EndMovement()
  nameWithType: CustomMovement<T>.EndMovement()
  fullName: CustomMovement<T>.EndMovement()
  nameWithType.vb: CustomMovement(Of T).EndMovement()
  fullName.vb: CustomMovement(Of T).EndMovement()
  spec.csharp:
  - uid: Global.CustomMovement`1.EndMovement
    name: EndMovement
  - name: (
  - name: )
  spec.vb:
  - uid: Global.CustomMovement`1.EndMovement
    name: EndMovement
  - name: (
  - name: )
- uid: Global.CustomMovement`1.Reset
  commentId: M:Global.CustomMovement`1.Reset
  name: Reset()
  nameWithType: CustomMovement<T>.Reset()
  fullName: CustomMovement<T>.Reset()
  nameWithType.vb: CustomMovement(Of T).Reset()
  fullName.vb: CustomMovement(Of T).Reset()
  spec.csharp:
  - uid: Global.CustomMovement`1.Reset
    name: Reset
  - name: (
  - name: )
  spec.vb:
  - uid: Global.CustomMovement`1.Reset
    name: Reset
  - name: (
  - name: )
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.StartMovement
  commentId: M:Global.CustomMovement{FlyingMovementController.DipChargeProps}.StartMovement
  parent: Global.CustomMovement{FlyingMovementController.DipChargeProps}
  definition: Global.CustomMovement`1.StartMovement
  name: StartMovement()
  nameWithType: CustomMovement<FlyingMovementController.DipChargeProps>.StartMovement()
  fullName: CustomMovement<FlyingMovementController.DipChargeProps>.StartMovement()
  nameWithType.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).StartMovement()
  fullName.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).StartMovement()
  spec.csharp:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.StartMovement
    name: StartMovement
  - name: (
  - name: )
  spec.vb:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.StartMovement
    name: StartMovement
  - name: (
  - name: )
- uid: Global.DipMovement.StartMovement*
  commentId: Overload:Global.DipMovement.StartMovement
  name: StartMovement
  nameWithType: DipMovement.StartMovement
  fullName: DipMovement.StartMovement
- uid: Global.CustomMovement`1.StartMovement
  commentId: M:Global.CustomMovement`1.StartMovement
  name: StartMovement()
  nameWithType: CustomMovement<T>.StartMovement()
  fullName: CustomMovement<T>.StartMovement()
  nameWithType.vb: CustomMovement(Of T).StartMovement()
  fullName.vb: CustomMovement(Of T).StartMovement()
  spec.csharp:
  - uid: Global.CustomMovement`1.StartMovement
    name: StartMovement
  - name: (
  - name: )
  spec.vb:
  - uid: Global.CustomMovement`1.StartMovement
    name: StartMovement
  - name: (
  - name: )
- uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  commentId: M:Global.CustomMovement{FlyingMovementController.DipChargeProps}.UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  parent: Global.CustomMovement{FlyingMovementController.DipChargeProps}
  definition: Global.CustomMovement`1.UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  name: UpdateMovement(float, Action, SolidAction, SolidAction, ActorAction, TriggerAction)
  nameWithType: CustomMovement<FlyingMovementController.DipChargeProps>.UpdateMovement(float, IntObject.Action, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  fullName: CustomMovement<FlyingMovementController.DipChargeProps>.UpdateMovement(float, IntObject.Action, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  nameWithType.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).UpdateMovement(Single, IntObject.Action, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  fullName.vb: CustomMovement(Of FlyingMovementController.DipChargeProps).UpdateMovement(Single, IntObject.Action, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  name.vb: UpdateMovement(Single, Action, SolidAction, SolidAction, ActorAction, TriggerAction)
  spec.csharp:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
    name: UpdateMovement
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.IntObject.Action
    name: Action
  - name: ','
  - name: " "
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: ','
  - name: " "
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: ','
  - name: " "
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  - name: ','
  - name: " "
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  - name: )
  spec.vb:
  - uid: Global.CustomMovement{FlyingMovementController.DipChargeProps}.UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
    name: UpdateMovement
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.IntObject.Action
    name: Action
  - name: ','
  - name: " "
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: ','
  - name: " "
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: ','
  - name: " "
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  - name: ','
  - name: " "
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  - name: )
- uid: Global.DipMovement.UpdateMovement*
  commentId: Overload:Global.DipMovement.UpdateMovement
  name: UpdateMovement
  nameWithType: DipMovement.UpdateMovement
  fullName: DipMovement.UpdateMovement
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.IntObject.Action
  commentId: T:Global.IntObject.Action
  name: IntObject.Action
  nameWithType: IntObject.Action
  fullName: IntObject.Action
  spec.csharp:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.Action
    name: Action
  spec.vb:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.Action
    name: Action
- uid: Global.IntObject.SolidAction
  commentId: T:Global.IntObject.SolidAction
  name: IntObject.SolidAction
  nameWithType: IntObject.SolidAction
  fullName: IntObject.SolidAction
  spec.csharp:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  spec.vb:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.SolidAction
    name: SolidAction
- uid: Global.IntObject.ActorAction
  commentId: T:Global.IntObject.ActorAction
  name: IntObject.ActorAction
  nameWithType: IntObject.ActorAction
  fullName: IntObject.ActorAction
  spec.csharp:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  spec.vb:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.ActorAction
    name: ActorAction
- uid: Global.IntObject.TriggerAction
  commentId: T:Global.IntObject.TriggerAction
  name: IntObject.TriggerAction
  nameWithType: IntObject.TriggerAction
  fullName: IntObject.TriggerAction
  spec.csharp:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  spec.vb:
  - uid: Global.IntObject
    name: IntObject
  - name: .
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
- uid: Global.CustomMovement`1.UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  commentId: M:Global.CustomMovement`1.UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
  isExternal: true
  name: UpdateMovement(float, Action, SolidAction, SolidAction, ActorAction, TriggerAction)
  nameWithType: CustomMovement<T>.UpdateMovement(float, IntObject.Action, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  fullName: CustomMovement<T>.UpdateMovement(float, IntObject.Action, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  nameWithType.vb: CustomMovement(Of T).UpdateMovement(Single, IntObject.Action, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  fullName.vb: CustomMovement(Of T).UpdateMovement(Single, IntObject.Action, IntObject.SolidAction, IntObject.SolidAction, IntObject.ActorAction, IntObject.TriggerAction)
  name.vb: UpdateMovement(Single, Action, SolidAction, SolidAction, ActorAction, TriggerAction)
  spec.csharp:
  - uid: Global.CustomMovement`1.UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
    name: UpdateMovement
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.IntObject.Action
    name: Action
  - name: ','
  - name: " "
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: ','
  - name: " "
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: ','
  - name: " "
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  - name: ','
  - name: " "
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  - name: )
  spec.vb:
  - uid: Global.CustomMovement`1.UpdateMovement(System.Single,IntObject.Action,IntObject.SolidAction,IntObject.SolidAction,IntObject.ActorAction,IntObject.TriggerAction)
    name: UpdateMovement
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.IntObject.Action
    name: Action
  - name: ','
  - name: " "
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: ','
  - name: " "
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: ','
  - name: " "
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  - name: ','
  - name: " "
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  - name: )
