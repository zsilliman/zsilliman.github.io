### YamlMime:ManagedReference
items:
- uid: Global.IdleBehavior
  commentId: T:Global.IdleBehavior
  id: IdleBehavior
  parent: Global
  children:
  - Global.IdleBehavior.Bounce
  - Global.IdleBehavior.BoundedWander
  - Global.IdleBehavior.IdleType
  - Global.IdleBehavior.Patrol
  - Global.IdleBehavior.PlatformPatrol
  - Global.IdleBehavior.RegisterBehaviors(ModularEnemy)
  - Global.IdleBehavior.ReturnToStart
  - Global.IdleBehavior.SetInitialBehavior(ModularEnemy)
  - Global.IdleBehavior.Stationary
  langs:
  - csharp
  - vb
  name: IdleBehavior
  nameWithType: IdleBehavior
  fullName: IdleBehavior
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: IdleBehavior
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
    startLine: 9
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Serializable]

      public class IdleBehavior : ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>
    content.vb: >-
      <Serializable>

      Public Class IdleBehavior Inherits ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType)
  inheritance:
  - System.Object
  - Global.ModularEnemy.EnemyBehaviorInterface
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  inheritedMembers:
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.CurrentBehavior
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisteredBehaviors
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisteredAlwaysRun
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehavior(IdleBehaviorType,ModularEnemy.EnemyBehaviorInterface)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.Start(ModularEnemy)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.Update
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.DrawGizmos(ModularEnemy)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnRestart
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.HasStarted(IdleBehaviorType)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnKill(ModularEnemy,System.Boolean)
  - Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnResetObject(ModularEnemy)
  - Global.ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  - Global.ModularEnemy.EnemyBehaviorInterface.self
  - Global.ModularEnemy.EnemyBehaviorInterface.Started
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
- uid: Global.IdleBehavior.IdleType
  commentId: F:Global.IdleBehavior.IdleType
  id: IdleType
  parent: Global.IdleBehavior
  langs:
  - csharp
  - vb
  name: IdleType
  nameWithType: IdleBehavior.IdleType
  fullName: IdleBehavior.IdleType
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: IdleType
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
    startLine: 12
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public IdleBehaviorType IdleType
    return:
      type: Global.IdleBehaviorType
    content.vb: Public IdleType As IdleBehaviorType
- uid: Global.IdleBehavior.Stationary
  commentId: F:Global.IdleBehavior.Stationary
  id: Stationary
  parent: Global.IdleBehavior
  langs:
  - csharp
  - vb
  name: Stationary
  nameWithType: IdleBehavior.Stationary
  fullName: IdleBehavior.Stationary
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Stationary
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
    startLine: 16
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [SerializeField]

      [ConditionalShow("IdleType", 0)]

      public IdleStationaryBehavior Stationary
    return:
      type: Global.IdleStationaryBehavior
    content.vb: >-
      <SerializeField>

      <ConditionalShow("IdleType", 0)>

      Public Stationary As IdleStationaryBehavior
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: IdleType
    - type: System.Int32
      value: 0
- uid: Global.IdleBehavior.Patrol
  commentId: F:Global.IdleBehavior.Patrol
  id: Patrol
  parent: Global.IdleBehavior
  langs:
  - csharp
  - vb
  name: Patrol
  nameWithType: IdleBehavior.Patrol
  fullName: IdleBehavior.Patrol
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Patrol
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
    startLine: 19
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [SerializeField]

      [ConditionalShow("IdleType", 1)]

      public IdlePatrolBehavior Patrol
    return:
      type: Global.IdlePatrolBehavior
    content.vb: >-
      <SerializeField>

      <ConditionalShow("IdleType", 1)>

      Public Patrol As IdlePatrolBehavior
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: IdleType
    - type: System.Int32
      value: 1
- uid: Global.IdleBehavior.PlatformPatrol
  commentId: F:Global.IdleBehavior.PlatformPatrol
  id: PlatformPatrol
  parent: Global.IdleBehavior
  langs:
  - csharp
  - vb
  name: PlatformPatrol
  nameWithType: IdleBehavior.PlatformPatrol
  fullName: IdleBehavior.PlatformPatrol
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: PlatformPatrol
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
    startLine: 22
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [SerializeField]

      [ConditionalShow("IdleType", 2)]

      public PlatformPatrolBehavior PlatformPatrol
    return:
      type: Global.PlatformPatrolBehavior
    content.vb: >-
      <SerializeField>

      <ConditionalShow("IdleType", 2)>

      Public PlatformPatrol As PlatformPatrolBehavior
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: IdleType
    - type: System.Int32
      value: 2
- uid: Global.IdleBehavior.Bounce
  commentId: F:Global.IdleBehavior.Bounce
  id: Bounce
  parent: Global.IdleBehavior
  langs:
  - csharp
  - vb
  name: Bounce
  nameWithType: IdleBehavior.Bounce
  fullName: IdleBehavior.Bounce
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Bounce
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
    startLine: 25
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [SerializeField]

      [ConditionalShow("IdleType", 3)]

      public IdleBounceBehavior Bounce
    return:
      type: Global.IdleBounceBehavior
    content.vb: >-
      <SerializeField>

      <ConditionalShow("IdleType", 3)>

      Public Bounce As IdleBounceBehavior
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: IdleType
    - type: System.Int32
      value: 3
- uid: Global.IdleBehavior.ReturnToStart
  commentId: F:Global.IdleBehavior.ReturnToStart
  id: ReturnToStart
  parent: Global.IdleBehavior
  langs:
  - csharp
  - vb
  name: ReturnToStart
  nameWithType: IdleBehavior.ReturnToStart
  fullName: IdleBehavior.ReturnToStart
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ReturnToStart
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
    startLine: 28
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [SerializeField]

      [ConditionalShow("IdleType", 4)]

      public ReturnToStartBehavior ReturnToStart
    return:
      type: Global.ReturnToStartBehavior
    content.vb: >-
      <SerializeField>

      <ConditionalShow("IdleType", 4)>

      Public ReturnToStart As ReturnToStartBehavior
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: IdleType
    - type: System.Int32
      value: 4
- uid: Global.IdleBehavior.BoundedWander
  commentId: F:Global.IdleBehavior.BoundedWander
  id: BoundedWander
  parent: Global.IdleBehavior
  langs:
  - csharp
  - vb
  name: BoundedWander
  nameWithType: IdleBehavior.BoundedWander
  fullName: IdleBehavior.BoundedWander
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: BoundedWander
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
    startLine: 31
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [SerializeField]

      [ConditionalShow("IdleType", 5)]

      public BoundedWanderBehavior BoundedWander
    return:
      type: Global.BoundedWanderBehavior
    content.vb: >-
      <SerializeField>

      <ConditionalShow("IdleType", 5)>

      Public BoundedWander As BoundedWanderBehavior
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: IdleType
    - type: System.Int32
      value: 5
- uid: Global.IdleBehavior.RegisterBehaviors(ModularEnemy)
  commentId: M:Global.IdleBehavior.RegisterBehaviors(ModularEnemy)
  id: RegisterBehaviors(ModularEnemy)
  parent: Global.IdleBehavior
  langs:
  - csharp
  - vb
  name: RegisterBehaviors(ModularEnemy)
  nameWithType: IdleBehavior.RegisterBehaviors(ModularEnemy)
  fullName: IdleBehavior.RegisterBehaviors(ModularEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RegisterBehaviors
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
    startLine: 33
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void RegisterBehaviors(ModularEnemy enemy)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    content.vb: Public Overrides Sub RegisterBehaviors(enemy As ModularEnemy)
  overridden: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehaviors(ModularEnemy)
  overload: Global.IdleBehavior.RegisterBehaviors*
- uid: Global.IdleBehavior.SetInitialBehavior(ModularEnemy)
  commentId: M:Global.IdleBehavior.SetInitialBehavior(ModularEnemy)
  id: SetInitialBehavior(ModularEnemy)
  parent: Global.IdleBehavior
  langs:
  - csharp
  - vb
  name: SetInitialBehavior(ModularEnemy)
  nameWithType: IdleBehavior.SetInitialBehavior(ModularEnemy)
  fullName: IdleBehavior.SetInitialBehavior(ModularEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SetInitialBehavior
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Behaviors/Idle/IdleBehavior.cs
    startLine: 43
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void SetInitialBehavior(ModularEnemy enemy)
    parameters:
    - id: enemy
      type: Global.ModularEnemy
    content.vb: Public Overrides Sub SetInitialBehavior(enemy As ModularEnemy)
  overridden: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.SetInitialBehavior(ModularEnemy)
  overload: Global.IdleBehavior.SetInitialBehavior*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.ModularEnemy.EnemyBehaviorInterface
  commentId: T:Global.ModularEnemy.EnemyBehaviorInterface
  name: ModularEnemy.EnemyBehaviorInterface
  nameWithType: ModularEnemy.EnemyBehaviorInterface
  fullName: ModularEnemy.EnemyBehaviorInterface
  spec.csharp:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  spec.vb:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  commentId: T:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  name: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType)
  name.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType)
  spec.csharp:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
    name: EnemyBehaviorInterfaceManager
  - name: <
  - uid: Global.IdleBehaviorType
    name: IdleBehaviorType
  - name: '>'
  spec.vb:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
    name: EnemyBehaviorInterfaceManager
  - name: (
  - name: Of
  - name: " "
  - uid: Global.IdleBehaviorType
    name: IdleBehaviorType
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.CurrentBehavior
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.CurrentBehavior
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.CurrentBehavior
  name: CurrentBehavior
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.CurrentBehavior
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.CurrentBehavior
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).CurrentBehavior
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).CurrentBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisteredBehaviors
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisteredBehaviors
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredBehaviors
  name: RegisteredBehaviors
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.RegisteredBehaviors
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.RegisteredBehaviors
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).RegisteredBehaviors
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).RegisteredBehaviors
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisteredAlwaysRun
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisteredAlwaysRun
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredAlwaysRun
  name: RegisteredAlwaysRun
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.RegisteredAlwaysRun
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.RegisteredAlwaysRun
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).RegisteredAlwaysRun
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).RegisteredAlwaysRun
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehavior(IdleBehaviorType,ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehavior(IdleBehaviorType,ModularEnemy.EnemyBehaviorInterface)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
  name: RegisterBehavior(IdleBehaviorType, EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.RegisterBehavior(IdleBehaviorType, ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.RegisterBehavior(IdleBehaviorType, ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).RegisterBehavior(IdleBehaviorType, ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).RegisterBehavior(IdleBehaviorType, ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehavior(IdleBehaviorType,ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehavior
  - name: (
  - uid: Global.IdleBehaviorType
    name: IdleBehaviorType
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehavior(IdleBehaviorType,ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehavior
  - name: (
  - uid: Global.IdleBehaviorType
    name: IdleBehaviorType
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  name: RegisterBehaviorAlwaysRun(EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehaviorAlwaysRun
  - name: (
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehaviorAlwaysRun
  - name: (
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.Start(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.Start(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
  name: Start(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.Start(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.Start(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).Start(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).Start(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.Update
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.Update
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
  name: Update()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.Update()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.Update()
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).Update()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).Update()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.Update
    name: Update
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.Update
    name: Update
  - name: (
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.DrawGizmos(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.DrawGizmos(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
  name: DrawGizmos(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.DrawGizmos(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.DrawGizmos(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).DrawGizmos(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).DrawGizmos(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnRestart
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnRestart
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
  name: OnRestart()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.OnRestart()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.OnRestart()
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).OnRestart()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).OnRestart()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnRestart
    name: OnRestart
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnRestart
    name: OnRestart
  - name: (
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.HasStarted(IdleBehaviorType)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.HasStarted(IdleBehaviorType)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
  name: HasStarted(IdleBehaviorType)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.HasStarted(IdleBehaviorType)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.HasStarted(IdleBehaviorType)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).HasStarted(IdleBehaviorType)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).HasStarted(IdleBehaviorType)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.HasStarted(IdleBehaviorType)
    name: HasStarted
  - name: (
  - uid: Global.IdleBehaviorType
    name: IdleBehaviorType
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.HasStarted(IdleBehaviorType)
    name: HasStarted
  - name: (
  - uid: Global.IdleBehaviorType
    name: IdleBehaviorType
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnKill(ModularEnemy,System.Boolean)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnKill(ModularEnemy,System.Boolean)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
  name: OnKill(ModularEnemy, bool)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.OnKill(ModularEnemy, bool)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.OnKill(ModularEnemy, bool)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).OnKill(ModularEnemy, Boolean)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).OnKill(ModularEnemy, Boolean)
  name.vb: OnKill(ModularEnemy, Boolean)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnResetObject(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnResetObject(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
  name: OnResetObject(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.OnResetObject(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.OnResetObject(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).OnResetObject(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).OnResetObject(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: ShowGizmos
  nameWithType: ModularEnemy.EnemyBehaviorInterface.ShowGizmos
  fullName: ModularEnemy.EnemyBehaviorInterface.ShowGizmos
- uid: Global.ModularEnemy.EnemyBehaviorInterface.self
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterface.self
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: self
  nameWithType: ModularEnemy.EnemyBehaviorInterface.self
  fullName: ModularEnemy.EnemyBehaviorInterface.self
- uid: Global.ModularEnemy.EnemyBehaviorInterface.Started
  commentId: P:Global.ModularEnemy.EnemyBehaviorInterface.Started
  parent: Global.ModularEnemy.EnemyBehaviorInterface
  name: Started
  nameWithType: ModularEnemy.EnemyBehaviorInterface.Started
  fullName: ModularEnemy.EnemyBehaviorInterface.Started
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  commentId: T:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
  name: ModularEnemy.EnemyBehaviorInterfaceManager<T>
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T)
  name.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T)
  spec.csharp:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
    name: EnemyBehaviorInterfaceManager
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: .
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1
    name: EnemyBehaviorInterfaceManager
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.CurrentBehavior
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.CurrentBehavior
  name: CurrentBehavior
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.CurrentBehavior
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.CurrentBehavior
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).CurrentBehavior
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).CurrentBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredBehaviors
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredBehaviors
  name: RegisteredBehaviors
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredBehaviors
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredBehaviors
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredBehaviors
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredBehaviors
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredAlwaysRun
  commentId: F:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisteredAlwaysRun
  name: RegisteredAlwaysRun
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredAlwaysRun
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisteredAlwaysRun
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredAlwaysRun
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisteredAlwaysRun
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
  name: RegisterBehavior(T, EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehavior(T, ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehavior
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehavior(`0,ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehavior
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  name: RegisterBehaviorAlwaysRun(EnemyBehaviorInterface)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehaviorAlwaysRun
  - name: (
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviorAlwaysRun(ModularEnemy.EnemyBehaviorInterface)
    name: RegisterBehaviorAlwaysRun
  - name: (
  - uid: Global.ModularEnemy.EnemyBehaviorInterface
    name: EnemyBehaviorInterface
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
  name: Start(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Start(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Start(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Start(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Start(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Start(ModularEnemy)
    name: Start
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
  name: Update()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Update()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.Update()
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Update()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).Update()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
    name: Update
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.Update
    name: Update
  - name: (
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
  name: DrawGizmos(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.DrawGizmos(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.DrawGizmos(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).DrawGizmos(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).DrawGizmos(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.DrawGizmos(ModularEnemy)
    name: DrawGizmos
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
  name: OnRestart()
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnRestart()
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnRestart()
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnRestart()
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnRestart()
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
    name: OnRestart
  - name: (
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnRestart
    name: OnRestart
  - name: (
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
  name: HasStarted(T)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.HasStarted(T)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.HasStarted(T)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).HasStarted(T)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).HasStarted(T)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
    name: HasStarted
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.HasStarted(`0)
    name: HasStarted
  - name: (
  - name: T
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
  isExternal: true
  name: OnKill(ModularEnemy, bool)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnKill(ModularEnemy, bool)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnKill(ModularEnemy, bool)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnKill(ModularEnemy, Boolean)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnKill(ModularEnemy, Boolean)
  name.vb: OnKill(ModularEnemy, Boolean)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnKill(ModularEnemy,System.Boolean)
    name: OnKill
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
  name: OnResetObject(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnResetObject(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.OnResetObject(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnResetObject(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).OnResetObject(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.OnResetObject(ModularEnemy)
    name: OnResetObject
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.IdleBehaviorType
  commentId: T:Global.IdleBehaviorType
  name: IdleBehaviorType
  nameWithType: IdleBehaviorType
  fullName: IdleBehaviorType
- uid: Global.IdleStationaryBehavior
  commentId: T:Global.IdleStationaryBehavior
  name: IdleStationaryBehavior
  nameWithType: IdleStationaryBehavior
  fullName: IdleStationaryBehavior
- uid: Global.IdlePatrolBehavior
  commentId: T:Global.IdlePatrolBehavior
  name: IdlePatrolBehavior
  nameWithType: IdlePatrolBehavior
  fullName: IdlePatrolBehavior
- uid: Global.PlatformPatrolBehavior
  commentId: T:Global.PlatformPatrolBehavior
  name: PlatformPatrolBehavior
  nameWithType: PlatformPatrolBehavior
  fullName: PlatformPatrolBehavior
- uid: Global.IdleBounceBehavior
  commentId: T:Global.IdleBounceBehavior
  name: IdleBounceBehavior
  nameWithType: IdleBounceBehavior
  fullName: IdleBounceBehavior
- uid: Global.ReturnToStartBehavior
  commentId: T:Global.ReturnToStartBehavior
  name: ReturnToStartBehavior
  nameWithType: ReturnToStartBehavior
  fullName: ReturnToStartBehavior
- uid: Global.BoundedWanderBehavior
  commentId: T:Global.BoundedWanderBehavior
  name: BoundedWanderBehavior
  nameWithType: BoundedWanderBehavior
  fullName: BoundedWanderBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehaviors(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehaviors(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
  name: RegisterBehaviors(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.RegisterBehaviors(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.RegisterBehaviors(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).RegisterBehaviors(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).RegisterBehaviors(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehaviors(ModularEnemy)
    name: RegisterBehaviors
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.RegisterBehaviors(ModularEnemy)
    name: RegisterBehaviors
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.IdleBehavior.RegisterBehaviors*
  commentId: Overload:Global.IdleBehavior.RegisterBehaviors
  name: RegisterBehaviors
  nameWithType: IdleBehavior.RegisterBehaviors
  fullName: IdleBehavior.RegisterBehaviors
- uid: Global.ModularEnemy
  commentId: T:Global.ModularEnemy
  name: ModularEnemy
  nameWithType: ModularEnemy
  fullName: ModularEnemy
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
  name: RegisterBehaviors(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviors(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.RegisterBehaviors(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviors(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).RegisterBehaviors(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
    name: RegisterBehaviors
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.RegisterBehaviors(ModularEnemy)
    name: RegisterBehaviors
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.SetInitialBehavior(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.SetInitialBehavior(ModularEnemy)
  parent: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}
  definition: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
  name: SetInitialBehavior(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.SetInitialBehavior(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<IdleBehaviorType>.SetInitialBehavior(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).SetInitialBehavior(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of IdleBehaviorType).SetInitialBehavior(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.SetInitialBehavior(ModularEnemy)
    name: SetInitialBehavior
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager{IdleBehaviorType}.SetInitialBehavior(ModularEnemy)
    name: SetInitialBehavior
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
- uid: Global.IdleBehavior.SetInitialBehavior*
  commentId: Overload:Global.IdleBehavior.SetInitialBehavior
  name: SetInitialBehavior
  nameWithType: IdleBehavior.SetInitialBehavior
  fullName: IdleBehavior.SetInitialBehavior
- uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
  commentId: M:Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
  name: SetInitialBehavior(ModularEnemy)
  nameWithType: ModularEnemy.EnemyBehaviorInterfaceManager<T>.SetInitialBehavior(ModularEnemy)
  fullName: ModularEnemy.EnemyBehaviorInterfaceManager<T>.SetInitialBehavior(ModularEnemy)
  nameWithType.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).SetInitialBehavior(ModularEnemy)
  fullName.vb: ModularEnemy.EnemyBehaviorInterfaceManager(Of T).SetInitialBehavior(ModularEnemy)
  spec.csharp:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
    name: SetInitialBehavior
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
  spec.vb:
  - uid: Global.ModularEnemy.EnemyBehaviorInterfaceManager`1.SetInitialBehavior(ModularEnemy)
    name: SetInitialBehavior
  - name: (
  - uid: Global.ModularEnemy
    name: ModularEnemy
  - name: )
