### YamlMime:ManagedReference
items:
- uid: Global.ConditionalShowAttribute
  commentId: T:Global.ConditionalShowAttribute
  id: ConditionalShowAttribute
  parent: Global
  children:
  - Global.ConditionalShowAttribute.#ctor(System.String,System.Boolean)
  - Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
  - Global.ConditionalShowAttribute.#ctor(System.String,System.Int32[])
  - Global.ConditionalShowAttribute.ConditionalSourceField
  - Global.ConditionalShowAttribute.enumValues
  langs:
  - csharp
  - vb
  name: ConditionalShowAttribute
  nameWithType: ConditionalShowAttribute
  fullName: ConditionalShowAttribute
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/CustomEditor/ConditionalShowAttribute.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ConditionalShowAttribute
    path: ../Assets/Objects & Components/CustomEditor/ConditionalShowAttribute.cs
    startLine: 5
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Property|AttributeTargets.Field, Inherited = true)]

      [CanEditMultipleObjects]

      public class ConditionalShowAttribute : PropertyAttribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.ClassOrAttributeTargets.StructOrAttributeTargets.PropertyOrAttributeTargets.Field, Inherited:=True)>

      <CanEditMultipleObjects>

      Public Class ConditionalShowAttribute Inherits PropertyAttribute
  inheritance:
  - System.Object
  - System.Attribute
  - UnityEngine.PropertyAttribute
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 396
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: true
  - type: UnityEditor.CanEditMultipleObjects
    ctor: UnityEditor.CanEditMultipleObjects.#ctor
    arguments: []
- uid: Global.ConditionalShowAttribute.ConditionalSourceField
  commentId: F:Global.ConditionalShowAttribute.ConditionalSourceField
  id: ConditionalSourceField
  parent: Global.ConditionalShowAttribute
  langs:
  - csharp
  - vb
  name: ConditionalSourceField
  nameWithType: ConditionalShowAttribute.ConditionalSourceField
  fullName: ConditionalShowAttribute.ConditionalSourceField
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/CustomEditor/ConditionalShowAttribute.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ConditionalSourceField
    path: ../Assets/Objects & Components/CustomEditor/ConditionalShowAttribute.cs
    startLine: 10
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public string ConditionalSourceField
    return:
      type: System.String
    content.vb: Public ConditionalSourceField As String
- uid: Global.ConditionalShowAttribute.enumValues
  commentId: F:Global.ConditionalShowAttribute.enumValues
  id: enumValues
  parent: Global.ConditionalShowAttribute
  langs:
  - csharp
  - vb
  name: enumValues
  nameWithType: ConditionalShowAttribute.enumValues
  fullName: ConditionalShowAttribute.enumValues
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/CustomEditor/ConditionalShowAttribute.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: enumValues
    path: ../Assets/Objects & Components/CustomEditor/ConditionalShowAttribute.cs
    startLine: 12
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public int[] enumValues
    return:
      type: System.Int32[]
    content.vb: Public enumValues As Integer()
- uid: Global.ConditionalShowAttribute.#ctor(System.String,System.Boolean)
  commentId: M:Global.ConditionalShowAttribute.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: Global.ConditionalShowAttribute
  langs:
  - csharp
  - vb
  name: ConditionalShowAttribute(string, bool)
  nameWithType: ConditionalShowAttribute.ConditionalShowAttribute(string, bool)
  fullName: ConditionalShowAttribute.ConditionalShowAttribute(string, bool)
  type: Constructor
  source:
    remote:
      path: Assets/Objects & Components/CustomEditor/ConditionalShowAttribute.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: .ctor
    path: ../Assets/Objects & Components/CustomEditor/ConditionalShowAttribute.cs
    startLine: 14
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public ConditionalShowAttribute(string conditionalSourceField, bool val)
    parameters:
    - id: conditionalSourceField
      type: System.String
    - id: val
      type: System.Boolean
    content.vb: Public Sub New(conditionalSourceField As String, val As Boolean)
  overload: Global.ConditionalShowAttribute.#ctor*
  nameWithType.vb: ConditionalShowAttribute.New(String, Boolean)
  fullName.vb: ConditionalShowAttribute.New(String, Boolean)
  name.vb: New(String, Boolean)
- uid: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
  commentId: M:Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: Global.ConditionalShowAttribute
  langs:
  - csharp
  - vb
  name: ConditionalShowAttribute(string, int)
  nameWithType: ConditionalShowAttribute.ConditionalShowAttribute(string, int)
  fullName: ConditionalShowAttribute.ConditionalShowAttribute(string, int)
  type: Constructor
  source:
    remote:
      path: Assets/Objects & Components/CustomEditor/ConditionalShowAttribute.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: .ctor
    path: ../Assets/Objects & Components/CustomEditor/ConditionalShowAttribute.cs
    startLine: 20
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public ConditionalShowAttribute(string conditionalSourceField, int enumValue = 1)
    parameters:
    - id: conditionalSourceField
      type: System.String
    - id: enumValue
      type: System.Int32
    content.vb: Public Sub New(conditionalSourceField As String, enumValue As Integer = 1)
  overload: Global.ConditionalShowAttribute.#ctor*
  nameWithType.vb: ConditionalShowAttribute.New(String, Integer)
  fullName.vb: ConditionalShowAttribute.New(String, Integer)
  name.vb: New(String, Integer)
- uid: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32[])
  commentId: M:Global.ConditionalShowAttribute.#ctor(System.String,System.Int32[])
  id: '#ctor(System.String,System.Int32[])'
  parent: Global.ConditionalShowAttribute
  langs:
  - csharp
  - vb
  name: ConditionalShowAttribute(string, int[])
  nameWithType: ConditionalShowAttribute.ConditionalShowAttribute(string, int[])
  fullName: ConditionalShowAttribute.ConditionalShowAttribute(string, int[])
  type: Constructor
  source:
    remote:
      path: Assets/Objects & Components/CustomEditor/ConditionalShowAttribute.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: .ctor
    path: ../Assets/Objects & Components/CustomEditor/ConditionalShowAttribute.cs
    startLine: 26
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public ConditionalShowAttribute(string conditionalSourceField, int[] enumValues)
    parameters:
    - id: conditionalSourceField
      type: System.String
    - id: enumValues
      type: System.Int32[]
    content.vb: Public Sub New(conditionalSourceField As String, enumValues As Integer())
  overload: Global.ConditionalShowAttribute.#ctor*
  nameWithType.vb: ConditionalShowAttribute.New(String, Integer())
  fullName.vb: ConditionalShowAttribute.New(String, Integer())
  name.vb: New(String, Integer())
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Attribute
  commentId: T:System.Attribute
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute
- uid: UnityEngine.PropertyAttribute
  commentId: T:UnityEngine.PropertyAttribute
  parent: UnityEngine
  isExternal: true
  name: PropertyAttribute
  nameWithType: PropertyAttribute
  fullName: UnityEngine.PropertyAttribute
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Int32[]
  isExternal: true
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: (
  - name: )
- uid: Global.ConditionalShowAttribute.#ctor*
  commentId: Overload:Global.ConditionalShowAttribute.#ctor
  name: ConditionalShowAttribute
  nameWithType: ConditionalShowAttribute.ConditionalShowAttribute
  fullName: ConditionalShowAttribute.ConditionalShowAttribute
  nameWithType.vb: ConditionalShowAttribute.New
  fullName.vb: ConditionalShowAttribute.New
  name.vb: New
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
