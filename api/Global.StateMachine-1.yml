### YamlMime:ManagedReference
items:
- uid: Global.StateMachine`1
  commentId: T:Global.StateMachine`1
  id: StateMachine`1
  parent: Global
  children:
  - Global.StateMachine`1.#ctor(`0)
  - Global.StateMachine`1.AddActionCondition(`0,StateMachine{`0}.Condition)
  - Global.StateMachine`1.AddActionWindow(`0,System.Int32,System.Int32)
  - Global.StateMachine`1.AddEnterStateCallback(`0,StateMachine{`0}.TransitionAction)
  - Global.StateMachine`1.AddLeaveStateCallback(`0,StateMachine{`0}.TransitionAction)
  - Global.StateMachine`1.AddTransition(`0,`0)
  - Global.StateMachine`1.AddTransition(StateMachine{`0}.Transition)
  - Global.StateMachine`1.CanTransition
  - Global.StateMachine`1.CanTransition(`0,`0)
  - Global.StateMachine`1.CanTransition(`0)
  - Global.StateMachine`1.ClearActionWindows
  - Global.StateMachine`1.currentState
  - Global.StateMachine`1.ForceTransition(`0,`0)
  - Global.StateMachine`1.ForceTransition(`0)
  - Global.StateMachine`1.IsInWindow(`0)
  - Global.StateMachine`1.lastState
  - Global.StateMachine`1.ResetWindows
  - Global.StateMachine`1.RestartStateHistory
  - Global.StateMachine`1.TakeTransition
  - Global.StateMachine`1.TakeTransition(`0)
  - Global.StateMachine`1.TimeInState
  - Global.StateMachine`1.UpdateWindows
  langs:
  - csharp
  - vb
  name: StateMachine<T>
  nameWithType: StateMachine<T>
  fullName: StateMachine<T>
  type: Class
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: StateMachine
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 4
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public class StateMachine<T>
    typeParameters:
    - id: T
    content.vb: Public Class StateMachine(Of T)
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  nameWithType.vb: StateMachine(Of T)
  fullName.vb: StateMachine(Of T)
  name.vb: StateMachine(Of T)
- uid: Global.StateMachine`1.currentState
  commentId: P:Global.StateMachine`1.currentState
  id: currentState
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: currentState
  nameWithType: StateMachine<T>.currentState
  fullName: StateMachine<T>.currentState
  type: Property
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: currentState
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 12
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public T currentState { get; protected set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property currentState As T
  overload: Global.StateMachine`1.currentState*
  nameWithType.vb: StateMachine(Of T).currentState
  fullName.vb: StateMachine(Of T).currentState
- uid: Global.StateMachine`1.lastState
  commentId: P:Global.StateMachine`1.lastState
  id: lastState
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: lastState
  nameWithType: StateMachine<T>.lastState
  fullName: StateMachine<T>.lastState
  type: Property
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: lastState
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 13
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public T lastState { get; protected set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property lastState As T
  overload: Global.StateMachine`1.lastState*
  nameWithType.vb: StateMachine(Of T).lastState
  fullName.vb: StateMachine(Of T).lastState
- uid: Global.StateMachine`1.TimeInState
  commentId: P:Global.StateMachine`1.TimeInState
  id: TimeInState
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: TimeInState
  nameWithType: StateMachine<T>.TimeInState
  fullName: StateMachine<T>.TimeInState
  type: Property
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: TimeInState
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 24
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public float TimeInState { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property TimeInState As Single
  overload: Global.StateMachine`1.TimeInState*
  nameWithType.vb: StateMachine(Of T).TimeInState
  fullName.vb: StateMachine(Of T).TimeInState
- uid: Global.StateMachine`1.#ctor(`0)
  commentId: M:Global.StateMachine`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: StateMachine(T)
  nameWithType: StateMachine<T>.StateMachine(T)
  fullName: StateMachine<T>.StateMachine(T)
  type: Constructor
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: .ctor
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 26
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public StateMachine(T InitialState)
    parameters:
    - id: InitialState
      type: '{T}'
    content.vb: Public Sub New(InitialState As T)
  overload: Global.StateMachine`1.#ctor*
  nameWithType.vb: StateMachine(Of T).New(T)
  fullName.vb: StateMachine(Of T).New(T)
  name.vb: New(T)
- uid: Global.StateMachine`1.AddActionCondition(`0,StateMachine{`0}.Condition)
  commentId: M:Global.StateMachine`1.AddActionCondition(`0,StateMachine{`0}.Condition)
  id: AddActionCondition(`0,StateMachine{`0}.Condition)
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: AddActionCondition(T, Condition)
  nameWithType: StateMachine<T>.AddActionCondition(T, StateMachine<T>.Condition)
  fullName: StateMachine<T>.AddActionCondition(T, StateMachine<T>.Condition)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddActionCondition
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 35
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void AddActionCondition(T state, StateMachine<T>.Condition condition)
    parameters:
    - id: state
      type: '{T}'
    - id: condition
      type: Global.StateMachine`1.Condition
    content.vb: Public Sub AddActionCondition(state As T, condition As StateMachine(Of T).Condition)
  overload: Global.StateMachine`1.AddActionCondition*
  nameWithType.vb: StateMachine(Of T).AddActionCondition(T, StateMachine(Of T).Condition)
  fullName.vb: StateMachine(Of T).AddActionCondition(T, StateMachine(Of T).Condition)
- uid: Global.StateMachine`1.AddActionWindow(`0,System.Int32,System.Int32)
  commentId: M:Global.StateMachine`1.AddActionWindow(`0,System.Int32,System.Int32)
  id: AddActionWindow(`0,System.Int32,System.Int32)
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: AddActionWindow(T, int, int)
  nameWithType: StateMachine<T>.AddActionWindow(T, int, int)
  fullName: StateMachine<T>.AddActionWindow(T, int, int)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddActionWindow
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 40
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void AddActionWindow(T state, int preWindow, int postWindow)
    parameters:
    - id: state
      type: '{T}'
    - id: preWindow
      type: System.Int32
    - id: postWindow
      type: System.Int32
    content.vb: Public Sub AddActionWindow(state As T, preWindow As Integer, postWindow As Integer)
  overload: Global.StateMachine`1.AddActionWindow*
  nameWithType.vb: StateMachine(Of T).AddActionWindow(T, Integer, Integer)
  fullName.vb: StateMachine(Of T).AddActionWindow(T, Integer, Integer)
  name.vb: AddActionWindow(T, Integer, Integer)
- uid: Global.StateMachine`1.AddEnterStateCallback(`0,StateMachine{`0}.TransitionAction)
  commentId: M:Global.StateMachine`1.AddEnterStateCallback(`0,StateMachine{`0}.TransitionAction)
  id: AddEnterStateCallback(`0,StateMachine{`0}.TransitionAction)
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: AddEnterStateCallback(T, TransitionAction)
  nameWithType: StateMachine<T>.AddEnterStateCallback(T, StateMachine<T>.TransitionAction)
  fullName: StateMachine<T>.AddEnterStateCallback(T, StateMachine<T>.TransitionAction)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddEnterStateCallback
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 47
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void AddEnterStateCallback(T state, StateMachine<T>.TransitionAction action)
    parameters:
    - id: state
      type: '{T}'
    - id: action
      type: Global.StateMachine`1.TransitionAction
    content.vb: Public Sub AddEnterStateCallback(state As T, action As StateMachine(Of T).TransitionAction)
  overload: Global.StateMachine`1.AddEnterStateCallback*
  nameWithType.vb: StateMachine(Of T).AddEnterStateCallback(T, StateMachine(Of T).TransitionAction)
  fullName.vb: StateMachine(Of T).AddEnterStateCallback(T, StateMachine(Of T).TransitionAction)
- uid: Global.StateMachine`1.AddLeaveStateCallback(`0,StateMachine{`0}.TransitionAction)
  commentId: M:Global.StateMachine`1.AddLeaveStateCallback(`0,StateMachine{`0}.TransitionAction)
  id: AddLeaveStateCallback(`0,StateMachine{`0}.TransitionAction)
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: AddLeaveStateCallback(T, TransitionAction)
  nameWithType: StateMachine<T>.AddLeaveStateCallback(T, StateMachine<T>.TransitionAction)
  fullName: StateMachine<T>.AddLeaveStateCallback(T, StateMachine<T>.TransitionAction)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddLeaveStateCallback
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 59
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void AddLeaveStateCallback(T state, StateMachine<T>.TransitionAction action)
    parameters:
    - id: state
      type: '{T}'
    - id: action
      type: Global.StateMachine`1.TransitionAction
    content.vb: Public Sub AddLeaveStateCallback(state As T, action As StateMachine(Of T).TransitionAction)
  overload: Global.StateMachine`1.AddLeaveStateCallback*
  nameWithType.vb: StateMachine(Of T).AddLeaveStateCallback(T, StateMachine(Of T).TransitionAction)
  fullName.vb: StateMachine(Of T).AddLeaveStateCallback(T, StateMachine(Of T).TransitionAction)
- uid: Global.StateMachine`1.UpdateWindows
  commentId: M:Global.StateMachine`1.UpdateWindows
  id: UpdateWindows
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: UpdateWindows()
  nameWithType: StateMachine<T>.UpdateWindows()
  fullName: StateMachine<T>.UpdateWindows()
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: UpdateWindows
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 71
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void UpdateWindows()
    content.vb: Public Sub UpdateWindows()
  overload: Global.StateMachine`1.UpdateWindows*
  nameWithType.vb: StateMachine(Of T).UpdateWindows()
  fullName.vb: StateMachine(Of T).UpdateWindows()
- uid: Global.StateMachine`1.ResetWindows
  commentId: M:Global.StateMachine`1.ResetWindows
  id: ResetWindows
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: ResetWindows()
  nameWithType: StateMachine<T>.ResetWindows()
  fullName: StateMachine<T>.ResetWindows()
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ResetWindows
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 80
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void ResetWindows()
    content.vb: Public Sub ResetWindows()
  overload: Global.StateMachine`1.ResetWindows*
  nameWithType.vb: StateMachine(Of T).ResetWindows()
  fullName.vb: StateMachine(Of T).ResetWindows()
- uid: Global.StateMachine`1.ClearActionWindows
  commentId: M:Global.StateMachine`1.ClearActionWindows
  id: ClearActionWindows
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: ClearActionWindows()
  nameWithType: StateMachine<T>.ClearActionWindows()
  fullName: StateMachine<T>.ClearActionWindows()
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ClearActionWindows
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 88
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void ClearActionWindows()
    content.vb: Public Sub ClearActionWindows()
  overload: Global.StateMachine`1.ClearActionWindows*
  nameWithType.vb: StateMachine(Of T).ClearActionWindows()
  fullName.vb: StateMachine(Of T).ClearActionWindows()
- uid: Global.StateMachine`1.RestartStateHistory
  commentId: M:Global.StateMachine`1.RestartStateHistory
  id: RestartStateHistory
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: RestartStateHistory()
  nameWithType: StateMachine<T>.RestartStateHistory()
  fullName: StateMachine<T>.RestartStateHistory()
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RestartStateHistory
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 96
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nBest if called on the first frame after a reset event. All this does is reinvoke the current frame&apos;s event.\n"
  example: []
  syntax:
    content: public void RestartStateHistory()
    content.vb: Public Sub RestartStateHistory()
  overload: Global.StateMachine`1.RestartStateHistory*
  nameWithType.vb: StateMachine(Of T).RestartStateHistory()
  fullName.vb: StateMachine(Of T).RestartStateHistory()
- uid: Global.StateMachine`1.CanTransition
  commentId: M:Global.StateMachine`1.CanTransition
  id: CanTransition
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: CanTransition()
  nameWithType: StateMachine<T>.CanTransition()
  fullName: StateMachine<T>.CanTransition()
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: CanTransition
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 102
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected bool CanTransition()
    return:
      type: System.Boolean
    content.vb: Protected Function CanTransition() As Boolean
  overload: Global.StateMachine`1.CanTransition*
  nameWithType.vb: StateMachine(Of T).CanTransition()
  fullName.vb: StateMachine(Of T).CanTransition()
- uid: Global.StateMachine`1.CanTransition(`0)
  commentId: M:Global.StateMachine`1.CanTransition(`0)
  id: CanTransition(`0)
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: CanTransition(T)
  nameWithType: StateMachine<T>.CanTransition(T)
  fullName: StateMachine<T>.CanTransition(T)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: CanTransition
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 112
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool CanTransition(T next_state)
    parameters:
    - id: next_state
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function CanTransition(next_state As T) As Boolean
  overload: Global.StateMachine`1.CanTransition*
  nameWithType.vb: StateMachine(Of T).CanTransition(T)
  fullName.vb: StateMachine(Of T).CanTransition(T)
- uid: Global.StateMachine`1.CanTransition(`0,`0)
  commentId: M:Global.StateMachine`1.CanTransition(`0,`0)
  id: CanTransition(`0,`0)
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: CanTransition(T, T)
  nameWithType: StateMachine<T>.CanTransition(T, T)
  fullName: StateMachine<T>.CanTransition(T, T)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: CanTransition
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 117
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool CanTransition(T from, T to)
    parameters:
    - id: from
      type: '{T}'
    - id: to
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function CanTransition(from As T, [to] As T) As Boolean
  overload: Global.StateMachine`1.CanTransition*
  nameWithType.vb: StateMachine(Of T).CanTransition(T, T)
  fullName.vb: StateMachine(Of T).CanTransition(T, T)
- uid: Global.StateMachine`1.IsInWindow(`0)
  commentId: M:Global.StateMachine`1.IsInWindow(`0)
  id: IsInWindow(`0)
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: IsInWindow(T)
  nameWithType: StateMachine<T>.IsInWindow(T)
  fullName: StateMachine<T>.IsInWindow(T)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: IsInWindow
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 137
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool IsInWindow(T state)
    parameters:
    - id: state
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function IsInWindow(state As T) As Boolean
  overload: Global.StateMachine`1.IsInWindow*
  nameWithType.vb: StateMachine(Of T).IsInWindow(T)
  fullName.vb: StateMachine(Of T).IsInWindow(T)
- uid: Global.StateMachine`1.TakeTransition
  commentId: M:Global.StateMachine`1.TakeTransition
  id: TakeTransition
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: TakeTransition()
  nameWithType: StateMachine<T>.TakeTransition()
  fullName: StateMachine<T>.TakeTransition()
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: TakeTransition
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 146
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected void TakeTransition()
    content.vb: Protected Sub TakeTransition()
  overload: Global.StateMachine`1.TakeTransition*
  nameWithType.vb: StateMachine(Of T).TakeTransition()
  fullName.vb: StateMachine(Of T).TakeTransition()
- uid: Global.StateMachine`1.TakeTransition(`0)
  commentId: M:Global.StateMachine`1.TakeTransition(`0)
  id: TakeTransition(`0)
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: TakeTransition(T)
  nameWithType: StateMachine<T>.TakeTransition(T)
  fullName: StateMachine<T>.TakeTransition(T)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: TakeTransition
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 151
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public bool TakeTransition(T next_state)
    parameters:
    - id: next_state
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function TakeTransition(next_state As T) As Boolean
  overload: Global.StateMachine`1.TakeTransition*
  nameWithType.vb: StateMachine(Of T).TakeTransition(T)
  fullName.vb: StateMachine(Of T).TakeTransition(T)
- uid: Global.StateMachine`1.ForceTransition(`0)
  commentId: M:Global.StateMachine`1.ForceTransition(`0)
  id: ForceTransition(`0)
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: ForceTransition(T)
  nameWithType: StateMachine<T>.ForceTransition(T)
  fullName: StateMachine<T>.ForceTransition(T)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ForceTransition
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 187
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void ForceTransition(T new_state)
    parameters:
    - id: new_state
      type: '{T}'
    content.vb: Public Sub ForceTransition(new_state As T)
  overload: Global.StateMachine`1.ForceTransition*
  nameWithType.vb: StateMachine(Of T).ForceTransition(T)
  fullName.vb: StateMachine(Of T).ForceTransition(T)
- uid: Global.StateMachine`1.ForceTransition(`0,`0)
  commentId: M:Global.StateMachine`1.ForceTransition(`0,`0)
  id: ForceTransition(`0,`0)
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: ForceTransition(T, T)
  nameWithType: StateMachine<T>.ForceTransition(T, T)
  fullName: StateMachine<T>.ForceTransition(T, T)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ForceTransition
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 192
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: protected bool ForceTransition(T from, T to)
    parameters:
    - id: from
      type: '{T}'
    - id: to
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Protected Function ForceTransition(from As T, [to] As T) As Boolean
  overload: Global.StateMachine`1.ForceTransition*
  nameWithType.vb: StateMachine(Of T).ForceTransition(T, T)
  fullName.vb: StateMachine(Of T).ForceTransition(T, T)
- uid: Global.StateMachine`1.AddTransition(`0,`0)
  commentId: M:Global.StateMachine`1.AddTransition(`0,`0)
  id: AddTransition(`0,`0)
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: AddTransition(T, T)
  nameWithType: StateMachine<T>.AddTransition(T, T)
  fullName: StateMachine<T>.AddTransition(T, T)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddTransition
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 208
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void AddTransition(T from, T to)
    parameters:
    - id: from
      type: '{T}'
    - id: to
      type: '{T}'
    content.vb: Public Sub AddTransition(from As T, [to] As T)
  overload: Global.StateMachine`1.AddTransition*
  nameWithType.vb: StateMachine(Of T).AddTransition(T, T)
  fullName.vb: StateMachine(Of T).AddTransition(T, T)
- uid: Global.StateMachine`1.AddTransition(StateMachine{`0}.Transition)
  commentId: M:Global.StateMachine`1.AddTransition(StateMachine{`0}.Transition)
  id: AddTransition(StateMachine{`0}.Transition)
  parent: Global.StateMachine`1
  langs:
  - csharp
  - vb
  name: AddTransition(Transition)
  nameWithType: StateMachine<T>.AddTransition(StateMachine<T>.Transition)
  fullName: StateMachine<T>.AddTransition(StateMachine<T>.Transition)
  type: Method
  source:
    remote:
      path: Assets/Framework/Util/StateMachine.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: AddTransition
    path: ../Assets/Framework/Util/StateMachine.cs
    startLine: 216
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void AddTransition(StateMachine<T>.Transition transition)
    parameters:
    - id: transition
      type: Global.StateMachine`1.Transition
    content.vb: Public Sub AddTransition(transition As StateMachine(Of T).Transition)
  overload: Global.StateMachine`1.AddTransition*
  nameWithType.vb: StateMachine(Of T).AddTransition(StateMachine(Of T).Transition)
  fullName.vb: StateMachine(Of T).AddTransition(StateMachine(Of T).Transition)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.StateMachine`1.currentState*
  commentId: Overload:Global.StateMachine`1.currentState
  name: currentState
  nameWithType: StateMachine<T>.currentState
  fullName: StateMachine<T>.currentState
  nameWithType.vb: StateMachine(Of T).currentState
  fullName.vb: StateMachine(Of T).currentState
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Global.StateMachine`1.lastState*
  commentId: Overload:Global.StateMachine`1.lastState
  name: lastState
  nameWithType: StateMachine<T>.lastState
  fullName: StateMachine<T>.lastState
  nameWithType.vb: StateMachine(Of T).lastState
  fullName.vb: StateMachine(Of T).lastState
- uid: Global.StateMachine`1.TimeInState*
  commentId: Overload:Global.StateMachine`1.TimeInState
  name: TimeInState
  nameWithType: StateMachine<T>.TimeInState
  fullName: StateMachine<T>.TimeInState
  nameWithType.vb: StateMachine(Of T).TimeInState
  fullName.vb: StateMachine(Of T).TimeInState
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.StateMachine`1.#ctor*
  commentId: Overload:Global.StateMachine`1.#ctor
  name: StateMachine
  nameWithType: StateMachine<T>.StateMachine
  fullName: StateMachine<T>.StateMachine
  nameWithType.vb: StateMachine(Of T).New
  fullName.vb: StateMachine(Of T).New
  name.vb: New
- uid: Global.StateMachine`1.AddActionCondition*
  commentId: Overload:Global.StateMachine`1.AddActionCondition
  name: AddActionCondition
  nameWithType: StateMachine<T>.AddActionCondition
  fullName: StateMachine<T>.AddActionCondition
  nameWithType.vb: StateMachine(Of T).AddActionCondition
  fullName.vb: StateMachine(Of T).AddActionCondition
- uid: Global.StateMachine`1.Condition
  commentId: T:Global.StateMachine`1.Condition
  name: StateMachine<T>.Condition
  nameWithType: StateMachine<T>.Condition
  fullName: StateMachine<T>.Condition
  nameWithType.vb: StateMachine(Of T).Condition
  fullName.vb: StateMachine(Of T).Condition
  name.vb: StateMachine(Of T).Condition
  spec.csharp:
  - uid: Global.StateMachine`1
    name: StateMachine
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: Global.StateMachine`1.Condition
    name: Condition
  spec.vb:
  - uid: Global.StateMachine`1
    name: StateMachine
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: Global.StateMachine`1.Condition
    name: Condition
- uid: Global.StateMachine`1.AddActionWindow*
  commentId: Overload:Global.StateMachine`1.AddActionWindow
  name: AddActionWindow
  nameWithType: StateMachine<T>.AddActionWindow
  fullName: StateMachine<T>.AddActionWindow
  nameWithType.vb: StateMachine(Of T).AddActionWindow
  fullName.vb: StateMachine(Of T).AddActionWindow
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.StateMachine`1.AddEnterStateCallback*
  commentId: Overload:Global.StateMachine`1.AddEnterStateCallback
  name: AddEnterStateCallback
  nameWithType: StateMachine<T>.AddEnterStateCallback
  fullName: StateMachine<T>.AddEnterStateCallback
  nameWithType.vb: StateMachine(Of T).AddEnterStateCallback
  fullName.vb: StateMachine(Of T).AddEnterStateCallback
- uid: Global.StateMachine`1.TransitionAction
  commentId: T:Global.StateMachine`1.TransitionAction
  name: StateMachine<T>.TransitionAction
  nameWithType: StateMachine<T>.TransitionAction
  fullName: StateMachine<T>.TransitionAction
  nameWithType.vb: StateMachine(Of T).TransitionAction
  fullName.vb: StateMachine(Of T).TransitionAction
  name.vb: StateMachine(Of T).TransitionAction
  spec.csharp:
  - uid: Global.StateMachine`1
    name: StateMachine
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: Global.StateMachine`1.TransitionAction
    name: TransitionAction
  spec.vb:
  - uid: Global.StateMachine`1
    name: StateMachine
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: Global.StateMachine`1.TransitionAction
    name: TransitionAction
- uid: Global.StateMachine`1.AddLeaveStateCallback*
  commentId: Overload:Global.StateMachine`1.AddLeaveStateCallback
  name: AddLeaveStateCallback
  nameWithType: StateMachine<T>.AddLeaveStateCallback
  fullName: StateMachine<T>.AddLeaveStateCallback
  nameWithType.vb: StateMachine(Of T).AddLeaveStateCallback
  fullName.vb: StateMachine(Of T).AddLeaveStateCallback
- uid: Global.StateMachine`1.UpdateWindows*
  commentId: Overload:Global.StateMachine`1.UpdateWindows
  name: UpdateWindows
  nameWithType: StateMachine<T>.UpdateWindows
  fullName: StateMachine<T>.UpdateWindows
  nameWithType.vb: StateMachine(Of T).UpdateWindows
  fullName.vb: StateMachine(Of T).UpdateWindows
- uid: Global.StateMachine`1.ResetWindows*
  commentId: Overload:Global.StateMachine`1.ResetWindows
  name: ResetWindows
  nameWithType: StateMachine<T>.ResetWindows
  fullName: StateMachine<T>.ResetWindows
  nameWithType.vb: StateMachine(Of T).ResetWindows
  fullName.vb: StateMachine(Of T).ResetWindows
- uid: Global.StateMachine`1.ClearActionWindows*
  commentId: Overload:Global.StateMachine`1.ClearActionWindows
  name: ClearActionWindows
  nameWithType: StateMachine<T>.ClearActionWindows
  fullName: StateMachine<T>.ClearActionWindows
  nameWithType.vb: StateMachine(Of T).ClearActionWindows
  fullName.vb: StateMachine(Of T).ClearActionWindows
- uid: Global.StateMachine`1.RestartStateHistory*
  commentId: Overload:Global.StateMachine`1.RestartStateHistory
  name: RestartStateHistory
  nameWithType: StateMachine<T>.RestartStateHistory
  fullName: StateMachine<T>.RestartStateHistory
  nameWithType.vb: StateMachine(Of T).RestartStateHistory
  fullName.vb: StateMachine(Of T).RestartStateHistory
- uid: Global.StateMachine`1.CanTransition*
  commentId: Overload:Global.StateMachine`1.CanTransition
  name: CanTransition
  nameWithType: StateMachine<T>.CanTransition
  fullName: StateMachine<T>.CanTransition
  nameWithType.vb: StateMachine(Of T).CanTransition
  fullName.vb: StateMachine(Of T).CanTransition
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.StateMachine`1.IsInWindow*
  commentId: Overload:Global.StateMachine`1.IsInWindow
  name: IsInWindow
  nameWithType: StateMachine<T>.IsInWindow
  fullName: StateMachine<T>.IsInWindow
  nameWithType.vb: StateMachine(Of T).IsInWindow
  fullName.vb: StateMachine(Of T).IsInWindow
- uid: Global.StateMachine`1.TakeTransition*
  commentId: Overload:Global.StateMachine`1.TakeTransition
  name: TakeTransition
  nameWithType: StateMachine<T>.TakeTransition
  fullName: StateMachine<T>.TakeTransition
  nameWithType.vb: StateMachine(Of T).TakeTransition
  fullName.vb: StateMachine(Of T).TakeTransition
- uid: Global.StateMachine`1.ForceTransition*
  commentId: Overload:Global.StateMachine`1.ForceTransition
  name: ForceTransition
  nameWithType: StateMachine<T>.ForceTransition
  fullName: StateMachine<T>.ForceTransition
  nameWithType.vb: StateMachine(Of T).ForceTransition
  fullName.vb: StateMachine(Of T).ForceTransition
- uid: Global.StateMachine`1.AddTransition*
  commentId: Overload:Global.StateMachine`1.AddTransition
  name: AddTransition
  nameWithType: StateMachine<T>.AddTransition
  fullName: StateMachine<T>.AddTransition
  nameWithType.vb: StateMachine(Of T).AddTransition
  fullName.vb: StateMachine(Of T).AddTransition
- uid: Global.StateMachine`1.Transition
  commentId: T:Global.StateMachine`1.Transition
  name: StateMachine<T>.Transition
  nameWithType: StateMachine<T>.Transition
  fullName: StateMachine<T>.Transition
  nameWithType.vb: StateMachine(Of T).Transition
  fullName.vb: StateMachine(Of T).Transition
  name.vb: StateMachine(Of T).Transition
  spec.csharp:
  - uid: Global.StateMachine`1
    name: StateMachine
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: Global.StateMachine`1.Transition
    name: Transition
  spec.vb:
  - uid: Global.StateMachine`1
    name: StateMachine
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: Global.StateMachine`1.Transition
    name: Transition
