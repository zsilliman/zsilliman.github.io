### YamlMime:ManagedReference
items:
- uid: Global.PlayerSpawn
  commentId: T:Global.PlayerSpawn
  id: PlayerSpawn
  parent: Global
  children:
  - Global.PlayerSpawn.EvaluateBestSpawnLocation
  - Global.PlayerSpawn.GetScenesList
  - Global.PlayerSpawn.priority
  - Global.PlayerSpawn.SourceSceneAssetPath
  - Global.PlayerSpawn.SourceSceneName
  - Global.PlayerSpawn.SpawnSourceScene
  langs:
  - csharp
  - vb
  name: PlayerSpawn
  nameWithType: PlayerSpawn
  fullName: PlayerSpawn
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: PlayerSpawn
    path: ../Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
    startLine: 3
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: 'public class PlayerSpawn : MonoBehaviour'
    content.vb: Public Class PlayerSpawn Inherits MonoBehaviour
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.Component
  - UnityEngine.Behaviour
  - UnityEngine.MonoBehaviour
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
- uid: Global.PlayerSpawn.SpawnSourceScene
  commentId: F:Global.PlayerSpawn.SpawnSourceScene
  id: SpawnSourceScene
  parent: Global.PlayerSpawn
  langs:
  - csharp
  - vb
  name: SpawnSourceScene
  nameWithType: PlayerSpawn.SpawnSourceScene
  fullName: PlayerSpawn.SpawnSourceScene
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SpawnSourceScene
    path: ../Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
    startLine: 12
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Tooltip("Any Source Scene: lowest priority, but will accept any scene that is not handled by a specific source scene\nSpecificSourceScene: highest priority, will only accept source scenes from specific source scenes.")]

      public PlayerSpawn.PlayerSpawnSource SpawnSourceScene
    return:
      type: Global.PlayerSpawn.PlayerSpawnSource
    content.vb: >-
      <Tooltip("Any Source Scene: lowest priority, but will accept any scene that is not handled by a specific source scene" & vbLf & "SpecificSourceScene: highest priority, will only accept source scenes from specific source scenes.")>

      Public SpawnSourceScene As PlayerSpawn.PlayerSpawnSource
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: >-
        Any Source Scene: lowest priority, but will accept any scene that is not handled by a specific source scene

        SpecificSourceScene: highest priority, will only accept source scenes from specific source scenes.
- uid: Global.PlayerSpawn.SourceSceneName
  commentId: F:Global.PlayerSpawn.SourceSceneName
  id: SourceSceneName
  parent: Global.PlayerSpawn
  langs:
  - csharp
  - vb
  name: SourceSceneName
  nameWithType: PlayerSpawn.SourceSceneName
  fullName: PlayerSpawn.SourceSceneName
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SourceSceneName
    path: ../Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
    startLine: 16
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Space(10)]

      [ConditionalShow("SpawnSourceScene", 1)]

      [Dropdown("GetScenesList()")]

      [Tooltip("Spawn to this player spawner when travelling from one of the listed scenes")]

      public string SourceSceneName
    return:
      type: System.String
    content.vb: >-
      <Space(10)>

      <ConditionalShow("SpawnSourceScene", 1)>

      <Dropdown("GetScenesList()")>

      <Tooltip("Spawn to this player spawner when travelling from one of the listed scenes")>

      Public SourceSceneName As String
  attributes:
  - type: UnityEngine.SpaceAttribute
    ctor: UnityEngine.SpaceAttribute.#ctor(System.Single)
    arguments:
    - type: System.Single
      value: 10
  - type: Global.ConditionalShowAttribute
    ctor: Global.ConditionalShowAttribute.#ctor(System.String,System.Int32)
    arguments:
    - type: System.String
      value: SpawnSourceScene
    - type: System.Int32
      value: 1
  - type: Global.DropdownAttribute
    ctor: Global.DropdownAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetScenesList()
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Spawn to this player spawner when travelling from one of the listed scenes
- uid: Global.PlayerSpawn.SourceSceneAssetPath
  commentId: P:Global.PlayerSpawn.SourceSceneAssetPath
  id: SourceSceneAssetPath
  parent: Global.PlayerSpawn
  langs:
  - csharp
  - vb
  name: SourceSceneAssetPath
  nameWithType: PlayerSpawn.SourceSceneAssetPath
  fullName: PlayerSpawn.SourceSceneAssetPath
  type: Property
  source:
    remote:
      path: Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SourceSceneAssetPath
    path: ../Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
    startLine: 17
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public string SourceSceneAssetPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SourceSceneAssetPath As String
  overload: Global.PlayerSpawn.SourceSceneAssetPath*
- uid: Global.PlayerSpawn.priority
  commentId: P:Global.PlayerSpawn.priority
  id: priority
  parent: Global.PlayerSpawn
  langs:
  - csharp
  - vb
  name: priority
  nameWithType: PlayerSpawn.priority
  fullName: PlayerSpawn.priority
  type: Property
  source:
    remote:
      path: Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: priority
    path: ../Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
    startLine: 19
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public int priority { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property priority As Integer
  overload: Global.PlayerSpawn.priority*
- uid: Global.PlayerSpawn.GetScenesList
  commentId: M:Global.PlayerSpawn.GetScenesList
  id: GetScenesList
  parent: Global.PlayerSpawn
  langs:
  - csharp
  - vb
  name: GetScenesList()
  nameWithType: PlayerSpawn.GetScenesList()
  fullName: PlayerSpawn.GetScenesList()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetScenesList
    path: ../Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
    startLine: 21
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public List<string> GetScenesList()
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Function GetScenesList() As List(Of String)
  overload: Global.PlayerSpawn.GetScenesList*
- uid: Global.PlayerSpawn.EvaluateBestSpawnLocation
  commentId: M:Global.PlayerSpawn.EvaluateBestSpawnLocation
  id: EvaluateBestSpawnLocation
  parent: Global.PlayerSpawn
  langs:
  - csharp
  - vb
  name: EvaluateBestSpawnLocation()
  nameWithType: PlayerSpawn.EvaluateBestSpawnLocation()
  fullName: PlayerSpawn.EvaluateBestSpawnLocation()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: EvaluateBestSpawnLocation
    path: ../Assets/Objects & Components/Entities/Player/Spawning/PlayerSpawn.cs
    startLine: 39
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nIt will locate the best spawn location based on the current world state\n"
  example: []
  syntax:
    content: public static PlayerSpawn EvaluateBestSpawnLocation()
    return:
      type: Global.PlayerSpawn
      description: a player spawn if one can be found. Otherwise it returns null
    content.vb: Public Shared Function EvaluateBestSpawnLocation() As PlayerSpawn
  overload: Global.PlayerSpawn.EvaluateBestSpawnLocation*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.Component
  commentId: T:UnityEngine.Component
  parent: UnityEngine
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: UnityEngine.Component
- uid: UnityEngine.Behaviour
  commentId: T:UnityEngine.Behaviour
  parent: UnityEngine
  isExternal: true
  name: Behaviour
  nameWithType: Behaviour
  fullName: UnityEngine.Behaviour
- uid: UnityEngine.MonoBehaviour
  commentId: T:UnityEngine.MonoBehaviour
  parent: UnityEngine
  isExternal: true
  name: MonoBehaviour
  nameWithType: MonoBehaviour
  fullName: UnityEngine.MonoBehaviour
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.PlayerSpawn.PlayerSpawnSource
  commentId: T:Global.PlayerSpawn.PlayerSpawnSource
  name: PlayerSpawn.PlayerSpawnSource
  nameWithType: PlayerSpawn.PlayerSpawnSource
  fullName: PlayerSpawn.PlayerSpawnSource
  spec.csharp:
  - uid: Global.PlayerSpawn
    name: PlayerSpawn
  - name: .
  - uid: Global.PlayerSpawn.PlayerSpawnSource
    name: PlayerSpawnSource
  spec.vb:
  - uid: Global.PlayerSpawn
    name: PlayerSpawn
  - name: .
  - uid: Global.PlayerSpawn.PlayerSpawnSource
    name: PlayerSpawnSource
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.PlayerSpawn.SourceSceneAssetPath*
  commentId: Overload:Global.PlayerSpawn.SourceSceneAssetPath
  name: SourceSceneAssetPath
  nameWithType: PlayerSpawn.SourceSceneAssetPath
  fullName: PlayerSpawn.SourceSceneAssetPath
- uid: Global.PlayerSpawn.priority*
  commentId: Overload:Global.PlayerSpawn.priority
  name: priority
  nameWithType: PlayerSpawn.priority
  fullName: PlayerSpawn.priority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.PlayerSpawn.GetScenesList*
  commentId: Overload:Global.PlayerSpawn.GetScenesList
  name: GetScenesList
  nameWithType: PlayerSpawn.GetScenesList
  fullName: PlayerSpawn.GetScenesList
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<string>
  nameWithType: List<string>
  fullName: System.Collections.Generic.List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: Global.PlayerSpawn.EvaluateBestSpawnLocation*
  commentId: Overload:Global.PlayerSpawn.EvaluateBestSpawnLocation
  name: EvaluateBestSpawnLocation
  nameWithType: PlayerSpawn.EvaluateBestSpawnLocation
  fullName: PlayerSpawn.EvaluateBestSpawnLocation
- uid: Global.PlayerSpawn
  commentId: T:Global.PlayerSpawn
  name: PlayerSpawn
  nameWithType: PlayerSpawn
  fullName: PlayerSpawn
