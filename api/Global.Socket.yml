### YamlMime:ManagedReference
items:
- uid: Global.Socket
  commentId: T:Global.Socket
  id: Socket
  parent: Global
  children:
  - Global.Socket.GetConstrainedAngle(System.Single,System.Single,System.Single)
  - Global.Socket.GetCurrentAngle
  - Global.Socket.GetMinAngleBetween(System.Single,System.Single)
  - Global.Socket.GetNearestAngle(System.Single,System.Single,System.Single)
  - Global.Socket.maxAngle
  - Global.Socket.minAngle
  - Global.Socket.OnHitMaxAngle
  - Global.Socket.OnHitMinAngle
  - Global.Socket.ResetSocket
  - Global.Socket.RotateConstrained(System.Single)
  - Global.Socket.SetConstrainedSocketRotation(System.Single)
  langs:
  - csharp
  - vb
  name: Socket
  nameWithType: Socket
  fullName: Socket
  type: Class
  source:
    remote:
      path: Assets/Framework/Physics/Joints/Socket.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Socket
    path: ../Assets/Framework/Physics/Joints/Socket.cs
    startLine: 2
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: 'public class Socket : MonoBehaviour'
    content.vb: Public Class Socket Inherits MonoBehaviour
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.Component
  - UnityEngine.Behaviour
  - UnityEngine.MonoBehaviour
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
- uid: Global.Socket.minAngle
  commentId: P:Global.Socket.minAngle
  id: minAngle
  parent: Global.Socket
  langs:
  - csharp
  - vb
  name: minAngle
  nameWithType: Socket.minAngle
  fullName: Socket.minAngle
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Joints/Socket.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: minAngle
    path: ../Assets/Framework/Physics/Joints/Socket.cs
    startLine: 6
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public float minAngle { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property minAngle As Single
  overload: Global.Socket.minAngle*
- uid: Global.Socket.maxAngle
  commentId: P:Global.Socket.maxAngle
  id: maxAngle
  parent: Global.Socket
  langs:
  - csharp
  - vb
  name: maxAngle
  nameWithType: Socket.maxAngle
  fullName: Socket.maxAngle
  type: Property
  source:
    remote:
      path: Assets/Framework/Physics/Joints/Socket.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: maxAngle
    path: ../Assets/Framework/Physics/Joints/Socket.cs
    startLine: 7
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public float maxAngle { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property maxAngle As Single
  overload: Global.Socket.maxAngle*
- uid: Global.Socket.OnHitMinAngle
  commentId: F:Global.Socket.OnHitMinAngle
  id: OnHitMinAngle
  parent: Global.Socket
  langs:
  - csharp
  - vb
  name: OnHitMinAngle
  nameWithType: Socket.OnHitMinAngle
  fullName: Socket.OnHitMinAngle
  type: Field
  source:
    remote:
      path: Assets/Framework/Physics/Joints/Socket.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnHitMinAngle
    path: ../Assets/Framework/Physics/Joints/Socket.cs
    startLine: 10
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public Socket.ConstraintCallback OnHitMinAngle
    return:
      type: Global.Socket.ConstraintCallback
    content.vb: Public OnHitMinAngle As Socket.ConstraintCallback
- uid: Global.Socket.OnHitMaxAngle
  commentId: F:Global.Socket.OnHitMaxAngle
  id: OnHitMaxAngle
  parent: Global.Socket
  langs:
  - csharp
  - vb
  name: OnHitMaxAngle
  nameWithType: Socket.OnHitMaxAngle
  fullName: Socket.OnHitMaxAngle
  type: Field
  source:
    remote:
      path: Assets/Framework/Physics/Joints/Socket.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: OnHitMaxAngle
    path: ../Assets/Framework/Physics/Joints/Socket.cs
    startLine: 10
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public Socket.ConstraintCallback OnHitMaxAngle
    return:
      type: Global.Socket.ConstraintCallback
    content.vb: Public OnHitMaxAngle As Socket.ConstraintCallback
- uid: Global.Socket.ResetSocket
  commentId: M:Global.Socket.ResetSocket
  id: ResetSocket
  parent: Global.Socket
  langs:
  - csharp
  - vb
  name: ResetSocket()
  nameWithType: Socket.ResetSocket()
  fullName: Socket.ResetSocket()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Joints/Socket.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ResetSocket
    path: ../Assets/Framework/Physics/Joints/Socket.cs
    startLine: 30
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void ResetSocket()
    content.vb: Public Sub ResetSocket()
  overload: Global.Socket.ResetSocket*
- uid: Global.Socket.RotateConstrained(System.Single)
  commentId: M:Global.Socket.RotateConstrained(System.Single)
  id: RotateConstrained(System.Single)
  parent: Global.Socket
  langs:
  - csharp
  - vb
  name: RotateConstrained(float)
  nameWithType: Socket.RotateConstrained(float)
  fullName: Socket.RotateConstrained(float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Joints/Socket.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: RotateConstrained
    path: ../Assets/Framework/Physics/Joints/Socket.cs
    startLine: 35
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void RotateConstrained(float amount)
    parameters:
    - id: amount
      type: System.Single
    content.vb: Public Sub RotateConstrained(amount As Single)
  overload: Global.Socket.RotateConstrained*
  nameWithType.vb: Socket.RotateConstrained(Single)
  fullName.vb: Socket.RotateConstrained(Single)
  name.vb: RotateConstrained(Single)
- uid: Global.Socket.GetCurrentAngle
  commentId: M:Global.Socket.GetCurrentAngle
  id: GetCurrentAngle
  parent: Global.Socket
  langs:
  - csharp
  - vb
  name: GetCurrentAngle()
  nameWithType: Socket.GetCurrentAngle()
  fullName: Socket.GetCurrentAngle()
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Joints/Socket.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetCurrentAngle
    path: ../Assets/Framework/Physics/Joints/Socket.cs
    startLine: 41
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public float GetCurrentAngle()
    return:
      type: System.Single
    content.vb: Public Function GetCurrentAngle() As Single
  overload: Global.Socket.GetCurrentAngle*
- uid: Global.Socket.SetConstrainedSocketRotation(System.Single)
  commentId: M:Global.Socket.SetConstrainedSocketRotation(System.Single)
  id: SetConstrainedSocketRotation(System.Single)
  parent: Global.Socket
  langs:
  - csharp
  - vb
  name: SetConstrainedSocketRotation(float)
  nameWithType: Socket.SetConstrainedSocketRotation(float)
  fullName: Socket.SetConstrainedSocketRotation(float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Joints/Socket.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: SetConstrainedSocketRotation
    path: ../Assets/Framework/Physics/Joints/Socket.cs
    startLine: 46
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void SetConstrainedSocketRotation(float angle)
    parameters:
    - id: angle
      type: System.Single
    content.vb: Public Sub SetConstrainedSocketRotation(angle As Single)
  overload: Global.Socket.SetConstrainedSocketRotation*
  nameWithType.vb: Socket.SetConstrainedSocketRotation(Single)
  fullName.vb: Socket.SetConstrainedSocketRotation(Single)
  name.vb: SetConstrainedSocketRotation(Single)
- uid: Global.Socket.GetConstrainedAngle(System.Single,System.Single,System.Single)
  commentId: M:Global.Socket.GetConstrainedAngle(System.Single,System.Single,System.Single)
  id: GetConstrainedAngle(System.Single,System.Single,System.Single)
  parent: Global.Socket
  langs:
  - csharp
  - vb
  name: GetConstrainedAngle(float, float, float)
  nameWithType: Socket.GetConstrainedAngle(float, float, float)
  fullName: Socket.GetConstrainedAngle(float, float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Joints/Socket.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetConstrainedAngle
    path: ../Assets/Framework/Physics/Joints/Socket.cs
    startLine: 59
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nGet the computed angle after applying constraints. All in degrees\n"
  example: []
  syntax:
    content: public float GetConstrainedAngle(float angle, float start, float end)
    parameters:
    - id: angle
      type: System.Single
      description: Any given angle
    - id: start
      type: System.Single
      description: Any angle in [0,360)
    - id: end
      type: System.Single
      description: Any angle in [0,360)
    return:
      type: System.Single
      description: ''
    content.vb: Public Function GetConstrainedAngle(angle As Single, start As Single, [end] As Single) As Single
  overload: Global.Socket.GetConstrainedAngle*
  nameWithType.vb: Socket.GetConstrainedAngle(Single, Single, Single)
  fullName.vb: Socket.GetConstrainedAngle(Single, Single, Single)
  name.vb: GetConstrainedAngle(Single, Single, Single)
- uid: Global.Socket.GetMinAngleBetween(System.Single,System.Single)
  commentId: M:Global.Socket.GetMinAngleBetween(System.Single,System.Single)
  id: GetMinAngleBetween(System.Single,System.Single)
  parent: Global.Socket
  langs:
  - csharp
  - vb
  name: GetMinAngleBetween(float, float)
  nameWithType: Socket.GetMinAngleBetween(float, float)
  fullName: Socket.GetMinAngleBetween(float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Joints/Socket.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetMinAngleBetween
    path: ../Assets/Framework/Physics/Joints/Socket.cs
    startLine: 97
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nReturn the smaller of the angles between the two\n"
  example: []
  syntax:
    content: public float GetMinAngleBetween(float angleA, float angleB)
    parameters:
    - id: angleA
      type: System.Single
      description: Must be int [0,360)
    - id: angleB
      type: System.Single
      description: Must be int [0,360)
    return:
      type: System.Single
      description: ''
    content.vb: Public Function GetMinAngleBetween(angleA As Single, angleB As Single) As Single
  overload: Global.Socket.GetMinAngleBetween*
  nameWithType.vb: Socket.GetMinAngleBetween(Single, Single)
  fullName.vb: Socket.GetMinAngleBetween(Single, Single)
  name.vb: GetMinAngleBetween(Single, Single)
- uid: Global.Socket.GetNearestAngle(System.Single,System.Single,System.Single)
  commentId: M:Global.Socket.GetNearestAngle(System.Single,System.Single,System.Single)
  id: GetNearestAngle(System.Single,System.Single,System.Single)
  parent: Global.Socket
  langs:
  - csharp
  - vb
  name: GetNearestAngle(float, float, float)
  nameWithType: Socket.GetNearestAngle(float, float, float)
  fullName: Socket.GetNearestAngle(float, float, float)
  type: Method
  source:
    remote:
      path: Assets/Framework/Physics/Joints/Socket.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GetNearestAngle
    path: ../Assets/Framework/Physics/Joints/Socket.cs
    startLine: 110
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nReturn the angle closest to [angle], given [a] and [b]\n"
  example: []
  syntax:
    content: public float GetNearestAngle(float angle, float a, float b)
    parameters:
    - id: angle
      type: System.Single
      description: ''
    - id: a
      type: System.Single
      description: ''
    - id: b
      type: System.Single
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: Public Function GetNearestAngle(angle As Single, a As Single, b As Single) As Single
  overload: Global.Socket.GetNearestAngle*
  nameWithType.vb: Socket.GetNearestAngle(Single, Single, Single)
  fullName.vb: Socket.GetNearestAngle(Single, Single, Single)
  name.vb: GetNearestAngle(Single, Single, Single)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.Component
  commentId: T:UnityEngine.Component
  parent: UnityEngine
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: UnityEngine.Component
- uid: UnityEngine.Behaviour
  commentId: T:UnityEngine.Behaviour
  parent: UnityEngine
  isExternal: true
  name: Behaviour
  nameWithType: Behaviour
  fullName: UnityEngine.Behaviour
- uid: UnityEngine.MonoBehaviour
  commentId: T:UnityEngine.MonoBehaviour
  parent: UnityEngine
  isExternal: true
  name: MonoBehaviour
  nameWithType: MonoBehaviour
  fullName: UnityEngine.MonoBehaviour
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.Socket.minAngle*
  commentId: Overload:Global.Socket.minAngle
  name: minAngle
  nameWithType: Socket.minAngle
  fullName: Socket.minAngle
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.Socket.maxAngle*
  commentId: Overload:Global.Socket.maxAngle
  name: maxAngle
  nameWithType: Socket.maxAngle
  fullName: Socket.maxAngle
- uid: Global.Socket.ConstraintCallback
  commentId: T:Global.Socket.ConstraintCallback
  name: Socket.ConstraintCallback
  nameWithType: Socket.ConstraintCallback
  fullName: Socket.ConstraintCallback
  spec.csharp:
  - uid: Global.Socket
    name: Socket
  - name: .
  - uid: Global.Socket.ConstraintCallback
    name: ConstraintCallback
  spec.vb:
  - uid: Global.Socket
    name: Socket
  - name: .
  - uid: Global.Socket.ConstraintCallback
    name: ConstraintCallback
- uid: Global.Socket.ResetSocket*
  commentId: Overload:Global.Socket.ResetSocket
  name: ResetSocket
  nameWithType: Socket.ResetSocket
  fullName: Socket.ResetSocket
- uid: Global.Socket.RotateConstrained*
  commentId: Overload:Global.Socket.RotateConstrained
  name: RotateConstrained
  nameWithType: Socket.RotateConstrained
  fullName: Socket.RotateConstrained
- uid: Global.Socket.GetCurrentAngle*
  commentId: Overload:Global.Socket.GetCurrentAngle
  name: GetCurrentAngle
  nameWithType: Socket.GetCurrentAngle
  fullName: Socket.GetCurrentAngle
- uid: Global.Socket.SetConstrainedSocketRotation*
  commentId: Overload:Global.Socket.SetConstrainedSocketRotation
  name: SetConstrainedSocketRotation
  nameWithType: Socket.SetConstrainedSocketRotation
  fullName: Socket.SetConstrainedSocketRotation
- uid: Global.Socket.GetConstrainedAngle*
  commentId: Overload:Global.Socket.GetConstrainedAngle
  name: GetConstrainedAngle
  nameWithType: Socket.GetConstrainedAngle
  fullName: Socket.GetConstrainedAngle
- uid: Global.Socket.GetMinAngleBetween*
  commentId: Overload:Global.Socket.GetMinAngleBetween
  name: GetMinAngleBetween
  nameWithType: Socket.GetMinAngleBetween
  fullName: Socket.GetMinAngleBetween
- uid: Global.Socket.GetNearestAngle*
  commentId: Overload:Global.Socket.GetNearestAngle
  name: GetNearestAngle
  nameWithType: Socket.GetNearestAngle
  fullName: Socket.GetNearestAngle
