### YamlMime:ManagedReference
items:
- uid: Global.FlyingMovementController
  commentId: T:Global.FlyingMovementController
  id: FlyingMovementController
  parent: Global
  children:
  - Global.FlyingMovementController.Charge(UnityEngine.Vector2,System.Boolean)
  - Global.FlyingMovementController.DipCharge
  - Global.FlyingMovementController.GoTo(UnityEngine.Vector2)
  - Global.FlyingMovementController.Idle
  - Global.FlyingMovementController.Initialize(IntEnemy)
  - Global.FlyingMovementController.Move(UnityEngine.Vector2)
  - Global.FlyingMovementController.Reset
  - Global.FlyingMovementController.Swoop(UnityEngine.Vector2)
  - Global.FlyingMovementController.Update
  langs:
  - csharp
  - vb
  name: FlyingMovementController
  nameWithType: FlyingMovementController
  fullName: FlyingMovementController
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: FlyingMovementController
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
    startLine: 14
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Serializable]

      public class FlyingMovementController : EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>
    content.vb: >-
      <Serializable>

      Public Class FlyingMovementController Inherits EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState)
  inheritance:
  - System.Object
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  inheritedMembers:
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.MovementProperties
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Enemy
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.osm
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.CollideX
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.CollideY
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OverlapActor
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OverlapTrigger
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.StartCharge
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.EndCharge
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.CurrentState
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Initialize(IntEnemy)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetTimeInState
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Update
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Reset
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterForStateEnter(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterForStateEnter(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterForStateExit(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterForStateExit(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterCollideXCallback(IntObject.SolidAction)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterCollideXCallback(IntObject.SolidAction)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterCollideYCallback(IntObject.SolidAction)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterCollideYCallback(IntObject.SolidAction)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterOverlapActorCallback(IntObject.ActorAction)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterOverlapActorCallback(IntObject.ActorAction)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetCollideXCallback
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetCollideYCallback
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetOverlapActorCallback
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetOverlapTriggerCallback
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnCollideX(IntSolid)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnCollideY(IntSolid)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnOverlapActor(IntActor)
  - Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnOverlapTrigger(IntTrigger)
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
- uid: Global.FlyingMovementController.Initialize(IntEnemy)
  commentId: M:Global.FlyingMovementController.Initialize(IntEnemy)
  id: Initialize(IntEnemy)
  parent: Global.FlyingMovementController
  langs:
  - csharp
  - vb
  name: Initialize(IntEnemy)
  nameWithType: FlyingMovementController.Initialize(IntEnemy)
  fullName: FlyingMovementController.Initialize(IntEnemy)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Initialize
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
    startLine: 45
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void Initialize(IntEnemy enemy)
    parameters:
    - id: enemy
      type: Global.IntEnemy
    content.vb: Public Overrides Sub Initialize(enemy As IntEnemy)
  overridden: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Initialize(IntEnemy)
  overload: Global.FlyingMovementController.Initialize*
- uid: Global.FlyingMovementController.Idle
  commentId: M:Global.FlyingMovementController.Idle
  id: Idle
  parent: Global.FlyingMovementController
  langs:
  - csharp
  - vb
  name: Idle()
  nameWithType: FlyingMovementController.Idle()
  fullName: FlyingMovementController.Idle()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Idle
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
    startLine: 69
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void Idle()
    content.vb: Public Sub Idle()
  overload: Global.FlyingMovementController.Idle*
- uid: Global.FlyingMovementController.Move(UnityEngine.Vector2)
  commentId: M:Global.FlyingMovementController.Move(UnityEngine.Vector2)
  id: Move(UnityEngine.Vector2)
  parent: Global.FlyingMovementController
  langs:
  - csharp
  - vb
  name: Move(Vector2)
  nameWithType: FlyingMovementController.Move(Vector2)
  fullName: FlyingMovementController.Move(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Move
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
    startLine: 74
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void Move(Vector2 desired_velocity)
    parameters:
    - id: desired_velocity
      type: UnityEngine.Vector2
    content.vb: Public Sub Move(desired_velocity As Vector2)
  overload: Global.FlyingMovementController.Move*
- uid: Global.FlyingMovementController.GoTo(UnityEngine.Vector2)
  commentId: M:Global.FlyingMovementController.GoTo(UnityEngine.Vector2)
  id: GoTo(UnityEngine.Vector2)
  parent: Global.FlyingMovementController
  langs:
  - csharp
  - vb
  name: GoTo(Vector2)
  nameWithType: FlyingMovementController.GoTo(Vector2)
  fullName: FlyingMovementController.GoTo(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: GoTo
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
    startLine: 87
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void GoTo(Vector2 location)
    parameters:
    - id: location
      type: UnityEngine.Vector2
    content.vb: Public Sub [GoTo](location As Vector2)
  overload: Global.FlyingMovementController.GoTo*
- uid: Global.FlyingMovementController.DipCharge
  commentId: M:Global.FlyingMovementController.DipCharge
  id: DipCharge
  parent: Global.FlyingMovementController
  langs:
  - csharp
  - vb
  name: DipCharge()
  nameWithType: FlyingMovementController.DipCharge()
  fullName: FlyingMovementController.DipCharge()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: DipCharge
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
    startLine: 109
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void DipCharge()
    content.vb: Public Sub DipCharge()
  overload: Global.FlyingMovementController.DipCharge*
- uid: Global.FlyingMovementController.Swoop(UnityEngine.Vector2)
  commentId: M:Global.FlyingMovementController.Swoop(UnityEngine.Vector2)
  id: Swoop(UnityEngine.Vector2)
  parent: Global.FlyingMovementController
  langs:
  - csharp
  - vb
  name: Swoop(Vector2)
  nameWithType: FlyingMovementController.Swoop(Vector2)
  fullName: FlyingMovementController.Swoop(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Swoop
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
    startLine: 115
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void Swoop(Vector2 target)
    parameters:
    - id: target
      type: UnityEngine.Vector2
    content.vb: Public Sub Swoop(target As Vector2)
  overload: Global.FlyingMovementController.Swoop*
- uid: Global.FlyingMovementController.Charge(UnityEngine.Vector2,System.Boolean)
  commentId: M:Global.FlyingMovementController.Charge(UnityEngine.Vector2,System.Boolean)
  id: Charge(UnityEngine.Vector2,System.Boolean)
  parent: Global.FlyingMovementController
  langs:
  - csharp
  - vb
  name: Charge(Vector2, bool)
  nameWithType: FlyingMovementController.Charge(Vector2, bool)
  fullName: FlyingMovementController.Charge(UnityEngine.Vector2, bool)
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Charge
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
    startLine: 127
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public void Charge(Vector2 direction, bool canFly = true)
    parameters:
    - id: direction
      type: UnityEngine.Vector2
    - id: canFly
      type: System.Boolean
    content.vb: Public Sub Charge(direction As Vector2, canFly As Boolean = True)
  overload: Global.FlyingMovementController.Charge*
  nameWithType.vb: FlyingMovementController.Charge(Vector2, Boolean)
  fullName.vb: FlyingMovementController.Charge(UnityEngine.Vector2, Boolean)
  name.vb: Charge(Vector2, Boolean)
- uid: Global.FlyingMovementController.Update
  commentId: M:Global.FlyingMovementController.Update
  id: Update
  parent: Global.FlyingMovementController
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: FlyingMovementController.Update()
  fullName: FlyingMovementController.Update()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Update
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
    startLine: 146
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void Update()
    content.vb: Public Overrides Sub Update()
  overridden: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Update
  overload: Global.FlyingMovementController.Update*
- uid: Global.FlyingMovementController.Reset
  commentId: M:Global.FlyingMovementController.Reset
  id: Reset
  parent: Global.FlyingMovementController
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: FlyingMovementController.Reset()
  fullName: FlyingMovementController.Reset()
  type: Method
  source:
    remote:
      path: Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: Reset
    path: ../Assets/Objects & Components/Entities/Enemies/Modular/Modules/Movement/FlyingMovementController.cs
    startLine: 171
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public override void Reset()
    content.vb: Public Overrides Sub Reset()
  overridden: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Reset
  overload: Global.FlyingMovementController.Reset*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  commentId: T:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2
  name: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState)
  name.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState)
  spec.csharp:
  - uid: Global.EnemyMovementController`2
    name: EnemyMovementController
  - name: <
  - uid: Global.FlyingMovementProperties
    name: FlyingMovementProperties
  - name: ','
  - name: " "
  - uid: Global.FlyingMovementController
    name: FlyingMovementController
  - name: .
  - uid: Global.FlyingMovementController.FlyingMovementState
    name: FlyingMovementState
  - name: '>'
  spec.vb:
  - uid: Global.EnemyMovementController`2
    name: EnemyMovementController
  - name: (
  - name: Of
  - name: " "
  - uid: Global.FlyingMovementProperties
    name: FlyingMovementProperties
  - name: ','
  - name: " "
  - uid: Global.FlyingMovementController
    name: FlyingMovementController
  - name: .
  - uid: Global.FlyingMovementController.FlyingMovementState
    name: FlyingMovementState
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.MovementProperties
  commentId: F:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.MovementProperties
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.MovementProperties
  name: MovementProperties
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.MovementProperties
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.MovementProperties
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).MovementProperties
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).MovementProperties
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Enemy
  commentId: F:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Enemy
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.Enemy
  name: Enemy
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.Enemy
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.Enemy
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).Enemy
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).Enemy
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.osm
  commentId: F:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.osm
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.osm
  name: osm
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.osm
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.osm
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).osm
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).osm
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.CollideX
  commentId: F:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.CollideX
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.CollideX
  name: CollideX
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.CollideX
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.CollideX
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).CollideX
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).CollideX
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.CollideY
  commentId: F:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.CollideY
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.CollideY
  name: CollideY
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.CollideY
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.CollideY
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).CollideY
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).CollideY
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OverlapActor
  commentId: F:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OverlapActor
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.OverlapActor
  name: OverlapActor
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.OverlapActor
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.OverlapActor
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).OverlapActor
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).OverlapActor
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OverlapTrigger
  commentId: F:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OverlapTrigger
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.OverlapTrigger
  name: OverlapTrigger
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.OverlapTrigger
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.OverlapTrigger
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).OverlapTrigger
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).OverlapTrigger
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.StartCharge
  commentId: F:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.StartCharge
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.StartCharge
  name: StartCharge
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.StartCharge
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.StartCharge
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).StartCharge
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).StartCharge
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.EndCharge
  commentId: F:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.EndCharge
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.EndCharge
  name: EndCharge
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.EndCharge
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.EndCharge
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).EndCharge
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).EndCharge
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.CurrentState
  commentId: P:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.CurrentState
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.CurrentState
  name: CurrentState
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.CurrentState
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.CurrentState
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).CurrentState
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).CurrentState
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Initialize(IntEnemy)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Initialize(IntEnemy)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.Initialize(IntEnemy)
  name: Initialize(IntEnemy)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.Initialize(IntEnemy)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.Initialize(IntEnemy)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).Initialize(IntEnemy)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).Initialize(IntEnemy)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Initialize(IntEnemy)
    name: Initialize
  - name: (
  - uid: Global.IntEnemy
    name: IntEnemy
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Initialize(IntEnemy)
    name: Initialize
  - name: (
  - uid: Global.IntEnemy
    name: IntEnemy
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetTimeInState
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetTimeInState
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.GetTimeInState
  name: GetTimeInState()
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.GetTimeInState()
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.GetTimeInState()
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).GetTimeInState()
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).GetTimeInState()
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetTimeInState
    name: GetTimeInState
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetTimeInState
    name: GetTimeInState
  - name: (
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Update
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Update
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.Update
  name: Update()
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.Update()
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.Update()
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).Update()
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).Update()
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Update
    name: Update
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Update
    name: Update
  - name: (
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Reset
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Reset
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.Reset
  name: Reset()
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.Reset()
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.Reset()
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).Reset()
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).Reset()
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Reset
    name: Reset
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.Reset
    name: Reset
  - name: (
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterForStateEnter(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterForStateEnter(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.RegisterForStateEnter(`1,OptionStateMachine{`1}.TransitionAction)
  name: RegisterForStateEnter(FlyingMovementState, TransitionAction)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.RegisterForStateEnter(FlyingMovementController.FlyingMovementState, OptionStateMachine<FlyingMovementController.FlyingMovementState>.TransitionAction)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.RegisterForStateEnter(FlyingMovementController.FlyingMovementState, OptionStateMachine<FlyingMovementController.FlyingMovementState>.TransitionAction)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).RegisterForStateEnter(FlyingMovementController.FlyingMovementState, OptionStateMachine(Of FlyingMovementController.FlyingMovementState).TransitionAction)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).RegisterForStateEnter(FlyingMovementController.FlyingMovementState, OptionStateMachine(Of FlyingMovementController.FlyingMovementState).TransitionAction)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterForStateEnter(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
    name: RegisterForStateEnter
  - name: (
  - uid: Global.FlyingMovementController.FlyingMovementState
    name: FlyingMovementState
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction
    name: TransitionAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterForStateEnter(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
    name: RegisterForStateEnter
  - name: (
  - uid: Global.FlyingMovementController.FlyingMovementState
    name: FlyingMovementState
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction
    name: TransitionAction
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterForStateEnter(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterForStateEnter(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.UnregisterForStateEnter(`1,OptionStateMachine{`1}.TransitionAction)
  name: UnregisterForStateEnter(FlyingMovementState, TransitionAction)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.UnregisterForStateEnter(FlyingMovementController.FlyingMovementState, OptionStateMachine<FlyingMovementController.FlyingMovementState>.TransitionAction)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.UnregisterForStateEnter(FlyingMovementController.FlyingMovementState, OptionStateMachine<FlyingMovementController.FlyingMovementState>.TransitionAction)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).UnregisterForStateEnter(FlyingMovementController.FlyingMovementState, OptionStateMachine(Of FlyingMovementController.FlyingMovementState).TransitionAction)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).UnregisterForStateEnter(FlyingMovementController.FlyingMovementState, OptionStateMachine(Of FlyingMovementController.FlyingMovementState).TransitionAction)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterForStateEnter(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
    name: UnregisterForStateEnter
  - name: (
  - uid: Global.FlyingMovementController.FlyingMovementState
    name: FlyingMovementState
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction
    name: TransitionAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterForStateEnter(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
    name: UnregisterForStateEnter
  - name: (
  - uid: Global.FlyingMovementController.FlyingMovementState
    name: FlyingMovementState
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction
    name: TransitionAction
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterForStateExit(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterForStateExit(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.RegisterForStateExit(`1,OptionStateMachine{`1}.TransitionAction)
  name: RegisterForStateExit(FlyingMovementState, TransitionAction)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.RegisterForStateExit(FlyingMovementController.FlyingMovementState, OptionStateMachine<FlyingMovementController.FlyingMovementState>.TransitionAction)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.RegisterForStateExit(FlyingMovementController.FlyingMovementState, OptionStateMachine<FlyingMovementController.FlyingMovementState>.TransitionAction)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).RegisterForStateExit(FlyingMovementController.FlyingMovementState, OptionStateMachine(Of FlyingMovementController.FlyingMovementState).TransitionAction)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).RegisterForStateExit(FlyingMovementController.FlyingMovementState, OptionStateMachine(Of FlyingMovementController.FlyingMovementState).TransitionAction)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterForStateExit(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
    name: RegisterForStateExit
  - name: (
  - uid: Global.FlyingMovementController.FlyingMovementState
    name: FlyingMovementState
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction
    name: TransitionAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterForStateExit(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
    name: RegisterForStateExit
  - name: (
  - uid: Global.FlyingMovementController.FlyingMovementState
    name: FlyingMovementState
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction
    name: TransitionAction
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterForStateExit(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterForStateExit(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.UnregisterForStateExit(`1,OptionStateMachine{`1}.TransitionAction)
  name: UnregisterForStateExit(FlyingMovementState, TransitionAction)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.UnregisterForStateExit(FlyingMovementController.FlyingMovementState, OptionStateMachine<FlyingMovementController.FlyingMovementState>.TransitionAction)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.UnregisterForStateExit(FlyingMovementController.FlyingMovementState, OptionStateMachine<FlyingMovementController.FlyingMovementState>.TransitionAction)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).UnregisterForStateExit(FlyingMovementController.FlyingMovementState, OptionStateMachine(Of FlyingMovementController.FlyingMovementState).TransitionAction)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).UnregisterForStateExit(FlyingMovementController.FlyingMovementState, OptionStateMachine(Of FlyingMovementController.FlyingMovementState).TransitionAction)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterForStateExit(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
    name: UnregisterForStateExit
  - name: (
  - uid: Global.FlyingMovementController.FlyingMovementState
    name: FlyingMovementState
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction
    name: TransitionAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterForStateExit(FlyingMovementController.FlyingMovementState,OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction)
    name: UnregisterForStateExit
  - name: (
  - uid: Global.FlyingMovementController.FlyingMovementState
    name: FlyingMovementState
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{FlyingMovementController.FlyingMovementState}.TransitionAction
    name: TransitionAction
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterCollideXCallback(IntObject.SolidAction)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterCollideXCallback(IntObject.SolidAction)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.RegisterCollideXCallback(IntObject.SolidAction)
  name: RegisterCollideXCallback(SolidAction)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.RegisterCollideXCallback(IntObject.SolidAction)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.RegisterCollideXCallback(IntObject.SolidAction)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).RegisterCollideXCallback(IntObject.SolidAction)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).RegisterCollideXCallback(IntObject.SolidAction)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterCollideXCallback(IntObject.SolidAction)
    name: RegisterCollideXCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterCollideXCallback(IntObject.SolidAction)
    name: RegisterCollideXCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterCollideXCallback(IntObject.SolidAction)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterCollideXCallback(IntObject.SolidAction)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.UnregisterCollideXCallback(IntObject.SolidAction)
  name: UnregisterCollideXCallback(SolidAction)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.UnregisterCollideXCallback(IntObject.SolidAction)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.UnregisterCollideXCallback(IntObject.SolidAction)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).UnregisterCollideXCallback(IntObject.SolidAction)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).UnregisterCollideXCallback(IntObject.SolidAction)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterCollideXCallback(IntObject.SolidAction)
    name: UnregisterCollideXCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterCollideXCallback(IntObject.SolidAction)
    name: UnregisterCollideXCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterCollideYCallback(IntObject.SolidAction)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterCollideYCallback(IntObject.SolidAction)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.RegisterCollideYCallback(IntObject.SolidAction)
  name: RegisterCollideYCallback(SolidAction)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.RegisterCollideYCallback(IntObject.SolidAction)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.RegisterCollideYCallback(IntObject.SolidAction)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).RegisterCollideYCallback(IntObject.SolidAction)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).RegisterCollideYCallback(IntObject.SolidAction)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterCollideYCallback(IntObject.SolidAction)
    name: RegisterCollideYCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterCollideYCallback(IntObject.SolidAction)
    name: RegisterCollideYCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterCollideYCallback(IntObject.SolidAction)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterCollideYCallback(IntObject.SolidAction)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.UnregisterCollideYCallback(IntObject.SolidAction)
  name: UnregisterCollideYCallback(SolidAction)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.UnregisterCollideYCallback(IntObject.SolidAction)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.UnregisterCollideYCallback(IntObject.SolidAction)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).UnregisterCollideYCallback(IntObject.SolidAction)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).UnregisterCollideYCallback(IntObject.SolidAction)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterCollideYCallback(IntObject.SolidAction)
    name: UnregisterCollideYCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterCollideYCallback(IntObject.SolidAction)
    name: UnregisterCollideYCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterOverlapActorCallback(IntObject.ActorAction)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterOverlapActorCallback(IntObject.ActorAction)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.RegisterOverlapActorCallback(IntObject.ActorAction)
  name: RegisterOverlapActorCallback(ActorAction)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.RegisterOverlapActorCallback(IntObject.ActorAction)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.RegisterOverlapActorCallback(IntObject.ActorAction)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).RegisterOverlapActorCallback(IntObject.ActorAction)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).RegisterOverlapActorCallback(IntObject.ActorAction)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterOverlapActorCallback(IntObject.ActorAction)
    name: RegisterOverlapActorCallback
  - name: (
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterOverlapActorCallback(IntObject.ActorAction)
    name: RegisterOverlapActorCallback
  - name: (
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterOverlapActorCallback(IntObject.ActorAction)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterOverlapActorCallback(IntObject.ActorAction)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.UnregisterOverlapActorCallback(IntObject.ActorAction)
  name: UnregisterOverlapActorCallback(ActorAction)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.UnregisterOverlapActorCallback(IntObject.ActorAction)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.UnregisterOverlapActorCallback(IntObject.ActorAction)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).UnregisterOverlapActorCallback(IntObject.ActorAction)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).UnregisterOverlapActorCallback(IntObject.ActorAction)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterOverlapActorCallback(IntObject.ActorAction)
    name: UnregisterOverlapActorCallback
  - name: (
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterOverlapActorCallback(IntObject.ActorAction)
    name: UnregisterOverlapActorCallback
  - name: (
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  name: RegisterOverlapTriggerCallback(TriggerAction)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
    name: RegisterOverlapTriggerCallback
  - name: (
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
    name: RegisterOverlapTriggerCallback
  - name: (
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  name: UnregisterOverlapTriggerCallback(TriggerAction)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
    name: UnregisterOverlapTriggerCallback
  - name: (
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
    name: UnregisterOverlapTriggerCallback
  - name: (
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetCollideXCallback
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetCollideXCallback
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.GetCollideXCallback
  name: GetCollideXCallback()
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.GetCollideXCallback()
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.GetCollideXCallback()
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).GetCollideXCallback()
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).GetCollideXCallback()
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetCollideXCallback
    name: GetCollideXCallback
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetCollideXCallback
    name: GetCollideXCallback
  - name: (
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetCollideYCallback
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetCollideYCallback
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.GetCollideYCallback
  name: GetCollideYCallback()
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.GetCollideYCallback()
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.GetCollideYCallback()
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).GetCollideYCallback()
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).GetCollideYCallback()
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetCollideYCallback
    name: GetCollideYCallback
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetCollideYCallback
    name: GetCollideYCallback
  - name: (
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetOverlapActorCallback
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetOverlapActorCallback
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.GetOverlapActorCallback
  name: GetOverlapActorCallback()
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.GetOverlapActorCallback()
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.GetOverlapActorCallback()
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).GetOverlapActorCallback()
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).GetOverlapActorCallback()
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetOverlapActorCallback
    name: GetOverlapActorCallback
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetOverlapActorCallback
    name: GetOverlapActorCallback
  - name: (
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetOverlapTriggerCallback
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetOverlapTriggerCallback
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.GetOverlapTriggerCallback
  name: GetOverlapTriggerCallback()
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.GetOverlapTriggerCallback()
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.GetOverlapTriggerCallback()
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).GetOverlapTriggerCallback()
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).GetOverlapTriggerCallback()
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetOverlapTriggerCallback
    name: GetOverlapTriggerCallback
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.GetOverlapTriggerCallback
    name: GetOverlapTriggerCallback
  - name: (
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnCollideX(IntSolid)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnCollideX(IntSolid)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.OnCollideX(IntSolid)
  name: OnCollideX(IntSolid)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.OnCollideX(IntSolid)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.OnCollideX(IntSolid)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).OnCollideX(IntSolid)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).OnCollideX(IntSolid)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnCollideX(IntSolid)
    name: OnCollideX
  - name: (
  - uid: Global.IntSolid
    name: IntSolid
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnCollideX(IntSolid)
    name: OnCollideX
  - name: (
  - uid: Global.IntSolid
    name: IntSolid
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnCollideY(IntSolid)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnCollideY(IntSolid)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.OnCollideY(IntSolid)
  name: OnCollideY(IntSolid)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.OnCollideY(IntSolid)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.OnCollideY(IntSolid)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).OnCollideY(IntSolid)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).OnCollideY(IntSolid)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnCollideY(IntSolid)
    name: OnCollideY
  - name: (
  - uid: Global.IntSolid
    name: IntSolid
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnCollideY(IntSolid)
    name: OnCollideY
  - name: (
  - uid: Global.IntSolid
    name: IntSolid
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnOverlapActor(IntActor)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnOverlapActor(IntActor)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.OnOverlapActor(IntActor)
  name: OnOverlapActor(IntActor)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.OnOverlapActor(IntActor)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.OnOverlapActor(IntActor)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).OnOverlapActor(IntActor)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).OnOverlapActor(IntActor)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnOverlapActor(IntActor)
    name: OnOverlapActor
  - name: (
  - uid: Global.IntActor
    name: IntActor
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnOverlapActor(IntActor)
    name: OnOverlapActor
  - name: (
  - uid: Global.IntActor
    name: IntActor
  - name: )
- uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnOverlapTrigger(IntTrigger)
  commentId: M:Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnOverlapTrigger(IntTrigger)
  parent: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}
  definition: Global.EnemyMovementController`2.OnOverlapTrigger(IntTrigger)
  name: OnOverlapTrigger(IntTrigger)
  nameWithType: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.OnOverlapTrigger(IntTrigger)
  fullName: EnemyMovementController<FlyingMovementProperties, FlyingMovementController.FlyingMovementState>.OnOverlapTrigger(IntTrigger)
  nameWithType.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).OnOverlapTrigger(IntTrigger)
  fullName.vb: EnemyMovementController(Of FlyingMovementProperties, FlyingMovementController.FlyingMovementState).OnOverlapTrigger(IntTrigger)
  spec.csharp:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnOverlapTrigger(IntTrigger)
    name: OnOverlapTrigger
  - name: (
  - uid: Global.IntTrigger
    name: IntTrigger
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController{FlyingMovementProperties,FlyingMovementController.FlyingMovementState}.OnOverlapTrigger(IntTrigger)
    name: OnOverlapTrigger
  - name: (
  - uid: Global.IntTrigger
    name: IntTrigger
  - name: )
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.EnemyMovementController`2
  commentId: T:Global.EnemyMovementController`2
  name: EnemyMovementController<T, U>
  nameWithType: EnemyMovementController<T, U>
  fullName: EnemyMovementController<T, U>
  nameWithType.vb: EnemyMovementController(Of T, U)
  fullName.vb: EnemyMovementController(Of T, U)
  name.vb: EnemyMovementController(Of T, U)
  spec.csharp:
  - uid: Global.EnemyMovementController`2
    name: EnemyMovementController
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: U
  - name: '>'
  spec.vb:
  - uid: Global.EnemyMovementController`2
    name: EnemyMovementController
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: U
  - name: )
- uid: Global.EnemyMovementController`2.MovementProperties
  commentId: F:Global.EnemyMovementController`2.MovementProperties
  name: MovementProperties
  nameWithType: EnemyMovementController<T, U>.MovementProperties
  fullName: EnemyMovementController<T, U>.MovementProperties
  nameWithType.vb: EnemyMovementController(Of T, U).MovementProperties
  fullName.vb: EnemyMovementController(Of T, U).MovementProperties
- uid: Global.EnemyMovementController`2.Enemy
  commentId: F:Global.EnemyMovementController`2.Enemy
  name: Enemy
  nameWithType: EnemyMovementController<T, U>.Enemy
  fullName: EnemyMovementController<T, U>.Enemy
  nameWithType.vb: EnemyMovementController(Of T, U).Enemy
  fullName.vb: EnemyMovementController(Of T, U).Enemy
- uid: Global.EnemyMovementController`2.osm
  commentId: F:Global.EnemyMovementController`2.osm
  name: osm
  nameWithType: EnemyMovementController<T, U>.osm
  fullName: EnemyMovementController<T, U>.osm
  nameWithType.vb: EnemyMovementController(Of T, U).osm
  fullName.vb: EnemyMovementController(Of T, U).osm
- uid: Global.EnemyMovementController`2.CollideX
  commentId: F:Global.EnemyMovementController`2.CollideX
  name: CollideX
  nameWithType: EnemyMovementController<T, U>.CollideX
  fullName: EnemyMovementController<T, U>.CollideX
  nameWithType.vb: EnemyMovementController(Of T, U).CollideX
  fullName.vb: EnemyMovementController(Of T, U).CollideX
- uid: Global.EnemyMovementController`2.CollideY
  commentId: F:Global.EnemyMovementController`2.CollideY
  name: CollideY
  nameWithType: EnemyMovementController<T, U>.CollideY
  fullName: EnemyMovementController<T, U>.CollideY
  nameWithType.vb: EnemyMovementController(Of T, U).CollideY
  fullName.vb: EnemyMovementController(Of T, U).CollideY
- uid: Global.EnemyMovementController`2.OverlapActor
  commentId: F:Global.EnemyMovementController`2.OverlapActor
  name: OverlapActor
  nameWithType: EnemyMovementController<T, U>.OverlapActor
  fullName: EnemyMovementController<T, U>.OverlapActor
  nameWithType.vb: EnemyMovementController(Of T, U).OverlapActor
  fullName.vb: EnemyMovementController(Of T, U).OverlapActor
- uid: Global.EnemyMovementController`2.OverlapTrigger
  commentId: F:Global.EnemyMovementController`2.OverlapTrigger
  name: OverlapTrigger
  nameWithType: EnemyMovementController<T, U>.OverlapTrigger
  fullName: EnemyMovementController<T, U>.OverlapTrigger
  nameWithType.vb: EnemyMovementController(Of T, U).OverlapTrigger
  fullName.vb: EnemyMovementController(Of T, U).OverlapTrigger
- uid: Global.EnemyMovementController`2.StartCharge
  commentId: F:Global.EnemyMovementController`2.StartCharge
  name: StartCharge
  nameWithType: EnemyMovementController<T, U>.StartCharge
  fullName: EnemyMovementController<T, U>.StartCharge
  nameWithType.vb: EnemyMovementController(Of T, U).StartCharge
  fullName.vb: EnemyMovementController(Of T, U).StartCharge
- uid: Global.EnemyMovementController`2.EndCharge
  commentId: F:Global.EnemyMovementController`2.EndCharge
  name: EndCharge
  nameWithType: EnemyMovementController<T, U>.EndCharge
  fullName: EnemyMovementController<T, U>.EndCharge
  nameWithType.vb: EnemyMovementController(Of T, U).EndCharge
  fullName.vb: EnemyMovementController(Of T, U).EndCharge
- uid: Global.EnemyMovementController`2.CurrentState
  commentId: P:Global.EnemyMovementController`2.CurrentState
  name: CurrentState
  nameWithType: EnemyMovementController<T, U>.CurrentState
  fullName: EnemyMovementController<T, U>.CurrentState
  nameWithType.vb: EnemyMovementController(Of T, U).CurrentState
  fullName.vb: EnemyMovementController(Of T, U).CurrentState
- uid: Global.EnemyMovementController`2.Initialize(IntEnemy)
  commentId: M:Global.EnemyMovementController`2.Initialize(IntEnemy)
  name: Initialize(IntEnemy)
  nameWithType: EnemyMovementController<T, U>.Initialize(IntEnemy)
  fullName: EnemyMovementController<T, U>.Initialize(IntEnemy)
  nameWithType.vb: EnemyMovementController(Of T, U).Initialize(IntEnemy)
  fullName.vb: EnemyMovementController(Of T, U).Initialize(IntEnemy)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.Initialize(IntEnemy)
    name: Initialize
  - name: (
  - uid: Global.IntEnemy
    name: IntEnemy
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.Initialize(IntEnemy)
    name: Initialize
  - name: (
  - uid: Global.IntEnemy
    name: IntEnemy
  - name: )
- uid: Global.EnemyMovementController`2.GetTimeInState
  commentId: M:Global.EnemyMovementController`2.GetTimeInState
  name: GetTimeInState()
  nameWithType: EnemyMovementController<T, U>.GetTimeInState()
  fullName: EnemyMovementController<T, U>.GetTimeInState()
  nameWithType.vb: EnemyMovementController(Of T, U).GetTimeInState()
  fullName.vb: EnemyMovementController(Of T, U).GetTimeInState()
  spec.csharp:
  - uid: Global.EnemyMovementController`2.GetTimeInState
    name: GetTimeInState
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.GetTimeInState
    name: GetTimeInState
  - name: (
  - name: )
- uid: Global.EnemyMovementController`2.Update
  commentId: M:Global.EnemyMovementController`2.Update
  name: Update()
  nameWithType: EnemyMovementController<T, U>.Update()
  fullName: EnemyMovementController<T, U>.Update()
  nameWithType.vb: EnemyMovementController(Of T, U).Update()
  fullName.vb: EnemyMovementController(Of T, U).Update()
  spec.csharp:
  - uid: Global.EnemyMovementController`2.Update
    name: Update
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.Update
    name: Update
  - name: (
  - name: )
- uid: Global.EnemyMovementController`2.Reset
  commentId: M:Global.EnemyMovementController`2.Reset
  name: Reset()
  nameWithType: EnemyMovementController<T, U>.Reset()
  fullName: EnemyMovementController<T, U>.Reset()
  nameWithType.vb: EnemyMovementController(Of T, U).Reset()
  fullName.vb: EnemyMovementController(Of T, U).Reset()
  spec.csharp:
  - uid: Global.EnemyMovementController`2.Reset
    name: Reset
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.Reset
    name: Reset
  - name: (
  - name: )
- uid: Global.EnemyMovementController`2.RegisterForStateEnter(`1,OptionStateMachine{`1}.TransitionAction)
  commentId: M:Global.EnemyMovementController`2.RegisterForStateEnter(`1,OptionStateMachine{`1}.TransitionAction)
  name: RegisterForStateEnter(U, TransitionAction)
  nameWithType: EnemyMovementController<T, U>.RegisterForStateEnter(U, OptionStateMachine<U>.TransitionAction)
  fullName: EnemyMovementController<T, U>.RegisterForStateEnter(U, OptionStateMachine<U>.TransitionAction)
  nameWithType.vb: EnemyMovementController(Of T, U).RegisterForStateEnter(U, OptionStateMachine(Of U).TransitionAction)
  fullName.vb: EnemyMovementController(Of T, U).RegisterForStateEnter(U, OptionStateMachine(Of U).TransitionAction)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.RegisterForStateEnter(`1,OptionStateMachine{`1}.TransitionAction)
    name: RegisterForStateEnter
  - name: (
  - name: U
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{`1}.TransitionAction
    name: TransitionAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.RegisterForStateEnter(`1,OptionStateMachine{`1}.TransitionAction)
    name: RegisterForStateEnter
  - name: (
  - name: U
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{`1}.TransitionAction
    name: TransitionAction
  - name: )
- uid: Global.EnemyMovementController`2.UnregisterForStateEnter(`1,OptionStateMachine{`1}.TransitionAction)
  commentId: M:Global.EnemyMovementController`2.UnregisterForStateEnter(`1,OptionStateMachine{`1}.TransitionAction)
  name: UnregisterForStateEnter(U, TransitionAction)
  nameWithType: EnemyMovementController<T, U>.UnregisterForStateEnter(U, OptionStateMachine<U>.TransitionAction)
  fullName: EnemyMovementController<T, U>.UnregisterForStateEnter(U, OptionStateMachine<U>.TransitionAction)
  nameWithType.vb: EnemyMovementController(Of T, U).UnregisterForStateEnter(U, OptionStateMachine(Of U).TransitionAction)
  fullName.vb: EnemyMovementController(Of T, U).UnregisterForStateEnter(U, OptionStateMachine(Of U).TransitionAction)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.UnregisterForStateEnter(`1,OptionStateMachine{`1}.TransitionAction)
    name: UnregisterForStateEnter
  - name: (
  - name: U
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{`1}.TransitionAction
    name: TransitionAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.UnregisterForStateEnter(`1,OptionStateMachine{`1}.TransitionAction)
    name: UnregisterForStateEnter
  - name: (
  - name: U
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{`1}.TransitionAction
    name: TransitionAction
  - name: )
- uid: Global.EnemyMovementController`2.RegisterForStateExit(`1,OptionStateMachine{`1}.TransitionAction)
  commentId: M:Global.EnemyMovementController`2.RegisterForStateExit(`1,OptionStateMachine{`1}.TransitionAction)
  name: RegisterForStateExit(U, TransitionAction)
  nameWithType: EnemyMovementController<T, U>.RegisterForStateExit(U, OptionStateMachine<U>.TransitionAction)
  fullName: EnemyMovementController<T, U>.RegisterForStateExit(U, OptionStateMachine<U>.TransitionAction)
  nameWithType.vb: EnemyMovementController(Of T, U).RegisterForStateExit(U, OptionStateMachine(Of U).TransitionAction)
  fullName.vb: EnemyMovementController(Of T, U).RegisterForStateExit(U, OptionStateMachine(Of U).TransitionAction)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.RegisterForStateExit(`1,OptionStateMachine{`1}.TransitionAction)
    name: RegisterForStateExit
  - name: (
  - name: U
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{`1}.TransitionAction
    name: TransitionAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.RegisterForStateExit(`1,OptionStateMachine{`1}.TransitionAction)
    name: RegisterForStateExit
  - name: (
  - name: U
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{`1}.TransitionAction
    name: TransitionAction
  - name: )
- uid: Global.EnemyMovementController`2.UnregisterForStateExit(`1,OptionStateMachine{`1}.TransitionAction)
  commentId: M:Global.EnemyMovementController`2.UnregisterForStateExit(`1,OptionStateMachine{`1}.TransitionAction)
  name: UnregisterForStateExit(U, TransitionAction)
  nameWithType: EnemyMovementController<T, U>.UnregisterForStateExit(U, OptionStateMachine<U>.TransitionAction)
  fullName: EnemyMovementController<T, U>.UnregisterForStateExit(U, OptionStateMachine<U>.TransitionAction)
  nameWithType.vb: EnemyMovementController(Of T, U).UnregisterForStateExit(U, OptionStateMachine(Of U).TransitionAction)
  fullName.vb: EnemyMovementController(Of T, U).UnregisterForStateExit(U, OptionStateMachine(Of U).TransitionAction)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.UnregisterForStateExit(`1,OptionStateMachine{`1}.TransitionAction)
    name: UnregisterForStateExit
  - name: (
  - name: U
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{`1}.TransitionAction
    name: TransitionAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.UnregisterForStateExit(`1,OptionStateMachine{`1}.TransitionAction)
    name: UnregisterForStateExit
  - name: (
  - name: U
  - name: ','
  - name: " "
  - uid: Global.OptionStateMachine{`1}.TransitionAction
    name: TransitionAction
  - name: )
- uid: Global.EnemyMovementController`2.RegisterCollideXCallback(IntObject.SolidAction)
  commentId: M:Global.EnemyMovementController`2.RegisterCollideXCallback(IntObject.SolidAction)
  name: RegisterCollideXCallback(SolidAction)
  nameWithType: EnemyMovementController<T, U>.RegisterCollideXCallback(IntObject.SolidAction)
  fullName: EnemyMovementController<T, U>.RegisterCollideXCallback(IntObject.SolidAction)
  nameWithType.vb: EnemyMovementController(Of T, U).RegisterCollideXCallback(IntObject.SolidAction)
  fullName.vb: EnemyMovementController(Of T, U).RegisterCollideXCallback(IntObject.SolidAction)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.RegisterCollideXCallback(IntObject.SolidAction)
    name: RegisterCollideXCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.RegisterCollideXCallback(IntObject.SolidAction)
    name: RegisterCollideXCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
- uid: Global.EnemyMovementController`2.UnregisterCollideXCallback(IntObject.SolidAction)
  commentId: M:Global.EnemyMovementController`2.UnregisterCollideXCallback(IntObject.SolidAction)
  name: UnregisterCollideXCallback(SolidAction)
  nameWithType: EnemyMovementController<T, U>.UnregisterCollideXCallback(IntObject.SolidAction)
  fullName: EnemyMovementController<T, U>.UnregisterCollideXCallback(IntObject.SolidAction)
  nameWithType.vb: EnemyMovementController(Of T, U).UnregisterCollideXCallback(IntObject.SolidAction)
  fullName.vb: EnemyMovementController(Of T, U).UnregisterCollideXCallback(IntObject.SolidAction)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.UnregisterCollideXCallback(IntObject.SolidAction)
    name: UnregisterCollideXCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.UnregisterCollideXCallback(IntObject.SolidAction)
    name: UnregisterCollideXCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
- uid: Global.EnemyMovementController`2.RegisterCollideYCallback(IntObject.SolidAction)
  commentId: M:Global.EnemyMovementController`2.RegisterCollideYCallback(IntObject.SolidAction)
  name: RegisterCollideYCallback(SolidAction)
  nameWithType: EnemyMovementController<T, U>.RegisterCollideYCallback(IntObject.SolidAction)
  fullName: EnemyMovementController<T, U>.RegisterCollideYCallback(IntObject.SolidAction)
  nameWithType.vb: EnemyMovementController(Of T, U).RegisterCollideYCallback(IntObject.SolidAction)
  fullName.vb: EnemyMovementController(Of T, U).RegisterCollideYCallback(IntObject.SolidAction)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.RegisterCollideYCallback(IntObject.SolidAction)
    name: RegisterCollideYCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.RegisterCollideYCallback(IntObject.SolidAction)
    name: RegisterCollideYCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
- uid: Global.EnemyMovementController`2.UnregisterCollideYCallback(IntObject.SolidAction)
  commentId: M:Global.EnemyMovementController`2.UnregisterCollideYCallback(IntObject.SolidAction)
  name: UnregisterCollideYCallback(SolidAction)
  nameWithType: EnemyMovementController<T, U>.UnregisterCollideYCallback(IntObject.SolidAction)
  fullName: EnemyMovementController<T, U>.UnregisterCollideYCallback(IntObject.SolidAction)
  nameWithType.vb: EnemyMovementController(Of T, U).UnregisterCollideYCallback(IntObject.SolidAction)
  fullName.vb: EnemyMovementController(Of T, U).UnregisterCollideYCallback(IntObject.SolidAction)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.UnregisterCollideYCallback(IntObject.SolidAction)
    name: UnregisterCollideYCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.UnregisterCollideYCallback(IntObject.SolidAction)
    name: UnregisterCollideYCallback
  - name: (
  - uid: Global.IntObject.SolidAction
    name: SolidAction
  - name: )
- uid: Global.EnemyMovementController`2.RegisterOverlapActorCallback(IntObject.ActorAction)
  commentId: M:Global.EnemyMovementController`2.RegisterOverlapActorCallback(IntObject.ActorAction)
  name: RegisterOverlapActorCallback(ActorAction)
  nameWithType: EnemyMovementController<T, U>.RegisterOverlapActorCallback(IntObject.ActorAction)
  fullName: EnemyMovementController<T, U>.RegisterOverlapActorCallback(IntObject.ActorAction)
  nameWithType.vb: EnemyMovementController(Of T, U).RegisterOverlapActorCallback(IntObject.ActorAction)
  fullName.vb: EnemyMovementController(Of T, U).RegisterOverlapActorCallback(IntObject.ActorAction)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.RegisterOverlapActorCallback(IntObject.ActorAction)
    name: RegisterOverlapActorCallback
  - name: (
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.RegisterOverlapActorCallback(IntObject.ActorAction)
    name: RegisterOverlapActorCallback
  - name: (
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  - name: )
- uid: Global.EnemyMovementController`2.UnregisterOverlapActorCallback(IntObject.ActorAction)
  commentId: M:Global.EnemyMovementController`2.UnregisterOverlapActorCallback(IntObject.ActorAction)
  name: UnregisterOverlapActorCallback(ActorAction)
  nameWithType: EnemyMovementController<T, U>.UnregisterOverlapActorCallback(IntObject.ActorAction)
  fullName: EnemyMovementController<T, U>.UnregisterOverlapActorCallback(IntObject.ActorAction)
  nameWithType.vb: EnemyMovementController(Of T, U).UnregisterOverlapActorCallback(IntObject.ActorAction)
  fullName.vb: EnemyMovementController(Of T, U).UnregisterOverlapActorCallback(IntObject.ActorAction)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.UnregisterOverlapActorCallback(IntObject.ActorAction)
    name: UnregisterOverlapActorCallback
  - name: (
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.UnregisterOverlapActorCallback(IntObject.ActorAction)
    name: UnregisterOverlapActorCallback
  - name: (
  - uid: Global.IntObject.ActorAction
    name: ActorAction
  - name: )
- uid: Global.EnemyMovementController`2.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  commentId: M:Global.EnemyMovementController`2.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  name: RegisterOverlapTriggerCallback(TriggerAction)
  nameWithType: EnemyMovementController<T, U>.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  fullName: EnemyMovementController<T, U>.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  nameWithType.vb: EnemyMovementController(Of T, U).RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  fullName.vb: EnemyMovementController(Of T, U).RegisterOverlapTriggerCallback(IntObject.TriggerAction)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
    name: RegisterOverlapTriggerCallback
  - name: (
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.RegisterOverlapTriggerCallback(IntObject.TriggerAction)
    name: RegisterOverlapTriggerCallback
  - name: (
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  - name: )
- uid: Global.EnemyMovementController`2.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  commentId: M:Global.EnemyMovementController`2.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  name: UnregisterOverlapTriggerCallback(TriggerAction)
  nameWithType: EnemyMovementController<T, U>.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  fullName: EnemyMovementController<T, U>.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  nameWithType.vb: EnemyMovementController(Of T, U).UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  fullName.vb: EnemyMovementController(Of T, U).UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
    name: UnregisterOverlapTriggerCallback
  - name: (
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.UnregisterOverlapTriggerCallback(IntObject.TriggerAction)
    name: UnregisterOverlapTriggerCallback
  - name: (
  - uid: Global.IntObject.TriggerAction
    name: TriggerAction
  - name: )
- uid: Global.EnemyMovementController`2.GetCollideXCallback
  commentId: M:Global.EnemyMovementController`2.GetCollideXCallback
  name: GetCollideXCallback()
  nameWithType: EnemyMovementController<T, U>.GetCollideXCallback()
  fullName: EnemyMovementController<T, U>.GetCollideXCallback()
  nameWithType.vb: EnemyMovementController(Of T, U).GetCollideXCallback()
  fullName.vb: EnemyMovementController(Of T, U).GetCollideXCallback()
  spec.csharp:
  - uid: Global.EnemyMovementController`2.GetCollideXCallback
    name: GetCollideXCallback
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.GetCollideXCallback
    name: GetCollideXCallback
  - name: (
  - name: )
- uid: Global.EnemyMovementController`2.GetCollideYCallback
  commentId: M:Global.EnemyMovementController`2.GetCollideYCallback
  name: GetCollideYCallback()
  nameWithType: EnemyMovementController<T, U>.GetCollideYCallback()
  fullName: EnemyMovementController<T, U>.GetCollideYCallback()
  nameWithType.vb: EnemyMovementController(Of T, U).GetCollideYCallback()
  fullName.vb: EnemyMovementController(Of T, U).GetCollideYCallback()
  spec.csharp:
  - uid: Global.EnemyMovementController`2.GetCollideYCallback
    name: GetCollideYCallback
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.GetCollideYCallback
    name: GetCollideYCallback
  - name: (
  - name: )
- uid: Global.EnemyMovementController`2.GetOverlapActorCallback
  commentId: M:Global.EnemyMovementController`2.GetOverlapActorCallback
  name: GetOverlapActorCallback()
  nameWithType: EnemyMovementController<T, U>.GetOverlapActorCallback()
  fullName: EnemyMovementController<T, U>.GetOverlapActorCallback()
  nameWithType.vb: EnemyMovementController(Of T, U).GetOverlapActorCallback()
  fullName.vb: EnemyMovementController(Of T, U).GetOverlapActorCallback()
  spec.csharp:
  - uid: Global.EnemyMovementController`2.GetOverlapActorCallback
    name: GetOverlapActorCallback
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.GetOverlapActorCallback
    name: GetOverlapActorCallback
  - name: (
  - name: )
- uid: Global.EnemyMovementController`2.GetOverlapTriggerCallback
  commentId: M:Global.EnemyMovementController`2.GetOverlapTriggerCallback
  name: GetOverlapTriggerCallback()
  nameWithType: EnemyMovementController<T, U>.GetOverlapTriggerCallback()
  fullName: EnemyMovementController<T, U>.GetOverlapTriggerCallback()
  nameWithType.vb: EnemyMovementController(Of T, U).GetOverlapTriggerCallback()
  fullName.vb: EnemyMovementController(Of T, U).GetOverlapTriggerCallback()
  spec.csharp:
  - uid: Global.EnemyMovementController`2.GetOverlapTriggerCallback
    name: GetOverlapTriggerCallback
  - name: (
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.GetOverlapTriggerCallback
    name: GetOverlapTriggerCallback
  - name: (
  - name: )
- uid: Global.EnemyMovementController`2.OnCollideX(IntSolid)
  commentId: M:Global.EnemyMovementController`2.OnCollideX(IntSolid)
  name: OnCollideX(IntSolid)
  nameWithType: EnemyMovementController<T, U>.OnCollideX(IntSolid)
  fullName: EnemyMovementController<T, U>.OnCollideX(IntSolid)
  nameWithType.vb: EnemyMovementController(Of T, U).OnCollideX(IntSolid)
  fullName.vb: EnemyMovementController(Of T, U).OnCollideX(IntSolid)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.OnCollideX(IntSolid)
    name: OnCollideX
  - name: (
  - uid: Global.IntSolid
    name: IntSolid
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.OnCollideX(IntSolid)
    name: OnCollideX
  - name: (
  - uid: Global.IntSolid
    name: IntSolid
  - name: )
- uid: Global.EnemyMovementController`2.OnCollideY(IntSolid)
  commentId: M:Global.EnemyMovementController`2.OnCollideY(IntSolid)
  name: OnCollideY(IntSolid)
  nameWithType: EnemyMovementController<T, U>.OnCollideY(IntSolid)
  fullName: EnemyMovementController<T, U>.OnCollideY(IntSolid)
  nameWithType.vb: EnemyMovementController(Of T, U).OnCollideY(IntSolid)
  fullName.vb: EnemyMovementController(Of T, U).OnCollideY(IntSolid)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.OnCollideY(IntSolid)
    name: OnCollideY
  - name: (
  - uid: Global.IntSolid
    name: IntSolid
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.OnCollideY(IntSolid)
    name: OnCollideY
  - name: (
  - uid: Global.IntSolid
    name: IntSolid
  - name: )
- uid: Global.EnemyMovementController`2.OnOverlapActor(IntActor)
  commentId: M:Global.EnemyMovementController`2.OnOverlapActor(IntActor)
  name: OnOverlapActor(IntActor)
  nameWithType: EnemyMovementController<T, U>.OnOverlapActor(IntActor)
  fullName: EnemyMovementController<T, U>.OnOverlapActor(IntActor)
  nameWithType.vb: EnemyMovementController(Of T, U).OnOverlapActor(IntActor)
  fullName.vb: EnemyMovementController(Of T, U).OnOverlapActor(IntActor)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.OnOverlapActor(IntActor)
    name: OnOverlapActor
  - name: (
  - uid: Global.IntActor
    name: IntActor
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.OnOverlapActor(IntActor)
    name: OnOverlapActor
  - name: (
  - uid: Global.IntActor
    name: IntActor
  - name: )
- uid: Global.EnemyMovementController`2.OnOverlapTrigger(IntTrigger)
  commentId: M:Global.EnemyMovementController`2.OnOverlapTrigger(IntTrigger)
  name: OnOverlapTrigger(IntTrigger)
  nameWithType: EnemyMovementController<T, U>.OnOverlapTrigger(IntTrigger)
  fullName: EnemyMovementController<T, U>.OnOverlapTrigger(IntTrigger)
  nameWithType.vb: EnemyMovementController(Of T, U).OnOverlapTrigger(IntTrigger)
  fullName.vb: EnemyMovementController(Of T, U).OnOverlapTrigger(IntTrigger)
  spec.csharp:
  - uid: Global.EnemyMovementController`2.OnOverlapTrigger(IntTrigger)
    name: OnOverlapTrigger
  - name: (
  - uid: Global.IntTrigger
    name: IntTrigger
  - name: )
  spec.vb:
  - uid: Global.EnemyMovementController`2.OnOverlapTrigger(IntTrigger)
    name: OnOverlapTrigger
  - name: (
  - uid: Global.IntTrigger
    name: IntTrigger
  - name: )
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.FlyingMovementController.Initialize*
  commentId: Overload:Global.FlyingMovementController.Initialize
  name: Initialize
  nameWithType: FlyingMovementController.Initialize
  fullName: FlyingMovementController.Initialize
- uid: Global.IntEnemy
  commentId: T:Global.IntEnemy
  name: IntEnemy
  nameWithType: IntEnemy
  fullName: IntEnemy
- uid: Global.FlyingMovementController.Idle*
  commentId: Overload:Global.FlyingMovementController.Idle
  name: Idle
  nameWithType: FlyingMovementController.Idle
  fullName: FlyingMovementController.Idle
- uid: Global.FlyingMovementController.Move*
  commentId: Overload:Global.FlyingMovementController.Move
  name: Move
  nameWithType: FlyingMovementController.Move
  fullName: FlyingMovementController.Move
- uid: UnityEngine.Vector2
  commentId: T:UnityEngine.Vector2
  parent: UnityEngine
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.FlyingMovementController.GoTo*
  commentId: Overload:Global.FlyingMovementController.GoTo
  name: GoTo
  nameWithType: FlyingMovementController.GoTo
  fullName: FlyingMovementController.GoTo
- uid: Global.FlyingMovementController.DipCharge*
  commentId: Overload:Global.FlyingMovementController.DipCharge
  name: DipCharge
  nameWithType: FlyingMovementController.DipCharge
  fullName: FlyingMovementController.DipCharge
- uid: Global.FlyingMovementController.Swoop*
  commentId: Overload:Global.FlyingMovementController.Swoop
  name: Swoop
  nameWithType: FlyingMovementController.Swoop
  fullName: FlyingMovementController.Swoop
- uid: Global.FlyingMovementController.Charge*
  commentId: Overload:Global.FlyingMovementController.Charge
  name: Charge
  nameWithType: FlyingMovementController.Charge
  fullName: FlyingMovementController.Charge
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.FlyingMovementController.Update*
  commentId: Overload:Global.FlyingMovementController.Update
  name: Update
  nameWithType: FlyingMovementController.Update
  fullName: FlyingMovementController.Update
- uid: Global.FlyingMovementController.Reset*
  commentId: Overload:Global.FlyingMovementController.Reset
  name: Reset
  nameWithType: FlyingMovementController.Reset
  fullName: FlyingMovementController.Reset
