### YamlMime:ManagedReference
items:
- uid: Global.ConditionalShowComplexAttribute
  commentId: T:Global.ConditionalShowComplexAttribute
  id: ConditionalShowComplexAttribute
  parent: Global
  children:
  - Global.ConditionalShowComplexAttribute.#ctor(System.String[],ConditionalShowComplexAttribute.LogicalOperator,System.Int32[])
  - Global.ConditionalShowComplexAttribute.conditionalSourceField
  - Global.ConditionalShowComplexAttribute.enumValues
  - Global.ConditionalShowComplexAttribute.logicalOperator
  langs:
  - csharp
  - vb
  name: ConditionalShowComplexAttribute
  nameWithType: ConditionalShowComplexAttribute
  fullName: ConditionalShowComplexAttribute
  type: Class
  source:
    remote:
      path: Assets/Objects & Components/CustomEditor/ConditionalShowComplexAttribute.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: ConditionalShowComplexAttribute
    path: ../Assets/Objects & Components/CustomEditor/ConditionalShowComplexAttribute.cs
    startLine: 5
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Property|AttributeTargets.Field, Inherited = true)]

      [CanEditMultipleObjects]

      public class ConditionalShowComplexAttribute : PropertyAttribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.ClassOrAttributeTargets.StructOrAttributeTargets.PropertyOrAttributeTargets.Field, Inherited:=True)>

      <CanEditMultipleObjects>

      Public Class ConditionalShowComplexAttribute Inherits PropertyAttribute
  inheritance:
  - System.Object
  - System.Attribute
  - UnityEngine.PropertyAttribute
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 396
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: true
  - type: UnityEditor.CanEditMultipleObjects
    ctor: UnityEditor.CanEditMultipleObjects.#ctor
    arguments: []
- uid: Global.ConditionalShowComplexAttribute.conditionalSourceField
  commentId: F:Global.ConditionalShowComplexAttribute.conditionalSourceField
  id: conditionalSourceField
  parent: Global.ConditionalShowComplexAttribute
  langs:
  - csharp
  - vb
  name: conditionalSourceField
  nameWithType: ConditionalShowComplexAttribute.conditionalSourceField
  fullName: ConditionalShowComplexAttribute.conditionalSourceField
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/CustomEditor/ConditionalShowComplexAttribute.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: conditionalSourceField
    path: ../Assets/Objects & Components/CustomEditor/ConditionalShowComplexAttribute.cs
    startLine: 16
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public string[] conditionalSourceField
    return:
      type: System.String[]
    content.vb: Public conditionalSourceField As String()
- uid: Global.ConditionalShowComplexAttribute.enumValues
  commentId: F:Global.ConditionalShowComplexAttribute.enumValues
  id: enumValues
  parent: Global.ConditionalShowComplexAttribute
  langs:
  - csharp
  - vb
  name: enumValues
  nameWithType: ConditionalShowComplexAttribute.enumValues
  fullName: ConditionalShowComplexAttribute.enumValues
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/CustomEditor/ConditionalShowComplexAttribute.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: enumValues
    path: ../Assets/Objects & Components/CustomEditor/ConditionalShowComplexAttribute.cs
    startLine: 18
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public int[] enumValues
    return:
      type: System.Int32[]
    content.vb: Public enumValues As Integer()
- uid: Global.ConditionalShowComplexAttribute.logicalOperator
  commentId: F:Global.ConditionalShowComplexAttribute.logicalOperator
  id: logicalOperator
  parent: Global.ConditionalShowComplexAttribute
  langs:
  - csharp
  - vb
  name: logicalOperator
  nameWithType: ConditionalShowComplexAttribute.logicalOperator
  fullName: ConditionalShowComplexAttribute.logicalOperator
  type: Field
  source:
    remote:
      path: Assets/Objects & Components/CustomEditor/ConditionalShowComplexAttribute.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: logicalOperator
    path: ../Assets/Objects & Components/CustomEditor/ConditionalShowComplexAttribute.cs
    startLine: 19
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public ConditionalShowComplexAttribute.LogicalOperator logicalOperator
    return:
      type: Global.ConditionalShowComplexAttribute.LogicalOperator
    content.vb: Public logicalOperator As ConditionalShowComplexAttribute.LogicalOperator
- uid: Global.ConditionalShowComplexAttribute.#ctor(System.String[],ConditionalShowComplexAttribute.LogicalOperator,System.Int32[])
  commentId: M:Global.ConditionalShowComplexAttribute.#ctor(System.String[],ConditionalShowComplexAttribute.LogicalOperator,System.Int32[])
  id: '#ctor(System.String[],ConditionalShowComplexAttribute.LogicalOperator,System.Int32[])'
  parent: Global.ConditionalShowComplexAttribute
  langs:
  - csharp
  - vb
  name: ConditionalShowComplexAttribute(string[], LogicalOperator, int[])
  nameWithType: ConditionalShowComplexAttribute.ConditionalShowComplexAttribute(string[], ConditionalShowComplexAttribute.LogicalOperator, int[])
  fullName: ConditionalShowComplexAttribute.ConditionalShowComplexAttribute(string[], ConditionalShowComplexAttribute.LogicalOperator, int[])
  type: Constructor
  source:
    remote:
      path: Assets/Objects & Components/CustomEditor/ConditionalShowComplexAttribute.cs
      branch: master
      repo: https://github.com/zsilliman/Ascend.git
    id: .ctor
    path: ../Assets/Objects & Components/CustomEditor/ConditionalShowComplexAttribute.cs
    startLine: 21
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public ConditionalShowComplexAttribute(string[] conditionalSourceField, ConditionalShowComplexAttribute.LogicalOperator logicalOperator, int[] enumValues)
    parameters:
    - id: conditionalSourceField
      type: System.String[]
    - id: logicalOperator
      type: Global.ConditionalShowComplexAttribute.LogicalOperator
    - id: enumValues
      type: System.Int32[]
    content.vb: Public Sub New(conditionalSourceField As String(), logicalOperator As ConditionalShowComplexAttribute.LogicalOperator, enumValues As Integer())
  overload: Global.ConditionalShowComplexAttribute.#ctor*
  nameWithType.vb: ConditionalShowComplexAttribute.New(String(), ConditionalShowComplexAttribute.LogicalOperator, Integer())
  fullName.vb: ConditionalShowComplexAttribute.New(String(), ConditionalShowComplexAttribute.LogicalOperator, Integer())
  name.vb: New(String(), LogicalOperator, Integer())
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Attribute
  commentId: T:System.Attribute
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute
- uid: UnityEngine.PropertyAttribute
  commentId: T:UnityEngine.PropertyAttribute
  parent: UnityEngine
  isExternal: true
  name: PropertyAttribute
  nameWithType: PropertyAttribute
  fullName: UnityEngine.PropertyAttribute
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: System.String[]
  isExternal: true
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
- uid: System.Int32[]
  isExternal: true
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: (
  - name: )
- uid: Global.ConditionalShowComplexAttribute.LogicalOperator
  commentId: T:Global.ConditionalShowComplexAttribute.LogicalOperator
  name: ConditionalShowComplexAttribute.LogicalOperator
  nameWithType: ConditionalShowComplexAttribute.LogicalOperator
  fullName: ConditionalShowComplexAttribute.LogicalOperator
  spec.csharp:
  - uid: Global.ConditionalShowComplexAttribute
    name: ConditionalShowComplexAttribute
  - name: .
  - uid: Global.ConditionalShowComplexAttribute.LogicalOperator
    name: LogicalOperator
  spec.vb:
  - uid: Global.ConditionalShowComplexAttribute
    name: ConditionalShowComplexAttribute
  - name: .
  - uid: Global.ConditionalShowComplexAttribute.LogicalOperator
    name: LogicalOperator
- uid: Global.ConditionalShowComplexAttribute.#ctor*
  commentId: Overload:Global.ConditionalShowComplexAttribute.#ctor
  name: ConditionalShowComplexAttribute
  nameWithType: ConditionalShowComplexAttribute.ConditionalShowComplexAttribute
  fullName: ConditionalShowComplexAttribute.ConditionalShowComplexAttribute
  nameWithType.vb: ConditionalShowComplexAttribute.New
  fullName.vb: ConditionalShowComplexAttribute.New
  name.vb: New
