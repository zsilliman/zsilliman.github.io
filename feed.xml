<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-08-27T16:54:14-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Ascend Progress Update</title><link href="http://localhost:4000/2024/07/25/AscendProgressUpdate.html" rel="alternate" type="text/html" title="Ascend Progress Update" /><published>2024-07-25T00:00:00-04:00</published><updated>2024-07-25T00:00:00-04:00</updated><id>http://localhost:4000/2024/07/25/AscendProgressUpdate</id><content type="html" xml:base="http://localhost:4000/2024/07/25/AscendProgressUpdate.html"><![CDATA[<p>Throughout development Ascend has taken a number of twists and turns. We’ve navigated a complex tree of branching ideas. We’ve gone deep down paths only to find ourselves at a dead-end. Here is a quick status update video showcasing where we are currently with our game.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <video class="w-3/4 aspect-auto" src="/assets/posts/ascend-progress/ascend-update-july.mp4" frameborder="0" allowfullscreen="" controls="" autoplay="" loop="" muted=""></video>
</div>]]></content><author><name>Zachary Silliman</name></author><summary type="html"><![CDATA[Throughout development Ascend has taken a number of twists and turns. We’ve navigated a complex tree of branching ideas. We’ve gone deep down paths only to find ourselves at a dead-end. Here is a quick status update video showcasing where we are currently with our game.]]></summary></entry><entry><title type="html">Sprite Socket Editor Tool</title><link href="http://localhost:4000/2024/07/24/SpriteSocketEditorTool.html" rel="alternate" type="text/html" title="Sprite Socket Editor Tool" /><published>2024-07-24T00:00:00-04:00</published><updated>2024-07-24T00:00:00-04:00</updated><id>http://localhost:4000/2024/07/24/SpriteSocketEditorTool</id><content type="html" xml:base="http://localhost:4000/2024/07/24/SpriteSocketEditorTool.html"><![CDATA[<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <video class="w-3/4 aspect-auto" src="/assets/posts/sprite-socket-editor-tool/animated-sprite-preview.mp4" frameborder="0" allowfullscreen="" controls="" autoplay="" loop="" muted=""></video>
</div>

<p>Throughout the process of making a game, the need to create custom tools to solve problems is constantly arising. In this post I talk about solving the problem of attaching equipment to spritesheet-based characters. Unlike armature-based/rigged characters, spritesheets do not have well-defined transformable sockets. To attach objects to a character, I created this Sprite Socket Editor tool. This allows a creative to set positions, rotations and sorting offsets for sockets on a per-frame basis.</p>

<!--more-->

<p>All the data created in the editor is assigned to a specific scriptable object so different characters can have different assets, keeping the project organized.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <img class="w-3/4 aspect-auto" src="/assets/posts/sprite-socket-editor-tool/editor-labelled.png" />
</div>

<p>Above is the editor interface.</p>

<p class="ml-6"><span class="text-red-700">#1</span> is where you select which scriptable object you want to edit.</p>
<p class="ml-6"><span class="text-red-700">#2</span> is the list of all the sprite frames that are associated with the scriptable object. They can be separated into any number of spritesheets.</p>
<p class="ml-6"><span class="text-red-700">#3</span> is where the user can edit and visualize the positions and rotations of each socket on the character
With #4, the user can easily copy and paste between frames for a much faster workflow.</p>
<p class="ml-6"><span class="text-red-700">#4</span>, the lower portion of the editor, contains all the details of each socket. This includes socket UVs, rotation (degrees), render sorting order offset, enabled/disabled, and ignore flip.</p>
<p><br />
Here is a short video demonstrating basic usage:</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <video class="w-3/4 aspect-auto" src="/assets/posts/sprite-socket-editor-tool/editor-use-demo.mp4" frameborder="0" allowfullscreen="" controls="" autoplay="" loop="" muted=""></video>
</div>

<p>The interactions with the editor are meant to be easy to visualize and intuitive to edit. The user can simply drag socket handles to where they belong on the character’s sprite. They can then orient the handle to align with the character’s body part.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <img class="w-[1/2] aspect-auto" src="/assets/posts/sprite-socket-editor-tool/editor-close-up.png" />
</div>

<h2 id="problems-with-sprite-flip">Problems with Sprite Flip</h2>
<p>A few important problems arise after mapping sockets to each frame of a character. First, we need to make sure that we maintain the correct rotation when the sprite is flipped. As seen in the below screenshot, the flipped sprite (left) doesn’t look right because the rotations on the socket do not match the flipped sprite. Turns out this is very easy to solve, we simply multiply the socket’s offset rotation by -1. (Also note that the equipment sprite flip is being set to match the character’s sprite flip. This can be ignored with the ignore flip toggle).</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <img class="w-96 aspect-auto" src="/assets/posts/sprite-socket-editor-tool/flip-issue-0.png" />
</div>

<p>Below is the new result with correct rotations.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <img class="w-96 aspect-auto" src="/assets/posts/sprite-socket-editor-tool/flip-issue-1.png" />
</div>

<p>Next, we notice that the left/right distinction is not maintained when a sprite is flipped. In the above screenshot it appears that the sword and shield have swapped hands when we flip the sprite. The solution to this problem is simple, we just need to make sure we replace every left socket with its corresponding right socket when the sprite is flipped. When we flip the character sprite, we flip the underlying attachment too.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <img class="w-96 aspect-auto" src="/assets/posts/sprite-socket-editor-tool/flip-issue-2.png" />
</div>

<p>Unfortunately, despite being “more correct” than the previous screenshots, the above doesn’t look very good. This leads us into our last problem. We need to ensure that the sprite sorting order makes sense. We need to make sure the sprite closest to the camera is rendered in front, and the sprite furthest away is rendered in the back. This is managed by a render sorting order offset associated with each socket at each frame. In the above screenshot we want the shield to appear in the back on the left frame, but we want it to be in the front on the right frame. Fortunately this problem is easy to solve in Unity. We simply create a sorting layer and assign an integer offset relative to the character’s sprite sorting order. We assign -1 to the left hand and +1 to the right hand. This will give us our final result!</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <img class="w-96 aspect-auto" src="/assets/posts/sprite-socket-editor-tool/flip-issue-fixed.png" />
</div>

<h2 id="future-improvements">Future Improvements</h2>
<p>As can be seen clearly in the screenshot, the way the character’s hand interacts/overlaps with the equipped object can be a little awkward. Currently this system does not support more complex overlap types. Using some sort of custom depth buffer could be a potential solution to this problem, but would likely require significant effort from an animator to implement. In our case, since the character is fairly small, these details are not too important.</p>]]></content><author><name>Zachary Silliman</name></author><summary type="html"><![CDATA[Throughout the process of making a game, the need to create custom tools to solve problems is constantly arising. In this post I talk about solving the problem of attaching equipment to spritesheet-based characters. Unlike armature-based/rigged characters, spritesheets do not have well-defined transformable sockets. To attach objects to a character, I created this Sprite Socket Editor tool. This allows a creative to set positions, rotations and sorting offsets for sockets on a per-frame basis.]]></summary></entry><entry><title type="html">Ascend Dialogue System</title><link href="http://localhost:4000/2023/02/01/AscendDialogueSystem.html" rel="alternate" type="text/html" title="Ascend Dialogue System" /><published>2023-02-01T00:00:00-05:00</published><updated>2023-02-01T00:00:00-05:00</updated><id>http://localhost:4000/2023/02/01/AscendDialogueSystem</id><content type="html" xml:base="http://localhost:4000/2023/02/01/AscendDialogueSystem.html"><![CDATA[<p>Ascend is a largely narrative driven game and to properly convey the story to the player, dialogue needs to be aesthetic, simple and dynamic. Different NPCs will have different dialogue depending on various in-game states. For example, an NPC might say two different things before and after the player defeats a boss. Additionally, many NPCs will have a fallback dialogue that repeats itself when there is no new information to share with the player. The following dialogue system supports these requirements while also simplifying the task for a level designer.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <video class="w-3/4 aspect-auto" src="/assets/posts/ascend-dialogue/dialogue-demo.webm" frameborder="0" allowfullscreen="" controls="" autoplay="" loop="" muted=""></video>
</div>

<h2 id="custom-dialogue-asset">Custom Dialogue Asset</h2>
<p>To easily organize a complex network of dialogues, each logical set of dialogues is organized into a single asset. This asset is a scriptable object that can be created directly within the editor, or imported from a json file. The asset contains a list of dialogues, where each dialogue contains sprites, names, and text for all characters in a conversation.  Using these assets, a level designer can group related dialogues into folders, and reuse dialogues across different scenes/worlds.</p>

<h2 id="custom-dialogue-editor-window">Custom Dialogue Editor Window</h2>
<p>The dialogue asset is paired with a custom editor window for making modifications to the dialogues. A user can add, remove, and edit any dialogue within unity. Additionally, the user can export a dialogue as a json file, make edits to it with a preferred text editor, then re-import the file back into the asset. This gives the designer more control over their dialogue editing workflow.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <img class="w-3/4 aspect-auto" src="/assets/posts/ascend-dialogue/dialogue-editor.png" />
</div>

<h2 id="in-level-usage">In-Level Usage</h2>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <img class="w-3/4 aspect-auto" src="/assets/posts/ascend-dialogue/dialogue-component.png" />
</div>

<p>A designer can leverage Ascend’s internal event system to trigger a dialogue on a user interaction. Once a dialogue asset has been selected (The “Dialogue Obj” label), the dialogue interaction can be configured. A default dialogue can be optionally be assigned. Additionally, for each dialogue a dependency can be assigned. If a condition is met for one of the dialogues, that dialogue will play. If no condition is met and a default option is configured, the default dialogue will play. 
<br /><br />
In the above screenshot, the dialogue named “Default” is configured as the default dialogue. The dialogue option “First Interaction” is configured with the dependency “Scene: TalkedToFisherman” = False. This means that this dialogue option will only play when the gamestate condition has not been met. The result can be seen in the video at the top of the page.</p>]]></content><author><name>Zachary Silliman</name></author><summary type="html"><![CDATA[Ascend is a largely narrative driven game and to properly convey the story to the player, dialogue needs to be aesthetic, simple and dynamic. Different NPCs will have different dialogue depending on various in-game states. For example, an NPC might say two different things before and after the player defeats a boss. Additionally, many NPCs will have a fallback dialogue that repeats itself when there is no new information to share with the player. The following dialogue system supports these requirements while also simplifying the task for a level designer.]]></summary></entry><entry><title type="html">Ascend Level Editor</title><link href="http://localhost:4000/2023/01/30/AscendLevelEditor.html" rel="alternate" type="text/html" title="Ascend Level Editor" /><published>2023-01-30T00:00:00-05:00</published><updated>2023-01-30T00:00:00-05:00</updated><id>http://localhost:4000/2023/01/30/AscendLevelEditor</id><content type="html" xml:base="http://localhost:4000/2023/01/30/AscendLevelEditor.html"><![CDATA[<p>In order to streamline level design and creation, I implemented an easy-to-use level editing tool. Ascend is subdivided into 6 worlds: the pit, the crossroads, the forest, the village, the lake and the ascent. Each world is composed of a variety of interconnected levels. As part of gameplay, the player needs to be able to seamlessly travel between levels and worlds. The custom level editor is designed to handle this game structure while facilitating painless refactoring, rapid iteration, and visual feedback.</p>

<h2 id="level-layout-system">Level Layout System</h2>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <img class="w-3/4 aspect-auto" src="/assets/posts/ascend-level-editor/multi-levels-example.png" />
</div>

<p>Within each world there are a variety of levels, represented by the yellow boxes in the above screenshot. Each level can be assigned a name to easily identify it in the viewport as well as in unity’s scene hierarchy window. The level editing toolkit contains a custom inspector used to easily add levels and place them in the specified location. This allows for simple and rapid level layouts (note that ctrl+z works too!). Since each level is its own isolated module, the level designer can easily reorder levels without significant refactoring. This also comes with the added optimization bonus of being able to disable all inactive levels while in-game.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <video class="w-3/4 aspect-auto" src="/assets/posts/ascend-level-editor/layout-system.mp4" frameborder="0" allowfullscreen="" controls="" autoplay="" loop="" muted=""></video>
</div>

<h2 id="inter-level-camera--door-system">Inter-Level Camera &amp; Door System</h2>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <img class="w-3/4 aspect-auto" src="/assets/posts/ascend-level-editor/single-level-example.png" />
</div>

<p>While the player is within a particular level, the camera will automatically be bounded by the yellow rectangle seen in the viewport. The player can walk between levels at points where two sections intersect. When a player crosses into a new level, the camera will seamlessly transition. This functions much like the level layout of Celeste.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <video class="w-3/4 aspect-auto" src="/assets/posts/ascend-level-editor/doors-demo.webm" frameborder="0" allowfullscreen="" controls="" autoplay="" loop="" muted=""></video>
</div>

<p>To further augment this system, this level editing tool can autogenerate doors at intersections between levels that can open/close based on configurable conditions. Currently the following conditions are allowed: when all collectables are collected, all enemies are killed, or when a particular gamestate event is triggered. The above example shows the player collecting all collectables and landing safely on the ground before the doors open.</p>

<h2 id="parallax-system">Parallax System</h2>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <video class="w-3/4 aspect-auto" src="/assets/posts/ascend-level-editor/parallax-demo.webm" frameborder="0" allowfullscreen="" controls="" autoplay="" loop="" muted=""></video>
</div>

<p>Part of the editor toolkit includes an easily configurable and preview-able parallax system. An artist can easily set up a background for a level and configure dimensions, fit, and wrap settings. Each parallax layer is a quad with a shader that will fit, wrap, and offset a texture based on the viewing camera. This allows the parallax layers to be viewed both in-game and in-editor. As an added bonus, since each layer is a quad sized to exactly to the dimensions of a level, there is no overflow outside the bounds of the level like most implementations of parallax.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <img class="w-1/3 aspect-auto" src="/assets/posts/ascend-level-editor/parallax-side-view.jpg" />
</div>

<h2 id="custom-asset-palette-editor-window">Custom Asset Palette Editor Window</h2>
<p>Inspired by Unreal Engine’s actor panel, I wanted to create a custom prefab panel for Ascend level design assets. The level designer can categorize any number of prefabs into groups, then drag and drop prefabs into a level. It also supports some ease-of-use features like auto-parenting on a drag-and-drop event.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <img class="w-3/4 aspect-auto" src="/assets/posts/ascend-level-editor/asset-palette.png" />
</div>]]></content><author><name>Zachary Silliman</name></author><summary type="html"><![CDATA[In order to streamline level design and creation, I implemented an easy-to-use level editing tool. Ascend is subdivided into 6 worlds: the pit, the crossroads, the forest, the village, the lake and the ascent. Each world is composed of a variety of interconnected levels. As part of gameplay, the player needs to be able to seamlessly travel between levels and worlds. The custom level editor is designed to handle this game structure while facilitating painless refactoring, rapid iteration, and visual feedback.]]></summary></entry><entry><title type="html">Ascend Project Overview</title><link href="http://localhost:4000/2021/03/24/AscendProjectOverview.html" rel="alternate" type="text/html" title="Ascend Project Overview" /><published>2021-03-24T00:00:00-04:00</published><updated>2021-03-24T00:00:00-04:00</updated><id>http://localhost:4000/2021/03/24/AscendProjectOverview</id><content type="html" xml:base="http://localhost:4000/2021/03/24/AscendProjectOverview.html"><![CDATA[<p>In May 2020, a friend from Cornell and I started to develop a game we are currently calling Ascend. We had first worked together on the project Dive during my last semester at Cornell. Ascend is a metroidvania 2D platformer with a strong emphasis on the narrative. If I were to define it as the offspring of two games, its parents would be Hollow Knight and Celeste. The project is being developed in Unity.</p>

<h2 id="what-is-the-gameplay">What is the Gameplay?</h2>

<p>In Ascend, we give the player the following verbs: walk, jump, double-jump, and dash. Using these verbs, the game features many standard platforming challenges such as precision platforming, spikes, and basic enemies. Although this formula is fun in many other games, we wanted to make the game feel unique so we created the concept of an aura. An aura can provide the player with some ability when the player passes through it while dashing. The ability is determined by the “item” the player is currently holding. The following abilities are currently implemented: dash reset, melee attack, ranged attack and temporary invisibility. If the player collides with an aura while walking or jumping, they die. If the player collides with an aura while dashing, they pass through the aura safely and use their active ability (only one ability is active at a time). Below is a video that demonstrates the melee item/ability.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <video class="w-3/4 aspect-auto" src="/assets/posts/ascend-overview/ascend-overview-0.mp4" frameborder="0" allowfullscreen="" controls="" autoplay="" loop="" muted=""></video>
</div>

<h2 id="what-is-the-story">What is the Story?</h2>

<p>At a high level, the player starts at the bottom of a pit, not knowing who or where he is. The player escapes the pit, explores the world and collects memory fragments from his past. Once he develops enough understanding of himself, he ascends a mountain to fully realize who he is and what happened to get him trapped in this world. Turns out the entire world takes place within the main character’s head. We leave it up to the player to decide whether they would like to escape it. Throughout the ascent, the player encounters NPCs that are reflections of real people. Additionally, the enemies encountered are reflections of the player’s own feelings.</p>

<h2 id="where-are-we-right-now">Where are we right now?</h2>

<p>A large chunk of the gameplay mechanics have been implemented.  We are currently working on tuning our physics, creating new enemy types, and designing levels. I recruited another friend from Cornell to help with our level design. We have finished the tutorial level design and are beginning to work towards the later levels.</p>

<p>​Our narrative has been written. We are having friends and family read through it and provide suggestions. We are starting to integrate dialogue into the current prototype of the game.</p>

<p>​The art seen in the video was all created by us, but is nowhere near complete. Once we get further along in level design we will likely need to recruit an artist.</p>

<p>​See a detailed breakdown of the Player’s physics here.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <video class="w-3/4 aspect-auto" src="/assets/posts/ascend-overview/ascend-overview-1.mp4" frameborder="0" allowfullscreen="" controls="" autoplay="" loop="" muted=""></video>
</div>

<p>Above is footage of the game showing the dash reset mechanic. Each enemy produces a new aura each time one of its herd is killed.</p>

<div class="w-full h-auto flex justify-center items-center my-6 mx-0">
    <video class="w-3/4 aspect-auto" src="/assets/posts/ascend-overview/ascend-overview-2.mp4" frameborder="0" allowfullscreen="" controls="" autoplay="" loop="" muted=""></video>
</div>

<p>Above is footage of a new enemy type we are working on. A hive of bees try to protect the queen bee inside their maze-like hive. If the player kills a worker bee, the queen gets angry and emits an aura. You must use her aura to defeat her. The worker bees use A* search to locate flowers in the hive and chase the player throughout the maze.</p>]]></content><author><name>Zachary Silliman</name></author><summary type="html"><![CDATA[In May 2020, a friend from Cornell and I started to develop a game we are currently calling Ascend. We had first worked together on the project Dive during my last semester at Cornell. Ascend is a metroidvania 2D platformer with a strong emphasis on the narrative. If I were to define it as the offspring of two games, its parents would be Hollow Knight and Celeste. The project is being developed in Unity.]]></summary></entry></feed>